/* tslint:disable */
/* eslint-disable */
/**
 * RIS :: Journeys
 * ## Info * member of the **[RIS-API](https://db-planet.deutschebahn.com/pages/reisendeninformation-ris-api)** family * powered by [TR Reisendeninformationen](https://db-planet.deutschebahn.com/pages/reisendeninformation/apps/content/willkommen) * implements model: 1.0.206-SNAPSHOT  ## Capabilities Provides detailed information for a particular journey [Fahrt], including: * transport type [Produktklasse], category [Fahrtgattung], line [Linie], administration [Verwaltung] and operator [Betreiber] * origin [Starthalt] and destination [Zielhalt] * departues [Abfahrten] or arrivals [Ankuenfte] (depending on board) with schedule [Soll] and forecast [Vorschau] times and platforms [Plattform / Gleis / Bussteig etc.] * canceld stops [Haltausfall], additional stops [Zusatzhalt], additional textual information [Freitexte] and possible restrictions on changing passengers [Fahrgastwechsel] * references to other transports representing replacement [Ersatz], relief [Entlastung], travels with [Vereinigung] and continuation [Durchbindung] * disruptions [St√∂rungen] for journey, arrivals and departures  The consumer can choose a segment based [Fahrtabschnittsbasiert] or an event based [Fahrtereignisbasiert] view.  Requests are usually stated using a journey ID defined by TR. In addition journeys and partiuclar departures [Abfahrten] can be matched by providing data like category [Fahrtgattung], number [Fahrtnummer] and administration ID [VerwaltungsID].   ## Limitations * journeys are limited to 22 hours ahead  ## Getting Started * get to know the vision behind [RIS-API](https://db-planet.deutschebahn.com/pages/reisendeninformation-ris-api/apps/content/inhalt) * learn how to [get started](https://db-planet.deutschebahn.com/pages/reisendeninformation-ris-api/apps/content/openapi-beispiele) for your programming language of desire
 *
 * The version of the OpenAPI document: 1.1.82
 * Contact: ris-fachbetrieb@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

export interface ConfigurationParameters {
  apiKey?:
    | string
    | Promise<string>
    | ((name: string) => string)
    | ((name: string) => Promise<string>);
  username?: string;
  password?: string;
  accessToken?:
    | string
    | Promise<string>
    | ((name?: string, scopes?: string[]) => string)
    | ((name?: string, scopes?: string[]) => Promise<string>);
  basePath?: string;
  baseOptions?: any;
  formDataCtor?: new () => any;
}

export class Configuration {
  /**
   * parameter for apiKey security
   * @param name security name
   * @memberof Configuration
   */
  apiKey?:
    | string
    | Promise<string>
    | ((name: string) => string)
    | ((name: string) => Promise<string>);
  /**
   * parameter for basic security
   *
   * @type {string}
   * @memberof Configuration
   */
  username?: string;
  /**
   * parameter for basic security
   *
   * @type {string}
   * @memberof Configuration
   */
  password?: string;
  /**
   * parameter for oauth2 security
   * @param name security name
   * @param scopes oauth2 scope
   * @memberof Configuration
   */
  accessToken?:
    | string
    | Promise<string>
    | ((name?: string, scopes?: string[]) => string)
    | ((name?: string, scopes?: string[]) => Promise<string>);
  /**
   * override base path
   *
   * @type {string}
   * @memberof Configuration
   */
  basePath?: string;
  /**
   * base options for axios calls
   *
   * @type {any}
   * @memberof Configuration
   */
  baseOptions?: any;
  /**
   * The FormData constructor that will be used to create multipart form data
   * requests. You can inject this here so that execution environments that
   * do not support the FormData class can still run the generated client.
   *
   * @type {new () => FormData}
   */
  formDataCtor?: new () => any;

  constructor(param: ConfigurationParameters = {}) {
    this.apiKey = param.apiKey;
    this.username = param.username;
    this.password = param.password;
    this.accessToken = param.accessToken;
    this.basePath = param.basePath;
    this.baseOptions = param.baseOptions;
    this.formDataCtor = param.formDataCtor;
  }

  /**
   * Check if the given MIME is a JSON MIME.
   * JSON MIME examples:
   *   application/json
   *   application/json; charset=UTF8
   *   APPLICATION/JSON
   *   application/vnd.company+json
   * @param mime - MIME (Multipurpose Internet Mail Extensions)
   * @return True if the given MIME is JSON, false otherwise.
   */
  public isJsonMime(mime: string): boolean {
    const jsonMime: RegExp = new RegExp(
      '^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$',
      'i',
    );
    return (
      mime !== null &&
      (jsonMime.test(mime) ||
        mime.toLowerCase() === 'application/json-patch+json')
    );
  }
}
