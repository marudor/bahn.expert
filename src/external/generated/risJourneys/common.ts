/* tslint:disable */
/* eslint-disable */
/**
 * RIS::Journeys
 * ## Info  * member of the **[RIS-API](https://db-planet.deutschebahn.com/pages/reisendeninformation-ris-api)** family * powered by [T.R Reisendeninformation](https://db-planet.deutschebahn.com/pages/reisendeninformation/apps/content/willkommen)  ## Capabilities  ### Journey-Information  Provides detailed information for a particular journey [Fahrt], including:  * transport type [Produktklasse], category [Fahrtgattung], line [Linie], administration [Verwaltung] and operator [Betreiber] * origin [Starthalt] and destination [Zielhalt] * departures [Abfahrten] or arrivals [Ankünfte] (depending on board) with schedule [Soll] and forecast [Vorschau] times and platforms [Plattform / Gleis / Bussteig etc.] * canceled stops [Haltausfall], additional stops [Zusatzhalt], canceled additional stops [zurückgenommene Zusatzhalte] additional textual information [Freitexte] and possible restrictions on changing passengers [Fahrgastwechsel] and on demand stops [Bedarfshalt] * references to other transports representing replacement [Ersatz], relief [Entlastung], travels with [Vereinigung] including separatation at [Trennung in] and continuation [Durchbindung] * disruptions [Störungen] for journey, arrivals and departures * information on replacement transports [SEV] * journeys message [Freitexte / Verspätungsbegründung] and direction-texts [Richtungstexte] * and much more  The consumer can choose a segment based [Fahrtabschnittsbasiert] or an event based [Fahrtereignisbasiert] view.  ### Journey-Searches  Powerful search functionallity for finding journeys by their journey-relation [fachliche Fahrt-Relation] or a mix of attributes like  * journey number [Fahrtnummer] * journey administration [Verwaltung] * journey line [Linienname] * and much more  ### Asynchronous change-notifications  The RIS-API event-system [RIS::Events](https://db-planet.deutschebahn.com/pages/reisendeninformation-ris-api/apps/content/events) can be used to get push-notifications in case information within RIS::Journeys changes. This enables use-cases like:  * refreshing ui in case information changes * doing something in your backend in case information changes * caching information and invalidate cache in case information changes  ## Limitations / Known Issues  * journeys are limited to 22h ahead  ## Getting Started  * get to know the vision behind [RIS-API](https://db.de/ris-api) * visit our [documentation](https://ris.gitpages.tech.rz.db.de/risapi/documentation/), learn how to [get started with openapi](https://ris.gitpages.tech.rz.db.de/risapi/documentation/05_Coding-Dojo/020_getting_started_openapi.html) or how to [get started with asyncapi](https://ris.gitpages.tech.rz.db.de/risapi/documentation/05_Coding-Dojo/030_getting_started_asyncapi.html) and check out our [coding-examples](https://ris.gitpages.tech.rz.db.de/risapi/documentation/05_Coding-Dojo/040_examples.html)
 *
 * The version of the OpenAPI document: 1.3.1
 * Contact: ris-fachbetrieb@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosInstance, AxiosResponse } from 'axios';
import { type RequestArgs, RequiredError } from './base';
import type { Configuration } from './configuration';

/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com';

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = (
	functionName: string,
	paramName: string,
	paramValue: unknown,
) => {
	if (paramValue === null || paramValue === undefined) {
		throw new RequiredError(
			paramName,
			`Required parameter ${paramName} was null or undefined when calling ${functionName}.`,
		);
	}
};

/**
 *
 * @export
 */
export const setApiKeyToObject = async (
	object: any,
	keyParamName: string,
	configuration?: Configuration,
) => {
	if (configuration && configuration.apiKey) {
		const localVarApiKeyValue =
			typeof configuration.apiKey === 'function'
				? await configuration.apiKey(keyParamName)
				: await configuration.apiKey;
		object[keyParamName] = localVarApiKeyValue;
	}
};

/**
 *
 * @export
 */
export const setBasicAuthToObject = (
	object: any,
	configuration?: Configuration,
) => {
	if (configuration && (configuration.username || configuration.password)) {
		object['auth'] = {
			username: configuration.username,
			password: configuration.password,
		};
	}
};

/**
 *
 * @export
 */
export const setBearerAuthToObject = async (
	object: any,
	configuration?: Configuration,
) => {
	if (configuration && configuration.accessToken) {
		const accessToken =
			typeof configuration.accessToken === 'function'
				? await configuration.accessToken()
				: await configuration.accessToken;
		object['Authorization'] = 'Bearer ' + accessToken;
	}
};

/**
 *
 * @export
 */
export const setOAuthToObject = async (
	object: any,
	name: string,
	scopes: string[],
	configuration?: Configuration,
) => {
	if (configuration && configuration.accessToken) {
		const localVarAccessTokenValue =
			typeof configuration.accessToken === 'function'
				? await configuration.accessToken(name, scopes)
				: await configuration.accessToken;
		object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;
	}
};

/**
 *
 * @export
 */
export const setSearchParams = (url: URL, ...objects: any[]) => {
	const searchParams = new URLSearchParams(url.search);
	for (const object of objects) {
		for (const key in object) {
			if (Array.isArray(object[key])) {
				searchParams.delete(key);
				for (const item of object[key]) {
					searchParams.append(key, item);
				}
			} else {
				searchParams.set(key, object[key]);
			}
		}
	}
	url.search = searchParams.toString();
};

/**
 *
 * @export
 */
export const serializeDataIfNeeded = (
	value: any,
	requestOptions: any,
	configuration?: Configuration,
) => {
	const nonString = typeof value !== 'string';
	const needsSerialization =
		nonString && configuration && configuration.isJsonMime
			? configuration.isJsonMime(requestOptions.headers['Content-Type'])
			: nonString;
	return needsSerialization
		? JSON.stringify(value !== undefined ? value : {})
		: value || '';
};

/**
 *
 * @export
 */
export const toPathString = (url: URL) => url.pathname + url.search + url.hash;

/**
 *
 * @export
 */
export const createRequestFunction =
	(
		axiosArgs: RequestArgs,
		globalAxios: AxiosInstance,
		BASE_PATH: string,
		configuration?: Configuration,
	) =>
	<T = unknown, R = AxiosResponse<T>>(
		axios: AxiosInstance = globalAxios,
		basePath: string = BASE_PATH,
	) => {
		const axiosRequestArgs = {
			...axiosArgs.options,
			url: (configuration?.basePath || basePath) + axiosArgs.url,
		};
		return axios.request<T, R>(axiosRequestArgs);
	};
