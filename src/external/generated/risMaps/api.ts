/* tslint:disable */
/* eslint-disable */
/**
 * RIS::Maps
 * ## Info  * powered by [DB Reisendeninformation](https://db-planet.deutschebahn.com/pages/reisendeninformation/apps/content/willkommen) * member of the [RIS-API](https://db.de/ris-api) family, the building kit for traveller informations * for details check out [RIS::Maps](https://api-portal.hub.db.de/db/apis/product/ris-maps) in the DB API Portal  ## Railways  * information and geometries on all railway sections [Streckenabschnitte] and operating-units [Betriebsstellen] of DB Netz and much more information like speeds, regions, districts etc. * railway-links [Verbindungen auf dem Streckennetz] between geo-coordinates * batch queries can be used with `lastChanged` attribute, enables consumer to cache layouts forever and refresh them when data actually changes  ## Vehicle Layouts  * fully digitalized vehicle layouts (e.g. seats, floors, entrances, levels, interioirs etc.) * information for travellers and for staff (Mitarbeiter) * perfect base for graphical seat displays (GDS), for instance * useable with with vehicle-id (UIC number) or concrete layout / design information * can be used with `lastChanged` attribute, enables consumer to cache layouts forever and refresh them when data actually changes  ## Getting Started  * visit our [documentation](https://ris.gitpages.tech.rz.db.de/risapi/documentation/), learn how to [get started with openapi](https://developer-docs.deutschebahn.com/doku/apis/openapi.html) or how to [get started with asyncapi](https://developer-docs.deutschebahn.com/doku/apis/asyncapi.html) and check out our [coding-examples](https://developer-docs.deutschebahn.com/doku/apis) * bounty hunter, bug finder or just idea creator, we are thirsty to hear from you - get in touch with us by using [DB AnwenderEcho](https://anwenderecho.extranet.deutschebahn.com/ris-api/) or write an [email](mailto:rimaps@deutschebahn.com) 
 *
 * The version of the OpenAPI document: 2.1.4
 * Contact: rimaps@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Area within a vehicle [Fahrzeug] as geojson feature according to RFC7946.
 * @export
 * @interface AreaFeature
 */
export interface AreaFeature {
    /**
     * Bounding box of feature according to RFC7946.
     * @type {Array<number>}
     * @memberof AreaFeature
     */
    'bbox': Array<number>;
    /**
     * 
     * @type {Geometry}
     * @memberof AreaFeature
     */
    'geometry': Geometry;
    /**
     * ID of feature according to RFC7946.
     * @type {string}
     * @memberof AreaFeature
     */
    'id': string;
    /**
     * 
     * @type {AreaProperties}
     * @memberof AreaFeature
     */
    'properties': AreaProperties;
    /**
     * Type of feature according to RFC7946, defaults to \'Feature\'.
     * @type {string}
     * @memberof AreaFeature
     */
    'type': string;
}
/**
 * Properties according to RFC7946.
 * @export
 * @interface AreaProperties
 */
export interface AreaProperties {
    /**
     * First or economy class, may be empty in case of staff seats. - FIRST - ECONOMY
     * @type {string}
     * @memberof AreaProperties
     */
    'areaClass'?: string;
    /**
     * ID of area.
     * @type {string}
     * @memberof AreaProperties
     */
    'areaID': string;
    /**
     * Level within vehicle [Fahrzeug]. - UPPER_DECK (upper deck) - DEFAULT_DECK  (default deck ie entrance zone [Zwischendeck] for multi level vehicles) - LOWER_DECK (lower deck)
     * @type {string}
     * @memberof AreaProperties
     */
    'level': string;
    /**
     * Space type for areas and zones.Space type for areas and zones. - SALOON (saloon space [Großraum] - COMPARTMENT (compartment space [Abteil] - ENTRANCE_AREA (space for entering / leaving the vehicle) - BISTRO (space where the bistro is located in) - KITCHEN (space for kitchen) - OFFICE (space for staff / office) - RESTAURANT (board restaurant) - STORAGE (storage and baggage zone) - TOILET (toilet zone) - UNDEFINED (undefined zone)
     * @type {string}
     * @memberof AreaProperties
     */
    'space': string;
    /**
     * Indicates whether opening is not accessible for travellers (only for staff).
     * @type {boolean}
     * @memberof AreaProperties
     */
    'staffOnly': boolean;
    /**
     * Type of interior area. - BIKE (area for bikes withe bike mounts etc.) - WHEELCHAIR (area that is accessible with wheelchairs) - STANCE (area for stances [Stehplaetze]) - SEAT (are for seats) - FOLDING_SEAT (area for folding seats [Klappsitze]) - STAIRS (area for stairs) - FLOOR (floor area) - BAGGAGE (area to store baggage) - RAMP (area for ramps) - TECHNICS (technical area, generally only available for staff) - TRANSIT (transit area [Gang]) - WINDOW (window area) - WALL (wall area) - STRUCTURE (structure area [Bauliche Struktur], generally not available for staff or customers - EXIT_DOOR (area for exit doors) - EXIT_STAIRS (area for exit stairs)
     * @type {string}
     * @memberof AreaProperties
     */
    'type': string;
    /**
     * Indicates whether area is surrounded by a wall.
     * @type {boolean}
     * @memberof AreaProperties
     */
    'walled'?: boolean;
    /**
     * ID of zone the area belongs to.
     * @type {string}
     * @memberof AreaProperties
     */
    'zoneID'?: string;
}
/**
 * List of available designs for all digitalized vehicle-layouts.
 * @export
 * @interface AvailableDesignsResponse
 */
export interface AvailableDesignsResponse {
    /**
     * List of available designs.
     * @type {Array<AvailableVehicleDesign>}
     * @memberof AvailableDesignsResponse
     */
    'designs': Array<AvailableVehicleDesign>;
}
/**
 * Information on an available vehicle-designs.
 * @export
 * @interface AvailableVehicleDesign
 */
export interface AvailableVehicleDesign {
    /**
     * Internal design-id representing one design that may be mapped to more than one combination of \'constructionType\' and \'layoutID\' (meaning one design my be referenced by multiple construction-types of a particular train).
     * @type {string}
     * @memberof AvailableVehicleDesign
     */
    'internalDesignID': string;
    /**
     * Timestamp this design has been changed the last time as fully-qualified-date (ISO-8601 with time-zone or offset).
     * @type {string}
     * @memberof AvailableVehicleDesign
     */
    'lastChanged': string;
    /**
     * Available vehicle-layouts for this particular design.
     * @type {Array<AvailableVehicleLayout>}
     * @memberof AvailableVehicleDesign
     */
    'layouts': Array<AvailableVehicleLayout>;
}
/**
 * Information on an available vehicle-layout.
 * @export
 * @interface AvailableVehicleLayout
 */
export interface AvailableVehicleLayout {
    /**
     * Construction type of the vehicle [Bauart bzw. Baureihe], for instance \'I4030\' or \'If03F \'.
     * @type {string}
     * @memberof AvailableVehicleLayout
     */
    'constructionType': string;
    /**
     * ID of the layout [Redesign, mit grünem Streifem etc.] of the vehicle type, for instance \'403.1.BS\' or \'403.2.BS\'.
     * @type {string}
     * @memberof AvailableVehicleLayout
     */
    'layoutID'?: string;
}
/**
 * 2D coordinate within geo reference system.
 * @export
 * @interface Coordinate2D
 */
export interface Coordinate2D {
    /**
     * Latitude position in reference system.
     * @type {number}
     * @memberof Coordinate2D
     */
    'latitude': number;
    /**
     * Longitude position in reference system.
     * @type {number}
     * @memberof Coordinate2D
     */
    'longitude': number;
}
/**
 * Detailed error information on field level.
 * @export
 * @interface ErrorDetail
 */
export interface ErrorDetail {
    /**
     * Detailed information for error.
     * @type {string}
     * @memberof ErrorDetail
     */
    'detail': string;
    /**
     * Unique code that identifies error.
     * @type {string}
     * @memberof ErrorDetail
     */
    'errorCode'?: string;
    /**
     * Name of field / element that raised the error.
     * @type {string}
     * @memberof ErrorDetail
     */
    'field': string;
    /**
     * Common description of error.
     * @type {string}
     * @memberof ErrorDetail
     */
    'title': string;
}
/**
 * API error object according to RFC7807.
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Detailed information for error.
     * @type {string}
     * @memberof ErrorResponse
     */
    'detail': string;
    /**
     * Unique code that identifies error.
     * @type {string}
     * @memberof ErrorResponse
     */
    'errorCode'?: string;
    /**
     * List of detailed errors in case multiple errors have lead to the surrounding error.
     * @type {Array<ErrorDetail>}
     * @memberof ErrorResponse
     */
    'errors'?: Array<ErrorDetail>;
    /**
     * Unique identifier for instance that raised the error.
     * @type {string}
     * @memberof ErrorResponse
     */
    'instanceId'?: string;
    /**
     * Http status for error origin.
     * @type {string}
     * @memberof ErrorResponse
     */
    'status'?: string;
    /**
     * Common description of error.
     * @type {string}
     * @memberof ErrorResponse
     */
    'title': string;
}
/**
 * Geojson geometry object according to RFC7946.
 * @export
 * @interface Geometry
 */
export interface Geometry {
    /**
     * Coordinates according to RFC7946.
     * @type {string}
     * @memberof Geometry
     */
    'coordinates': string;
    /**
     * Type of geometry according to RFC7946.
     * @type {string}
     * @memberof Geometry
     */
    'type': string;
}
/**
 * Vehicle [Fahrzeug] interior without seats as geojson feature according to RFC7946.
 * @export
 * @interface InteriorFeature
 */
export interface InteriorFeature {
    /**
     * Bounding box of feature according to RFC7946.
     * @type {Array<number>}
     * @memberof InteriorFeature
     */
    'bbox': Array<number>;
    /**
     * 
     * @type {Geometry}
     * @memberof InteriorFeature
     */
    'geometry': Geometry;
    /**
     * ID of feature according to RFC7946.
     * @type {string}
     * @memberof InteriorFeature
     */
    'id': string;
    /**
     * 
     * @type {InteriorProperties}
     * @memberof InteriorFeature
     */
    'properties': InteriorProperties;
    /**
     * Type of feature according to RFC7946, defaults to \'Feature\'.
     * @type {string}
     * @memberof InteriorFeature
     */
    'type': string;
}
/**
 * Properties according to RFC7946.
 * @export
 * @interface InteriorProperties
 */
export interface InteriorProperties {
    /**
     * ID of area the interior is located in.
     * @type {string}
     * @memberof InteriorProperties
     */
    'areaID': string;
    /**
     * Type of interior area. - BIKE (area for bikes withe bike mounts etc.) - WHEELCHAIR (area that is accessible with wheelchairs) - STANCE (area for stances [Stehplaetze]) - SEAT (are for seats) - FOLDING_SEAT (area for folding seats [Klappsitze]) - STAIRS (area for stairs) - FLOOR (floor area) - BAGGAGE (area to store baggage) - RAMP (area for ramps) - TECHNICS (technical area, generally only available for staff) - TRANSIT (transit area [Gang]) - WINDOW (window area) - WALL (wall area) - STRUCTURE (structure area [Bauliche Struktur], generally not available for staff or customers - EXIT_DOOR (area for exit doors) - EXIT_STAIRS (area for exit stairs)
     * @type {string}
     * @memberof InteriorProperties
     */
    'areaType': string;
    /**
     * ID of equipment, if interior has an equipment id.
     * @type {string}
     * @memberof InteriorProperties
     */
    'equipmentID'?: string;
    /**
     * ID of interior.
     * @type {string}
     * @memberof InteriorProperties
     */
    'interiorID': string;
    /**
     * Type of interior without seats. - WHEELCHAIR (interior dedicated so severely disabled people that need a wheelchair) - STANCE (stance [Stehplatz]) - FOLDING_SEAT (folding seat [Klappsitz]) - CORNER_SEAT (corner seat [Ecksitz]) - STAIRS (stairs) - FLOOR (floor) - RACK (rack [Regal]) - SHELF (shelf [Regalbrett / Ablage]) - BAGGAGE_RACK (baggage rack [Gepäckgestell]) - TABLE_SHORT (short table) - TABLE_LONG (long table) - TABLE_WHEELCHAIR (special table for wheelchair usage) - TABLE_HALF (wall mounted folding table) - TABLE_CHANGE (diaper changing table [Wickeltisch]) - TABLE_DINING_SHORT (short dining table) - TABLE_DINING_LONG (long dining table) - BARTABLE_BISTRO (bartable [Stehtisch] within bistro) - STORAGE (storage for staff only) - WORKSPACE (working space within staff only area) - COUNTER (counter within restaurant / bistro) - WASH_BASIN (wash basin [Waschtisch]) - WC (toilet) - BIKE_MOUNT (bike mount / place to put a single bike in)
     * @type {string}
     * @memberof InteriorProperties
     */
    'interiorType': string;
    /**
     * Level within vehicle [Fahrzeug]. - UPPER_DECK (upper deck) - DEFAULT_DECK  (default deck ie entrance zone [Zwischendeck] for multi level vehicles) - LOWER_DECK (lower deck)
     * @type {string}
     * @memberof InteriorProperties
     */
    'level': string;
    /**
     * Orientation within reference system in degrees clockwise (0 = North, 90 = West, 180 = South, 270 = East etc.)
     * @type {number}
     * @memberof InteriorProperties
     */
    'orientation': number;
    /**
     * POI which defines the center position of interior.
     * @type {string}
     * @memberof InteriorProperties
     */
    'poiID': string;
    /**
     * Type of space the seat is located in. - SALOON (saloon space [Großraum] - COMPARTMENT (compartment space [Abteil] - BISTRO (space where the bistro is located in) - KITCHEN (space where the kitchen is located in) - OFFICE (space for staff / office) - TOILET (toilet space) - RESTAURANT (board restaurant space)
     * @type {string}
     * @memberof InteriorProperties
     */
    'spaceType': string;
    /**
     * Indicates whether opening is not accessible for travellers (only for staff).
     * @type {boolean}
     * @memberof InteriorProperties
     */
    'staffOnly'?: boolean;
    /**
     * ID of zone the interior is located in.
     * @type {string}
     * @memberof InteriorProperties
     */
    'zoneID': string;
    /**
     * Type of zone within vehicle [Fahrzeug].Type of zone within vehicle [Fahrzeug]. - FAMILY (family zone for families with kids etc.) - INFANT (zone supposed to infants / family [Kleinkinderbereich]) - SILENCE (silence zone, no work and playing here) - MOBILE (mobile zone where phone calls / working is possible) - WHEELCHAIR_ACCESSIBLE (zone that is accessible for wheelchairs) - STAFF (zone is only accessible for staff) - SPECIAL_USAGE (special usage zone) - INAPPLICABLE (zone without usage)
     * @type {string}
     * @memberof InteriorProperties
     */
    'zoneType': string;
}
/**
 * Opening within vehicle [Fahrzeug] as geojson feature according to RFC7946.
 * @export
 * @interface OpeningFeature
 */
export interface OpeningFeature {
    /**
     * Bounding box of feature according to RFC7946.
     * @type {Array<number>}
     * @memberof OpeningFeature
     */
    'bbox': Array<number>;
    /**
     * 
     * @type {Geometry}
     * @memberof OpeningFeature
     */
    'geometry': Geometry;
    /**
     * ID of feature according to RFC7946.
     * @type {string}
     * @memberof OpeningFeature
     */
    'id': string;
    /**
     * 
     * @type {OpeningProperties}
     * @memberof OpeningFeature
     */
    'properties': OpeningProperties;
    /**
     * Type of feature according to RFC7946, defaults to \'Feature\'.
     * @type {string}
     * @memberof OpeningFeature
     */
    'type': string;
}
/**
 * Properties according to RFC7946.
 * @export
 * @interface OpeningProperties
 */
export interface OpeningProperties {
    /**
     * Level within vehicle [Fahrzeug]. - UPPER_DECK (upper deck) - DEFAULT_DECK  (default deck ie entrance zone [Zwischendeck] for multi level vehicles) - LOWER_DECK (lower deck)
     * @type {string}
     * @memberof OpeningProperties
     */
    'level': string;
    /**
     * ID of opening.
     * @type {string}
     * @memberof OpeningProperties
     */
    'openingID': string;
    /**
     * POI which defines the center position of opening.
     * @type {string}
     * @memberof OpeningProperties
     */
    'poiID'?: string;
    /**
     * Indicates whether opening is not accessible for travellers (only for staff).
     * @type {boolean}
     * @memberof OpeningProperties
     */
    'staffOnly'?: boolean;
    /**
     * Type of opening. - OPEN (opening within structure [Durchgang]) - DOOR (door opening) - EXIT_DOOR (door opening to exit / enter the vehicle)
     * @type {string}
     * @memberof OpeningProperties
     */
    'type': string;
    /**
     * Width of opening in meter.
     * @type {number}
     * @memberof OpeningProperties
     */
    'width': number;
}
/**
 * Operating-unit [Betriebsstelle] for DB Netz infrastructure.
 * @export
 * @interface OperatingUnit
 */
export interface OperatingUnit {
    /**
     * District [Netzbereich] the operating-unit belongs to.
     * @type {string}
     * @memberof OperatingUnit
     */
    'district'?: string;
    /**
     * Name [Langname] of operating-unit.
     * @type {string}
     * @memberof OperatingUnit
     */
    'name': string;
    /**
     * Operating-unit [Betriebsstelle], identified by the DB Netz RL100 code.
     * @type {string}
     * @memberof OperatingUnit
     */
    'operatingUnit': string;
    /**
     * 
     * @type {Coordinate2D}
     * @memberof OperatingUnit
     */
    'position'?: Coordinate2D;
    /**
     * Region the operating-unit belongs to.
     * @type {string}
     * @memberof OperatingUnit
     */
    'region'?: string;
    /**
     * Railway-routes [DB Netz Strecken] that pass this particular operating-unit.
     * @type {Array<OperatingUnitOnRoute>}
     * @memberof OperatingUnit
     */
    'routes': Array<OperatingUnitOnRoute>;
    /**
     * Type [Betriebsstellen-Art] of operating unit [Betriebsstelle] according to RIL 402.0411A03 DB Netz. - Abzw (Abzweigstelle) - Abzw a.B. (Abzweigstelle, außer Betrieb) - Abzw Anst a.B. (Abzweig- und Anschlussstelle, außer Betrieb) - Anst (Anschlussstelle) - Anst a.B. (Anschlussstelle, außer Betrieb) - Anst Bk (Anschluss- und Blockstelle) - Awanst (Ausweichanschlussstelle) - Awanst a.B. (Ausweichanschlussstelle, außer Betrieb) - Awanst Bk (Ausweichanschluss- und Blockstelle) - Bf (Bahnhof) - Bf a.B. (Bahnhof, außer Betrieb) - Bf Abzw (streckenabhängiger Bahnhof oder Abzweigstelle) - Bft (Bahnhofsteil) - Bft a.B. (Bahnhofsteil, außer Betrieb) - Bft Abzw (Bahnhofsteil und Abzweigstelle) - GEGr (Geschäftseinheitsgrenze) - Gp (Grenzpunkt zu anderen Bahnen) - Gp a.B. (Grenzpunkt zu anderen Bahnen, außer Betrieb) - Hp (Haltepunkt) - Hp a.B. (Haltepunkt, außer Betrieb) - Hp Abzw (Haltestelle (Abzweigstelle)) - Hp Anst (Haltestelle (Anschlussstelle)) - Hp Anst a.B. (Haltestelle (Anschlussstelle), außer Betrieb) - Hp Anst Bk (Haltestelle (Anschluss- und Blockstelle)) - Hp Awanst (Haltestelle (Ausweichanschlussstelle)) - Hp Awanst a.B. (Haltestelle (Ausweichanschlussstelle), außer Betrieb) - Hp Awanst Bk (Haltestelle (Ausweichanschluss- und Blockstelle)) - Hp Bk (Haltepunkt und Blockstelle) - Hp Bk a.B. (Haltepunkt und Blockstelle, außer Betrieb) - Hp Dkst (Haltepunkt und Deckungsstelle) - Hp Dkst a.B. (Haltepunkt und Deckungsstelle, außer Betrieb) - Hp Üst (Haltestelle (Überleitstelle)) - LGr (Landesgrenze) - Museum (Historische Bahn/Bahnbetrieb, Museumseisenbahn (extern)) - PDGr (Produktionsdurchführungsgrenze) - RBGr (Regionalbereichsgrenze) - RBGr a.B. (Regionalbereichsgrenze, außer Betrieb) - Strw (Streckenwechsel/Streckenabschnittsgrenze) - Üst (Überleitstelle) - Üst a.B. (Überleitstelle, außer Betrieb) - Üst Awanst (Überleit- und Ausweichanschlussstelle)
     * @type {string}
     * @memberof OperatingUnit
     */
    'type': string;
}
/**
 * Operating-unit [Betriebsstelle] on a particular railway-route [DB Netz Strecke] information.
 * @export
 * @interface OperatingUnitOnRoute
 */
export interface OperatingUnitOnRoute {
    /**
     * Kilometre marking [Kilometrierung] of operating-unit on route, meaning the position of the operating-unit in kilometers on this particular route.
     * @type {number}
     * @memberof OperatingUnitOnRoute
     */
    'kilometreMarking'?: number;
    /**
     * 
     * @type {Coordinate2D}
     * @memberof OperatingUnitOnRoute
     */
    'position': Coordinate2D;
    /**
     * Identification of route [DB Netz Streckennummer].
     * @type {string}
     * @memberof OperatingUnitOnRoute
     */
    'route': string;
}
/**
 * Operating-unit [Betriebsstelle] for the DB Netz railway-sections within the context of a particular route [Strecke] as geojson feature according to RFC7946.
 * @export
 * @interface OperatingUnitOnRouteFeature
 */
export interface OperatingUnitOnRouteFeature {
    /**
     * Bounding box of feature according to RFC7946.
     * @type {Array<number>}
     * @memberof OperatingUnitOnRouteFeature
     */
    'bbox': Array<number>;
    /**
     * 
     * @type {Geometry}
     * @memberof OperatingUnitOnRouteFeature
     */
    'geometry': Geometry;
    /**
     * ID of feature according to RFC7946.
     * @type {string}
     * @memberof OperatingUnitOnRouteFeature
     */
    'id': string;
    /**
     * 
     * @type {OperatingUnitOnRouteProperties}
     * @memberof OperatingUnitOnRouteFeature
     */
    'properties': OperatingUnitOnRouteProperties;
    /**
     * Type of feature according to RFC7946, defaults to \'Feature\'.
     * @type {string}
     * @memberof OperatingUnitOnRouteFeature
     */
    'type': string;
}
/**
 * Operating-unit [Betriebsstelle] for the DB Netz railway-sections within the context of a particular route [Strecke].
 * @export
 * @interface OperatingUnitOnRouteProperties
 */
export interface OperatingUnitOnRouteProperties {
    /**
     * District [Netzbereich] the operating-unit belongs to.
     * @type {string}
     * @memberof OperatingUnitOnRouteProperties
     */
    'district': string;
    /**
     * Name [Langname] of operating-unit.
     * @type {string}
     * @memberof OperatingUnitOnRouteProperties
     */
    'name': string;
    /**
     * Operating-unit [Betriebsstelle], identified by the DB Netz RL100 code.
     * @type {string}
     * @memberof OperatingUnitOnRouteProperties
     */
    'operatingUnit': string;
    /**
     * Region the operating-unit belongs to.
     * @type {string}
     * @memberof OperatingUnitOnRouteProperties
     */
    'region': string;
    /**
     * Unique request id in order to find the request for this particular response within a batched request.
     * @type {string}
     * @memberof OperatingUnitOnRouteProperties
     */
    'requestID'?: string;
    /**
     * Type [Betriebsstellen-Art] of operating unit [Betriebsstelle] according to RIL 402.0411A03 DB Netz. - Abzw (Abzweigstelle) - Abzw a.B. (Abzweigstelle, außer Betrieb) - Abzw Anst a.B. (Abzweig- und Anschlussstelle, außer Betrieb) - Anst (Anschlussstelle) - Anst a.B. (Anschlussstelle, außer Betrieb) - Anst Bk (Anschluss- und Blockstelle) - Awanst (Ausweichanschlussstelle) - Awanst a.B. (Ausweichanschlussstelle, außer Betrieb) - Awanst Bk (Ausweichanschluss- und Blockstelle) - Bf (Bahnhof) - Bf a.B. (Bahnhof, außer Betrieb) - Bf Abzw (streckenabhängiger Bahnhof oder Abzweigstelle) - Bft (Bahnhofsteil) - Bft a.B. (Bahnhofsteil, außer Betrieb) - Bft Abzw (Bahnhofsteil und Abzweigstelle) - GEGr (Geschäftseinheitsgrenze) - Gp (Grenzpunkt zu anderen Bahnen) - Gp a.B. (Grenzpunkt zu anderen Bahnen, außer Betrieb) - Hp (Haltepunkt) - Hp a.B. (Haltepunkt, außer Betrieb) - Hp Abzw (Haltestelle (Abzweigstelle)) - Hp Anst (Haltestelle (Anschlussstelle)) - Hp Anst a.B. (Haltestelle (Anschlussstelle), außer Betrieb) - Hp Anst Bk (Haltestelle (Anschluss- und Blockstelle)) - Hp Awanst (Haltestelle (Ausweichanschlussstelle)) - Hp Awanst a.B. (Haltestelle (Ausweichanschlussstelle), außer Betrieb) - Hp Awanst Bk (Haltestelle (Ausweichanschluss- und Blockstelle)) - Hp Bk (Haltepunkt und Blockstelle) - Hp Bk a.B. (Haltepunkt und Blockstelle, außer Betrieb) - Hp Dkst (Haltepunkt und Deckungsstelle) - Hp Dkst a.B. (Haltepunkt und Deckungsstelle, außer Betrieb) - Hp Üst (Haltestelle (Überleitstelle)) - LGr (Landesgrenze) - Museum (Historische Bahn/Bahnbetrieb, Museumseisenbahn (extern)) - PDGr (Produktionsdurchführungsgrenze) - RBGr (Regionalbereichsgrenze) - RBGr a.B. (Regionalbereichsgrenze, außer Betrieb) - Strw (Streckenwechsel/Streckenabschnittsgrenze) - Üst (Überleitstelle) - Üst a.B. (Überleitstelle, außer Betrieb) - Üst Awanst (Überleit- und Ausweichanschlussstelle)
     * @type {string}
     * @memberof OperatingUnitOnRouteProperties
     */
    'type': string;
}
/**
 * Railway-links [Verbindungen auf dem Schienennetz] between geo-coordinates request.
 * @export
 * @interface RailwayLinksBetweenCoordinatesRequest
 */
export interface RailwayLinksBetweenCoordinatesRequest {
    /**
     * Coordinate reference system, defaults to EPSG:4236 - EPSG:3857 - EPSG:4326
     * @type {string}
     * @memberof RailwayLinksBetweenCoordinatesRequest
     */
    'crs'?: string;
    /**
     * Optional filter to limit returned railway-sections [DB Netz Streckenabschnitte] to specific electrifications [Elektrifizierungen], possible values are: - OVERHEAD_POWER_LINE (Oberleitung) - CONDUCTOR_RAIL (Stromschiene) - NO_ELECTRIFICATION (keine Elektrifizierung)
     * @type {Array<string>}
     * @memberof RailwayLinksBetweenCoordinatesRequest
     */
    'electrification'?: Array<string>;
    /**
     * 
     * @type {Coordinate2D}
     * @memberof RailwayLinksBetweenCoordinatesRequest
     */
    'end': Coordinate2D;
    /**
     * Optional filter to limit returned railway-sections [DB Netz Streckenabschnitte] to specific railway-usages [Bahnnutzungen], possible values are: - PASSENGER_TRANSPORT (Personenverkehr) - FREIGHT_TRANSPORT (Güterverkehr) - PASSENGER_AND_FREIGHT_TRANSPORT (Personenverkehr & Güterverkehr) - CITY_TRAIN (S-Bahnen) - PRIVATE_SIDING (Gleisanschluss)
     * @type {Array<string>}
     * @memberof RailwayLinksBetweenCoordinatesRequest
     */
    'railwayUsage'?: Array<string>;
    /**
     * 
     * @type {Coordinate2D}
     * @memberof RailwayLinksBetweenCoordinatesRequest
     */
    'start': Coordinate2D;
    /**
     * Optional list of via geo-coordinates the railway-links musst pass, may be empty.
     * @type {Array<Coordinate2D>}
     * @memberof RailwayLinksBetweenCoordinatesRequest
     */
    'via'?: Array<Coordinate2D>;
}
/**
 * Railway-links [Verbindungen auf dem Schienennetz] between operating-units [Betriebsstellen] request.
 * @export
 * @interface RailwayLinksBetweenOperatingUnitsRequest
 */
export interface RailwayLinksBetweenOperatingUnitsRequest {
    /**
     * Coordinate reference system, defaults to EPSG:4236 - EPSG:3857 - EPSG:4326
     * @type {string}
     * @memberof RailwayLinksBetweenOperatingUnitsRequest
     */
    'crs'?: string;
    /**
     * Optional filter to limit returned railway-sections [DB Netz Streckenabschnitte] to specific electrifications [Elektrifizierungen], possible values are: - OVERHEAD_POWER_LINE (Oberleitung) - CONDUCTOR_RAIL (Stromschiene) - NO_ELECTRIFICATION (keine Elektrifizierung)
     * @type {Array<string>}
     * @memberof RailwayLinksBetweenOperatingUnitsRequest
     */
    'electrification'?: Array<string>;
    /**
     * End operating-unit [Betriebsstelle], identified by the DB Netz RL100 code, the railway-links must end at.
     * @type {string}
     * @memberof RailwayLinksBetweenOperatingUnitsRequest
     */
    'end': string;
    /**
     * Optional filter to limit returned railway-sections [DB Netz Streckenabschnitte] to specific railway-usages [Bahnnutzungen], possible values are: - PASSENGER_TRANSPORT (Personenverkehr) - FREIGHT_TRANSPORT (Güterverkehr) - PASSENGER_AND_FREIGHT_TRANSPORT (Personenverkehr & Güterverkehr) - CITY_TRAIN (S-Bahnen) - PRIVATE_SIDING (Gleisanschluss)
     * @type {Array<string>}
     * @memberof RailwayLinksBetweenOperatingUnitsRequest
     */
    'railwayUsage'?: Array<string>;
    /**
     * Start operating-unit [Betriebsstelle], identified by the DB Netz RL100 code, the railway-links must start at.
     * @type {string}
     * @memberof RailwayLinksBetweenOperatingUnitsRequest
     */
    'start': string;
    /**
     * Optional list of via operating-units [Betriebsstellen], identified by the DB Netz RL100 code, the railway-links musst pass, may be empty.
     * @type {Array<string>}
     * @memberof RailwayLinksBetweenOperatingUnitsRequest
     */
    'via'?: Array<string>;
}
/**
 * Railway-links [Verbindungen auf dem Schienennetz] between operating-units [Betriebsstellen] / geo-coordinates as geojson feature collection according to RFC7946.
 * @export
 * @interface RailwayLinksFeatureCollection
 */
export interface RailwayLinksFeatureCollection {
    /**
     * Bounding box of features within feature collection according to RFC7946.
     * @type {Array<number>}
     * @memberof RailwayLinksFeatureCollection
     */
    'bbox': Array<number>;
    /**
     * Coordinate reference system (CRS) also known as spatial reference system (SRS). - EPSG:3857 - EPSG:4326
     * @type {string}
     * @memberof RailwayLinksFeatureCollection
     */
    'crs'?: string;
    /**
     * List of features.
     * @type {Array<RailwayLinksFeatureCollectionFeaturesInner>}
     * @memberof RailwayLinksFeatureCollection
     */
    'features': Array<RailwayLinksFeatureCollectionFeaturesInner>;
    /**
     * Total features that matched provided filter criterias according to RFC7946.
     * @type {number}
     * @memberof RailwayLinksFeatureCollection
     */
    'numberMatched'?: number;
    /**
     * Total features that are returned according to RFC7946.
     * @type {number}
     * @memberof RailwayLinksFeatureCollection
     */
    'numberReturned'?: number;
    /**
     * Total features according to RFC7946.
     * @type {number}
     * @memberof RailwayLinksFeatureCollection
     */
    'totalFeatures'?: number;
    /**
     * Type of feature collection according to RFC7946, defaults to \'FeatureCollection\'.
     * @type {string}
     * @memberof RailwayLinksFeatureCollection
     */
    'type': string;
}
/**
 * @type RailwayLinksFeatureCollectionFeaturesInner
 * List of features.
 * @export
 */
export type RailwayLinksFeatureCollectionFeaturesInner = OperatingUnitOnRouteFeature | RailwaySectionFeature;

/**
 * Railway operating-units [Betriebsstellen] batch request.
 * @export
 * @interface RailwayOperatingUnitsBatchRequest
 */
export interface RailwayOperatingUnitsBatchRequest {
    /**
     * Pagination limit parameter in order to limit total amount of results, defaults to 100.
     * @type {number}
     * @memberof RailwayOperatingUnitsBatchRequest
     */
    'limit'?: number;
    /**
     * Pagination offset parameter in order to navigate through result list, defaults to 0.
     * @type {number}
     * @memberof RailwayOperatingUnitsBatchRequest
     */
    'offset'?: number;
    /**
     * List of operating-units [Betriebsstellen], identified by the DB Netz RL100 code, to limit result for.
     * @type {Array<string>}
     * @memberof RailwayOperatingUnitsBatchRequest
     */
    'operatingUnits'?: Array<string>;
}
/**
 * Railway operating-units [Betriebsstellen] batch response.
 * @export
 * @interface RailwayOperatingUnitsResponse
 */
export interface RailwayOperatingUnitsResponse {
    /**
     * Maximum number of results the caller has requested to return from provided offset.
     * @type {number}
     * @memberof RailwayOperatingUnitsResponse
     */
    'limit': number;
    /**
     * Pagination offsett the caller has requested in order to navigate through results.
     * @type {number}
     * @memberof RailwayOperatingUnitsResponse
     */
    'offset': number;
    /**
     * List of operating-units [Betriebsstellen] that match provided criteria.
     * @type {Array<OperatingUnit>}
     * @memberof RailwayOperatingUnitsResponse
     */
    'operatingUnits': Array<OperatingUnit>;
    /**
     * Total number of available results.
     * @type {number}
     * @memberof RailwayOperatingUnitsResponse
     */
    'total': number;
}
/**
 * Requested railway sections [DB Netz Streckenabschnitte] between operating-units [Betriebsstellen].
 * @export
 * @interface RailwaySectionBetweenOperatingUnitsRequest
 */
export interface RailwaySectionBetweenOperatingUnitsRequest {
    /**
     * Operating unit [Betriebsstelle], identified by DB Netz RL100 code, at the end of the section..
     * @type {string}
     * @memberof RailwaySectionBetweenOperatingUnitsRequest
     */
    'operatingUnitEnd': string;
    /**
     * Operating unit [Betriebsstelle], identified by DB Netz RL100 code, at the start of the section.
     * @type {string}
     * @memberof RailwaySectionBetweenOperatingUnitsRequest
     */
    'operatingUnitStart': string;
    /**
     * Unique request id in order to find the response for this particular request within a batched result-set.
     * @type {string}
     * @memberof RailwaySectionBetweenOperatingUnitsRequest
     */
    'requestID'?: string;
    /**
     * Route [Strecke] given by its four digit number [Streckennummer].
     * @type {string}
     * @memberof RailwaySectionBetweenOperatingUnitsRequest
     */
    'route': string;
}
/**
 * Railway-section [DB Netz Streckenabschnitt] information as geojson feature according to RFC7946.
 * @export
 * @interface RailwaySectionFeature
 */
export interface RailwaySectionFeature {
    /**
     * Bounding box of feature according to RFC7946.
     * @type {Array<number>}
     * @memberof RailwaySectionFeature
     */
    'bbox': Array<number>;
    /**
     * 
     * @type {Geometry}
     * @memberof RailwaySectionFeature
     */
    'geometry': Geometry;
    /**
     * ID of feature according to RFC7946.
     * @type {string}
     * @memberof RailwaySectionFeature
     */
    'id': string;
    /**
     * 
     * @type {RailwaySectionProperties}
     * @memberof RailwaySectionFeature
     */
    'properties': RailwaySectionProperties;
    /**
     * Type of feature according to RFC7946, defaults to \'Feature\'.
     * @type {string}
     * @memberof RailwaySectionFeature
     */
    'type': string;
}
/**
 * Properties according to RFC7946.
 * @export
 * @interface RailwaySectionProperties
 */
export interface RailwaySectionProperties {
    /**
     * Information in which directions a section [DB Netz Streckenabschnitt] can be used due to available signage [Signaltechnik]. - KILOMETRE_MARKING_ASCENDING (usage only possible in direction of ascending kilometre marking [Kilometrierung]) - KILOMETRE_MARKING_DESCENDING (usage only possible in direction of descending kilometre marking [Kilometrierung]) - KILOMETRE_MARKING_ASCENDING_DESCENDING (usage possible in ascending and descending kilometre marking [Kilometrierung])
     * @type {string}
     * @memberof RailwaySectionProperties
     */
    'direction': string;
    /**
     * Information on electrification [Elektrifizierung] of a particular railway-section [DB Netz Streckenabschnitt]. - OVERHEAD_POWER_LINE (Oberleitung) - CONDUCTOR_RAIL (Stromschiene) - NO_ELECTRIFICATION (keine Elektrifizierung)
     * @type {string}
     * @memberof RailwaySectionProperties
     */
    'electrification': string;
    /**
     * Length of section between operating-units in kilometer.
     * @type {number}
     * @memberof RailwaySectionProperties
     */
    'length': number;
    /**
     * Enclosing end operating-unit [Betriebsstelle], identified by the DB Netz RL100 code.
     * @type {string}
     * @memberof RailwaySectionProperties
     */
    'operatingUnitEnd': string;
    /**
     * Enclosing start operating-unit [Betriebsstelle], identified by the DB Netz RL100 code.
     * @type {string}
     * @memberof RailwaySectionProperties
     */
    'operatingUnitStart': string;
    /**
     * Priority of railway-section based on DB Netz Leitzentrale (1 = highest priority, 5 = lowest priority), may be empty in case priority is not known at all.
     * @type {number}
     * @memberof RailwaySectionProperties
     */
    'priority'?: number;
    /**
     * Railway-type [Bahnart] of a particular railway-section [DB Netz Streckenabschnitt]. - MAIN_LINE (main line [Hauptbahn] - at least 30 trains a day and passenger transports during peak times) - BRANCH_LINE (branch line [Nebenbahn] - with connection to main lines and with less traffic)
     * @type {string}
     * @memberof RailwaySectionProperties
     */
    'railwayType': string;
    /**
     * Railway-usage [Bahnnutzung] of a particular railway-section [DB Netz Streckenabschnitt]. - PASSENGER_TRANSPORT (Personenverkehr) - FREIGHT_TRANSPORT (Güterverkehr) - PASSENGER_AND_FREIGHT_TRANSPORT (Personenverkehr & Güterverkehr) - CITY_TRAIN (S-Bahnen) - PRIVATE_SIDING (Gleisanschluss)
     * @type {string}
     * @memberof RailwaySectionProperties
     */
    'railwayUsage': string;
    /**
     * Unique request id in order to find the request for this particular response within a batched request.
     * @type {string}
     * @memberof RailwaySectionProperties
     */
    'requestID'?: string;
    /**
     * Identification of route [DB Netz Streckennummer] the railway-section belongs to.
     * @type {string}
     * @memberof RailwaySectionProperties
     */
    'route': string;
    /**
     * Short name [Kurzname] of route.
     * @type {string}
     * @memberof RailwaySectionProperties
     */
    'routeShortName': string;
    /**
     * 
     * @type {SectionSpeed}
     * @memberof RailwaySectionProperties
     */
    'speed'?: SectionSpeed;
    /**
     * Count of tracks [Gleise] for section.
     * @type {number}
     * @memberof RailwaySectionProperties
     */
    'trackCount': number;
}
/**
 * Railway-sections [DB Netz Streckenabschnitte] between operating-units [Betriebsstellen] as geojson feature collection according to RFC7946.
 * @export
 * @interface RailwaySectionsBetweenOperatingUnitsFeatureCollection
 */
export interface RailwaySectionsBetweenOperatingUnitsFeatureCollection {
    /**
     * Bounding box of features within feature collection according to RFC7946.
     * @type {Array<number>}
     * @memberof RailwaySectionsBetweenOperatingUnitsFeatureCollection
     */
    'bbox': Array<number>;
    /**
     * Coordinate reference system (CRS) also known as spatial reference system (SRS). - EPSG:3857 - EPSG:4326
     * @type {string}
     * @memberof RailwaySectionsBetweenOperatingUnitsFeatureCollection
     */
    'crs'?: string;
    /**
     * List of features.
     * @type {Array<RailwayLinksFeatureCollectionFeaturesInner>}
     * @memberof RailwaySectionsBetweenOperatingUnitsFeatureCollection
     */
    'features': Array<RailwayLinksFeatureCollectionFeaturesInner>;
    /**
     * Total features that matched provided filter criterias according to RFC7946.
     * @type {number}
     * @memberof RailwaySectionsBetweenOperatingUnitsFeatureCollection
     */
    'numberMatched'?: number;
    /**
     * Total features that are returned according to RFC7946.
     * @type {number}
     * @memberof RailwaySectionsBetweenOperatingUnitsFeatureCollection
     */
    'numberReturned'?: number;
    /**
     * Total features according to RFC7946.
     * @type {number}
     * @memberof RailwaySectionsBetweenOperatingUnitsFeatureCollection
     */
    'totalFeatures'?: number;
    /**
     * Type of feature collection according to RFC7946, defaults to \'FeatureCollection\'.
     * @type {string}
     * @memberof RailwaySectionsBetweenOperatingUnitsFeatureCollection
     */
    'type': string;
}
/**
 * Railway sections [DB Netz Streckenabschnitte] between operating-units [Betriebsstellen] request.
 * @export
 * @interface RailwaySectionsBetweenOperatingUnitsRequest
 */
export interface RailwaySectionsBetweenOperatingUnitsRequest {
    /**
     * Coordinate reference system, defaults to EPSG:4236 - EPSG:3857 - EPSG:4326
     * @type {string}
     * @memberof RailwaySectionsBetweenOperatingUnitsRequest
     */
    'crs'?: string;
    /**
     * List of requested railways-sections.
     * @type {Array<RailwaySectionBetweenOperatingUnitsRequest>}
     * @memberof RailwaySectionsBetweenOperatingUnitsRequest
     */
    'sections': Array<RailwaySectionBetweenOperatingUnitsRequest>;
}
/**
 * Railway-sections [DB Netz Streckenabschnitte] by geometry as geojson feature collection according to RFC7946.
 * @export
 * @interface RailwaySectionsByGeometryFeatureCollection
 */
export interface RailwaySectionsByGeometryFeatureCollection {
    /**
     * Bounding box of features within feature collection according to RFC7946.
     * @type {Array<number>}
     * @memberof RailwaySectionsByGeometryFeatureCollection
     */
    'bbox': Array<number>;
    /**
     * Coordinate reference system (CRS) also known as spatial reference system (SRS). - EPSG:3857 - EPSG:4326
     * @type {string}
     * @memberof RailwaySectionsByGeometryFeatureCollection
     */
    'crs'?: string;
    /**
     * List of features.
     * @type {Array<RailwayLinksFeatureCollectionFeaturesInner>}
     * @memberof RailwaySectionsByGeometryFeatureCollection
     */
    'features': Array<RailwayLinksFeatureCollectionFeaturesInner>;
    /**
     * Total features that matched provided filter criterias according to RFC7946.
     * @type {number}
     * @memberof RailwaySectionsByGeometryFeatureCollection
     */
    'numberMatched'?: number;
    /**
     * Total features that are returned according to RFC7946.
     * @type {number}
     * @memberof RailwaySectionsByGeometryFeatureCollection
     */
    'numberReturned'?: number;
    /**
     * Total features according to RFC7946.
     * @type {number}
     * @memberof RailwaySectionsByGeometryFeatureCollection
     */
    'totalFeatures'?: number;
    /**
     * Type of feature collection according to RFC7946, defaults to \'FeatureCollection\'.
     * @type {string}
     * @memberof RailwaySectionsByGeometryFeatureCollection
     */
    'type': string;
}
/**
 * Requested railway sections [DB Netz Streckenabschnitte] by geometry.
 * @export
 * @interface RailwaySectionsByGeometryRequest
 */
export interface RailwaySectionsByGeometryRequest {
    /**
     * Coordinate reference system, defaults to EPSG:4236 - EPSG:3857 - EPSG:4326
     * @type {string}
     * @memberof RailwaySectionsByGeometryRequest
     */
    'crs'?: string;
    /**
     * 
     * @type {Geometry}
     * @memberof RailwaySectionsByGeometryRequest
     */
    'geometry': Geometry;
}
/**
 * Vehicle [Fahrzeug] seat information as geojson feature according to RFC7946.
 * @export
 * @interface SeatFeature
 */
export interface SeatFeature {
    /**
     * Bounding box of feature according to RFC7946.
     * @type {Array<number>}
     * @memberof SeatFeature
     */
    'bbox': Array<number>;
    /**
     * 
     * @type {Geometry}
     * @memberof SeatFeature
     */
    'geometry': Geometry;
    /**
     * ID of feature according to RFC7946.
     * @type {string}
     * @memberof SeatFeature
     */
    'id': string;
    /**
     * 
     * @type {SeatProperties}
     * @memberof SeatFeature
     */
    'properties': SeatProperties;
    /**
     * Type of feature according to RFC7946, defaults to \'Feature\'.
     * @type {string}
     * @memberof SeatFeature
     */
    'type': string;
}
/**
 * Properties according to RFC7946.
 * @export
 * @interface SeatProperties
 */
export interface SeatProperties {
    /**
     * Indicates whether the seat is a an aisle seat [Sitz am Gang].
     * @type {boolean}
     * @memberof SeatProperties
     */
    'aisle'?: boolean;
    /**
     * ID of area the seat belongs to.
     * @type {string}
     * @memberof SeatProperties
     */
    'areaID': string;
    /**
     * Type of area the seat is placed in. - BAHN_BONUS (area where bahn bonus seats are usually located in) - WHEELCHAIR (area that is accessible with wheelchairs) - SEAT (area for seats) - FLOOR (area for staff only seats)
     * @type {string}
     * @memberof SeatProperties
     */
    'areaType': string;
    /**
     * The construction type for a seat. - SINGLE (single seat) - DOUBLE (double seat) - BENCH (bench [Sitzbank])
     * @type {string}
     * @memberof SeatProperties
     */
    'constructionType': string;
    /**
     * Level within vehicle [Fahrzeug]. - UPPER_DECK (upper deck) - DEFAULT_DECK  (default deck ie entrance zone [Zwischendeck] for multi level vehicles) - LOWER_DECK (lower deck)
     * @type {string}
     * @memberof SeatProperties
     */
    'level': string;
    /**
     * Indicates whether the seat has a light.
     * @type {boolean}
     * @memberof SeatProperties
     */
    'light'?: boolean;
    /**
     * The number of the seat, may empty in case of folding-sets [Klappsitze].
     * @type {string}
     * @memberof SeatProperties
     */
    'number'?: string;
    /**
     * Orientation within reference system in degrees (0 = North, 180 = South etc.)
     * @type {number}
     * @memberof SeatProperties
     */
    'orientation': number;
    /**
     * POI which defines the center position of seat.
     * @type {string}
     * @memberof SeatProperties
     */
    'poiID': string;
    /**
     * Indicates whether the seat has a power socket.
     * @type {boolean}
     * @memberof SeatProperties
     */
    'powersocket'?: boolean;
    /**
     * First or economy class, may be empty in case of staff seats. - FIRST - ECONOMY
     * @type {string}
     * @memberof SeatProperties
     */
    'seatClass'?: string;
    /**
     * Type of seat (please note that seats for bahn-bonus or handicapped travellers [mobilitätseingeschränkte Reisende] are dynamic information and therefore not part of static vehicle-layouts). - NORMAL (normal seat) - WHEELCHAIR (seat dedicated to handicapped travellers that need to sit in their wheelchair [Rollstuhlstellplatz]) - WHEELCHAIR_ESCORT (seat dedicated to travellers escorting handicapped wheelchair travellers, located near by a wheelchair seat [Sitzplatz für Begleiter von mobilitätseingeschränkten Reisenden])
     * @type {string}
     * @memberof SeatProperties
     */
    'seatType': string;
    /**
     * Type of space the seat is located in. - SALOON (saloon space [Großraum] - COMPARTMENT (compartment space [Abteil] - BISTRO (space where the bistro is located in) - KITCHEN (space where the kitchen is located in) - OFFICE (space for staff / office) - TOILET (toilet space) - RESTAURANT (board restaurant space)
     * @type {string}
     * @memberof SeatProperties
     */
    'spaceType': string;
    /**
     * Indicates whether seat is not accessible for travellers (only for staff).
     * @type {boolean}
     * @memberof SeatProperties
     */
    'staffOnly'?: boolean;
    /**
     * Indicates whether the seat has a window view.
     * @type {boolean}
     * @memberof SeatProperties
     */
    'window'?: boolean;
    /**
     * ID of zone the seat belongs to.
     * @type {string}
     * @memberof SeatProperties
     */
    'zoneID': string;
    /**
     * Type of zone within vehicle [Fahrzeug].Type of zone within vehicle [Fahrzeug]. - FAMILY (family zone for families with kids etc.) - INFANT (zone supposed to infants / family [Kleinkinderbereich]) - SILENCE (silence zone, no work and playing here) - MOBILE (mobile zone where phone calls / working is possible) - WHEELCHAIR_ACCESSIBLE (zone that is accessible for wheelchairs) - STAFF (zone is only accessible for staff) - SPECIAL_USAGE (special usage zone) - INAPPLICABLE (zone without usage)
     * @type {string}
     * @memberof SeatProperties
     */
    'zoneType': string;
}
/**
 * Speed information for a particular railway-section [DB Netz Streckenabschnitt].
 * @export
 * @interface SectionSpeed
 */
export interface SectionSpeed {
    /**
     * Maximum speed that is allowed on particular railway-section in km/h.
     * @type {number}
     * @memberof SectionSpeed
     */
    'maximum': number;
    /**
     * Minimum speed that is possible on particular railway-section in km/h, meaning that there exists no part on this section where less than this speed is possible.
     * @type {number}
     * @memberof SectionSpeed
     */
    'minimum': number;
}
/**
 * Vehicle [Fahrzeug] information as geojson feature according to RFC7946.
 * @export
 * @interface VehicleFeature
 */
export interface VehicleFeature {
    /**
     * Bounding box of feature according to RFC7946.
     * @type {Array<number>}
     * @memberof VehicleFeature
     */
    'bbox': Array<number>;
    /**
     * 
     * @type {Geometry}
     * @memberof VehicleFeature
     */
    'geometry': Geometry;
    /**
     * ID of feature according to RFC7946.
     * @type {string}
     * @memberof VehicleFeature
     */
    'id': string;
    /**
     * 
     * @type {VehicleProperties}
     * @memberof VehicleFeature
     */
    'properties': VehicleProperties;
    /**
     * Type of feature according to RFC7946, defaults to \'Feature\'.
     * @type {string}
     * @memberof VehicleFeature
     */
    'type': string;
}
/**
 * Additional information on a vehicle [Fahrzeug] that belongs to a particular multiple-unit [Triebzug].
 * @export
 * @interface VehicleInMultipleUnit
 */
export interface VehicleInMultipleUnit {
    /**
     * Name of multiple-unit [Triebzug].
     * @type {string}
     * @memberof VehicleInMultipleUnit
     */
    'name': string;
    /**
     * Vehicle [Fahrzeug] orientation within multiple-unit [bauliche Einbaurichtung im Zug). - FORWARDS - BACKWARDS - UNDEFINED
     * @type {string}
     * @memberof VehicleInMultipleUnit
     */
    'orientation': string;
    /**
     * Position of vehicle [Fahrzeug] within mutiple-unit [Triebzug].
     * @type {number}
     * @memberof VehicleInMultipleUnit
     */
    'position': number;
    /**
     * Multiple unit [Triebzug]. - ICE_T - ICE_1 - ICE_2 - ICE_3 - ICE_4
     * @type {string}
     * @memberof VehicleInMultipleUnit
     */
    'product'?: string;
}
/**
 * Vehicle layout [Fahrzeuglayout] for a particular vehicle type [Fahrzeugart] as geojson feature collection ccording to RFC7946.
 * @export
 * @interface VehicleLayoutFeatureCollection
 */
export interface VehicleLayoutFeatureCollection {
    /**
     * Bounding box of features within feature collection according to RFC7946.
     * @type {Array<number>}
     * @memberof VehicleLayoutFeatureCollection
     */
    'bbox': Array<number>;
    /**
     * Coordinate reference system (CRS) also known as spatial reference system (SRS). - EPSG:3857 - EPSG:4326
     * @type {string}
     * @memberof VehicleLayoutFeatureCollection
     */
    'crs'?: string;
    /**
     * List of features.
     * @type {Array<VehicleLayoutFeatureCollectionFeaturesInner>}
     * @memberof VehicleLayoutFeatureCollection
     */
    'features': Array<VehicleLayoutFeatureCollectionFeaturesInner>;
    /**
     * Total features that matched provided filter criterias according to RFC7946.
     * @type {number}
     * @memberof VehicleLayoutFeatureCollection
     */
    'numberMatched'?: number;
    /**
     * Total features that are returned according to RFC7946.
     * @type {number}
     * @memberof VehicleLayoutFeatureCollection
     */
    'numberReturned'?: number;
    /**
     * Total features according to RFC7946.
     * @type {number}
     * @memberof VehicleLayoutFeatureCollection
     */
    'totalFeatures'?: number;
    /**
     * Type of feature collection according to RFC7946, defaults to \'FeatureCollection\'.
     * @type {string}
     * @memberof VehicleLayoutFeatureCollection
     */
    'type': string;
}
/**
 * @type VehicleLayoutFeatureCollectionFeaturesInner
 * List of features.
 * @export
 */
export type VehicleLayoutFeatureCollectionFeaturesInner = AreaFeature | InteriorFeature | OpeningFeature | SeatFeature | VehicleFeature | VehiclePoiFeature | ZoneFeature;

/**
 * Points of interest for a vehicle [Fahrzeug] as geojson feature according to RFC7946.
 * @export
 * @interface VehiclePoiFeature
 */
export interface VehiclePoiFeature {
    /**
     * Bounding box of feature according to RFC7946.
     * @type {Array<number>}
     * @memberof VehiclePoiFeature
     */
    'bbox': Array<number>;
    /**
     * 
     * @type {Geometry}
     * @memberof VehiclePoiFeature
     */
    'geometry': Geometry;
    /**
     * ID of feature according to RFC7946.
     * @type {string}
     * @memberof VehiclePoiFeature
     */
    'id': string;
    /**
     * 
     * @type {VehiclePoiProperties}
     * @memberof VehiclePoiFeature
     */
    'properties': VehiclePoiProperties;
    /**
     * Type of feature according to RFC7946, defaults to \'Feature\'.
     * @type {string}
     * @memberof VehiclePoiFeature
     */
    'type': string;
}
/**
 * Properties according to RFC7946.
 * @export
 * @interface VehiclePoiProperties
 */
export interface VehiclePoiProperties {
    /**
     * ID of poi clustering.
     * @type {string}
     * @memberof VehiclePoiProperties
     */
    'clusterID'?: string;
    /**
     * ID of equipment, in case poi has an id.
     * @type {string}
     * @memberof VehiclePoiProperties
     */
    'equipmentID'?: string;
    /**
     * Level within vehicle [Fahrzeug]. - UPPER_DECK (upper deck) - DEFAULT_DECK  (default deck ie entrance zone [Zwischendeck] for multi level vehicles) - LOWER_DECK (lower deck)
     * @type {string}
     * @memberof VehiclePoiProperties
     */
    'level': string;
    /**
     * Orientation within reference system in degrees (0 = North, 180 = South etc.)
     * @type {number}
     * @memberof VehiclePoiProperties
     */
    'orientation': number;
    /**
     * ID of poi.
     * @type {string}
     * @memberof VehiclePoiProperties
     */
    'poiID': string;
    /**
     * Name of poi, in case poi has a name.
     * @type {string}
     * @memberof VehiclePoiProperties
     */
    'poiName'?: string;
    /**
     * Type of vehicle [Fahrzeug] poi. - TRASHBIN (trash bin [Abfallbehälter / Mülleimer]) - INFO_DISPLAY (info display [Deckengondel / Bildschirme etc.]) - WARDROBE (wardrobe [Garderobe / Kleiderhaken]) - PRAM_PARKING (pram parking space [Kinderwagenparkplatz]) - COUPLER (front [WE1] or rear [WE2] coupler or center) - CONTROL_STAND (control stand [Führerstand]) - CHANGING_TABLE (diaper changing table [Wickeltisch]) - LOCKER (locker [Schließfächer]) - CATERER (room of the trains caterer [Aufenthaltsraum], staff only) - SERVICE_TEAM (room of the service team  [Aufenthaltsraum], staff only) - TROLLEY_PARKING (parking space for the trolley, staff only) - DRAWING_AID_EXIT (aid for drawing the exit / entrance icon) - DRAWING_AID_ZONE_FAMILY (aid for drawing the family zone icon) - DRAWING_AID_ZONE_MOBILE (aid for drawing the mobile zone icon) - DRAWING_AID_ZONE_SILENCE (aid for drawing the silence zone icon) - DRAWING_AID_SPACE_KITCHEN (aid for drawing the kitchen space icon) - DRAWING_AID_SPACE_BAR (aid for drawing the bar space icon) - DRAWING_AID_SPACE_BISTRO (aid for drawing the bistro space icon) - DRAWING_AID_SPACE_RESTAURANT (aid for drawing the restaurant space icon) - DRAWING_AID_SPACE_TOILET (aid for drawing the toilet space icon) - DRAWING_AID_SPACE_TOILET_WHEELCHAIR (aid for drawing the wheelchair toilet space icon) - DRAWING_AID_AREA_BIKE (aid for drawing the bike area icon) - DRAWING_AID_AREA_BAGGAGE (aid for drawing the baggage area icon) - DRAWING_AID_AREA_WHEELCHAIR (aid for drawing the wheelchair area icon) - DRAWING_AID_AREA_INFANT (aid for drawing the infant area icon) - DRAWING_AID_AREA_RECYCLE (aid for drawing the recycle bin area icon) - DRAWING_AID_AREA_STAIR (aid for drawing the stair area icon) - DRAWING_AID_CENTER_POSITION (aid for drawing the interior around their center position)
     * @type {string}
     * @memberof VehiclePoiProperties
     */
    'poiType': string;
    /**
     * Indicates whether opening is not accessible for travellers (only for staff).
     * @type {boolean}
     * @memberof VehiclePoiProperties
     */
    'staffOnly'?: boolean;
}
/**
 * Properties according to RFC7946.
 * @export
 * @interface VehicleProperties
 */
export interface VehicleProperties {
    /**
     * The orientation of digitalization, true if WE1 (CouplerFront) is left, false if WE2 (CouplerRear) is left
     * @type {boolean}
     * @memberof VehicleProperties
     */
    'digitizedOrientation'?: boolean;
    /**
     * Wagon identification numbers [Ordnungsnummer] of the vehicle.
     * @type {Array<number>}
     * @memberof VehicleProperties
     */
    'identificationNumbers'?: Array<number>;
    /**
     * Timestamp this vehicle-layout has been changed the last time as fully qualified date (for instance \'2019-08-19T12:56:14+02:00\' or \'2019-08-19T10:56:14Z\').
     * @type {string}
     * @memberof VehicleProperties
     */
    'lastChanged': string;
    /**
     * Length of vehicle in m.
     * @type {number}
     * @memberof VehicleProperties
     */
    'length': number;
    /**
     * 
     * @type {VehicleInMultipleUnit}
     * @memberof VehicleProperties
     */
    'multipleUnit'?: VehicleInMultipleUnit;
    /**
     * ID of vehicle within transport (usually the UIC number for rail). May be empty in case layout has been requestet without a particular vehicle-id.
     * @type {string}
     * @memberof VehicleProperties
     */
    'vehicleID'?: string;
    /**
     * 
     * @type {VehicleType}
     * @memberof VehicleProperties
     */
    'vehicleType': VehicleType;
    /**
     * Width of vehicle in m.
     * @type {number}
     * @memberof VehicleProperties
     */
    'width': number;
}
/**
 * Detailed information on the vehicle [Fahrzeug] type.
 * @export
 * @interface VehicleType
 */
export interface VehicleType {
    /**
     * Category of vehicle [Fahrzeug] according to basic visual differentiation. - DOUBLEDECK_FIRST_ECONOMY_CLASS (Doppelstockwagen 1.& 2. Klasse) - DOUBLEDECK_FIRST_CLASS (Doppelstockwagen 1. Klasse) - DOUBLEDECK_ECONOMY_CLASS (Doppelstockwagen 2. Klasse) - DOUBLEDECK_CONTROLCAR_FIRST_ECONOMOY_CLASS (Doppelstocksteuerwagen 1. & 2. Klasse) - DOUBLEDECK_CONTROLCAR_FIRST_CLASS (Doppelstocksteuerwagen 1. Klasse) - DOUBLEDECK_CONTROLCAR_ECONOMY_CLASS (Doppelstocksteuerwagen 2. Klasse) - DOUBLEDECK_CARCARRIER_PASSENGERTRAIN (Doppelstock-Autotransportwagen der Reisezugwagen-Bauart) - PASSENGERCARRIAGE_FIRST_ECONOMY_CLASS (Reisezugwagen 1.& 2. Klasse) - PASSENGERCARRIAGE_FIRST_CLASS (Reisezugwagen 1.Klasse) - PASSENGERCARRIAGE_ECONOMY_CLASS (Reisezugwagen 2.Klasse) - CONTROLCAR_FIRST_CLASS (Steuerwagen & 1.Klasse) - CONTROLCAR_ECONOMY_CLASS (Steuerwagen & 2.Klasse) - CONTROLCAR_FIRST_ECONOMY_CLASS (Steuerwagen 1.& 2.Klasse) - DOUBLECONTROLCAR_ECONOMY_CLASS (Beidseitiger Steuerwagen aka \'Schienenbus\' & 2.Klasse) - DOUBLECONTROLCAR_FIRST_ECONOMY_CLASS (Beidseitiger Steuerwagen aka \'Schienenbus\' 1.& 2.Klasse) - DININGCAR (Speisewagen) - HALFDININGCAR_FIRST_CLASS (Halbspeisewagen & 1. Klasse) - HALFDININGCAR_ECONOMY_CLASS (Halbspeisewagen & 2. Klasse) - SLEEPER_FIRST_CLASS (Schlafwagen 1. Klasse) - SLEEPER_FIRST_ECONOMY_CLASS (Schlafwagen 1. & 2. Klasse) - SLEEPER_ECONOMY_CLASS (Schlafwagen 2. Klasse) - COUCHETTE_FIRST_CLASS (Liegewagen 1. Klasse) - COUCHETTE_ECONOMY_CLASS (Liegewagen 2. Klasse) - BAGGAGECAR (Gepaeckwagen) - LOCOMOTIVE (Lok) - POWERCAR (Triebkopf) - UNDEFINED (unbekannt)
     * @type {string}
     * @memberof VehicleType
     */
    'category': string;
    /**
     * Construction type of the vehicle [Bauart / Baureihe], for instance \'I4030\' or \'If03F\'.
     * @type {string}
     * @memberof VehicleType
     */
    'constructionType': string;
    /**
     * Indicates if the vehicle [Fahrzeug] has economy class seats.
     * @type {boolean}
     * @memberof VehicleType
     */
    'hasEconomyClass'?: boolean;
    /**
     * Indicates if the vehicle [Fahrzeug] has first class seats.
     * @type {boolean}
     * @memberof VehicleType
     */
    'hasFirstClass'?: boolean;
    /**
     * ID of layout [Redesign, modernisiert, 2. Bauserie etc.] of the vehicle type, for instance \'403.1.BS\' or \'403.2.BS\'.
     * @type {string}
     * @memberof VehicleType
     */
    'layoutID'?: string;
}
/**
 * Zone within a vehicle [Fahrzeug] as geojson feature according to RFC7946.
 * @export
 * @interface ZoneFeature
 */
export interface ZoneFeature {
    /**
     * Bounding box of feature according to RFC7946.
     * @type {Array<number>}
     * @memberof ZoneFeature
     */
    'bbox': Array<number>;
    /**
     * 
     * @type {Geometry}
     * @memberof ZoneFeature
     */
    'geometry': Geometry;
    /**
     * ID of feature according to RFC7946.
     * @type {string}
     * @memberof ZoneFeature
     */
    'id': string;
    /**
     * 
     * @type {ZoneProperties}
     * @memberof ZoneFeature
     */
    'properties': ZoneProperties;
    /**
     * Type of feature according to RFC7946, defaults to \'Feature\'.
     * @type {string}
     * @memberof ZoneFeature
     */
    'type': string;
}
/**
 * Properties according to RFC7946.
 * @export
 * @interface ZoneProperties
 */
export interface ZoneProperties {
    /**
     * Level within vehicle [Fahrzeug]. - UPPER_DECK (upper deck) - DEFAULT_DECK  (default deck ie entrance zone [Zwischendeck] for multi level vehicles) - LOWER_DECK (lower deck)
     * @type {string}
     * @memberof ZoneProperties
     */
    'level': string;
    /**
     * Space type for areas and zones.Space type for areas and zones. - SALOON (saloon space [Großraum] - COMPARTMENT (compartment space [Abteil] - ENTRANCE_AREA (space for entering / leaving the vehicle) - BISTRO (space where the bistro is located in) - KITCHEN (space for kitchen) - OFFICE (space for staff / office) - RESTAURANT (board restaurant) - STORAGE (storage and baggage zone) - TOILET (toilet zone) - UNDEFINED (undefined zone)
     * @type {string}
     * @memberof ZoneProperties
     */
    'space': string;
    /**
     * Indicates whether zone is not accessible for travellers (only for staff).
     * @type {boolean}
     * @memberof ZoneProperties
     */
    'staffOnly'?: boolean;
    /**
     * Type of zone within vehicle [Fahrzeug].Type of zone within vehicle [Fahrzeug]. - FAMILY (family zone for families with kids etc.) - INFANT (zone supposed to infants / family [Kleinkinderbereich]) - SILENCE (silence zone, no work and playing here) - MOBILE (mobile zone where phone calls / working is possible) - WHEELCHAIR_ACCESSIBLE (zone that is accessible for wheelchairs) - STAFF (zone is only accessible for staff) - SPECIAL_USAGE (special usage zone) - INAPPLICABLE (zone without usage)
     * @type {string}
     * @memberof ZoneProperties
     */
    'zone': string;
    /**
     * ID of zone.
     * @type {string}
     * @memberof ZoneProperties
     */
    'zoneID': string;
}

/**
 * RailwaysApi - axios parameter creator
 * @export
 */
export const RailwaysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the shortest railway-links [Verbindungen auf dem Schienennetz] between two operating-units [Betriebsstellen], specidied shortest distance to the passed geo-coordinates, and through an optional list of via geo-coordindates as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946). Please note that the result describes a railway link that may not be \'driveable\' by particular journeys [Fahrten], meaning there is no guarantee that a train can drive on the returned list (ie this is no routing on the railway network). Take care that the response may not include the actual requested geo coorindates but the nearest operating-unit [Betriebsstelle].
         * @summary Returns the shortest railway-links between two coordinates
         * @param {RailwayLinksBetweenCoordinatesRequest} railwayLinksBetweenCoordinatesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railwayLinksBetweenCoordinates: async (railwayLinksBetweenCoordinatesRequest: RailwayLinksBetweenCoordinatesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'railwayLinksBetweenCoordinatesRequest' is not null or undefined
            assertParamExists('railwayLinksBetweenCoordinates', 'railwayLinksBetweenCoordinatesRequest', railwayLinksBetweenCoordinatesRequest)
            const localVarPath = `/railways/links/between-coordinates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientId required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(railwayLinksBetweenCoordinatesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the shortest railway-links [Verbindungen auf dem Schienennetz] between two operating-units [Betriebsstellen] and through an optional list of via operating-units as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946). Please note that the result describes a railway link that may not be \'driveable\' by particular journeys [Fahrten], meaning there is no guarantee that a train can drive on the returned list (ie this is no routing on the railway network).
         * @summary Returns the shortest railway-links between two operating-units
         * @param {RailwayLinksBetweenOperatingUnitsRequest} railwayLinksBetweenOperatingUnitsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railwayLinksBetweenOperatingUnits: async (railwayLinksBetweenOperatingUnitsRequest: RailwayLinksBetweenOperatingUnitsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'railwayLinksBetweenOperatingUnitsRequest' is not null or undefined
            assertParamExists('railwayLinksBetweenOperatingUnits', 'railwayLinksBetweenOperatingUnitsRequest', railwayLinksBetweenOperatingUnitsRequest)
            const localVarPath = `/railways/links/between-operating-units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientId required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(railwayLinksBetweenOperatingUnitsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all operating-units [Betriebsstellen] with information on railway-routes [DB Netz Strecken], railway-sections [DB Netz Streckenabschnitte] and access-points [Zugangspunkte] that pass the the particular operating-unit.
         * @summary Returns all operating-units
         * @param {RailwayOperatingUnitsBatchRequest} railwayOperatingUnitsBatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railwayOperatingUnitsBatch: async (railwayOperatingUnitsBatchRequest: RailwayOperatingUnitsBatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'railwayOperatingUnitsBatchRequest' is not null or undefined
            assertParamExists('railwayOperatingUnitsBatch', 'railwayOperatingUnitsBatchRequest', railwayOperatingUnitsBatchRequest)
            const localVarPath = `/railways/operating-units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientId required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(railwayOperatingUnitsBatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all railway-sections [DB Netz Streckenabschnitte] for a list of a particular route [Strecke] between two operating-units [Betriebsstellen] as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns all railway-sections between two operating-units
         * @param {RailwaySectionsBetweenOperatingUnitsRequest} railwaySectionsBetweenOperatingUnitsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railwaySectionsBetweenOperatingUnits: async (railwaySectionsBetweenOperatingUnitsRequest: RailwaySectionsBetweenOperatingUnitsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'railwaySectionsBetweenOperatingUnitsRequest' is not null or undefined
            assertParamExists('railwaySectionsBetweenOperatingUnits', 'railwaySectionsBetweenOperatingUnitsRequest', railwaySectionsBetweenOperatingUnitsRequest)
            const localVarPath = `/railways/sections/between-operating-units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientId required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(railwaySectionsBetweenOperatingUnitsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all railway-sections [DB Netz Streckenabschnitte] that intersect the passed geometry as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns all railway-sections by geometry
         * @param {RailwaySectionsByGeometryRequest} railwaySectionsByGeometryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railwaySectionsByGeometry: async (railwaySectionsByGeometryRequest: RailwaySectionsByGeometryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'railwaySectionsByGeometryRequest' is not null or undefined
            assertParamExists('railwaySectionsByGeometry', 'railwaySectionsByGeometryRequest', railwaySectionsByGeometryRequest)
            const localVarPath = `/railways/sections/by-geometry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientId required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-Id", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(railwaySectionsByGeometryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RailwaysApi - functional programming interface
 * @export
 */
export const RailwaysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RailwaysApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the shortest railway-links [Verbindungen auf dem Schienennetz] between two operating-units [Betriebsstellen], specidied shortest distance to the passed geo-coordinates, and through an optional list of via geo-coordindates as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946). Please note that the result describes a railway link that may not be \'driveable\' by particular journeys [Fahrten], meaning there is no guarantee that a train can drive on the returned list (ie this is no routing on the railway network). Take care that the response may not include the actual requested geo coorindates but the nearest operating-unit [Betriebsstelle].
         * @summary Returns the shortest railway-links between two coordinates
         * @param {RailwayLinksBetweenCoordinatesRequest} railwayLinksBetweenCoordinatesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railwayLinksBetweenCoordinates(railwayLinksBetweenCoordinatesRequest: RailwayLinksBetweenCoordinatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RailwayLinksFeatureCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.railwayLinksBetweenCoordinates(railwayLinksBetweenCoordinatesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the shortest railway-links [Verbindungen auf dem Schienennetz] between two operating-units [Betriebsstellen] and through an optional list of via operating-units as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946). Please note that the result describes a railway link that may not be \'driveable\' by particular journeys [Fahrten], meaning there is no guarantee that a train can drive on the returned list (ie this is no routing on the railway network).
         * @summary Returns the shortest railway-links between two operating-units
         * @param {RailwayLinksBetweenOperatingUnitsRequest} railwayLinksBetweenOperatingUnitsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railwayLinksBetweenOperatingUnits(railwayLinksBetweenOperatingUnitsRequest: RailwayLinksBetweenOperatingUnitsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RailwayLinksFeatureCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.railwayLinksBetweenOperatingUnits(railwayLinksBetweenOperatingUnitsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all operating-units [Betriebsstellen] with information on railway-routes [DB Netz Strecken], railway-sections [DB Netz Streckenabschnitte] and access-points [Zugangspunkte] that pass the the particular operating-unit.
         * @summary Returns all operating-units
         * @param {RailwayOperatingUnitsBatchRequest} railwayOperatingUnitsBatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railwayOperatingUnitsBatch(railwayOperatingUnitsBatchRequest: RailwayOperatingUnitsBatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RailwayOperatingUnitsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.railwayOperatingUnitsBatch(railwayOperatingUnitsBatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all railway-sections [DB Netz Streckenabschnitte] for a list of a particular route [Strecke] between two operating-units [Betriebsstellen] as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns all railway-sections between two operating-units
         * @param {RailwaySectionsBetweenOperatingUnitsRequest} railwaySectionsBetweenOperatingUnitsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railwaySectionsBetweenOperatingUnits(railwaySectionsBetweenOperatingUnitsRequest: RailwaySectionsBetweenOperatingUnitsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RailwaySectionsBetweenOperatingUnitsFeatureCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.railwaySectionsBetweenOperatingUnits(railwaySectionsBetweenOperatingUnitsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all railway-sections [DB Netz Streckenabschnitte] that intersect the passed geometry as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns all railway-sections by geometry
         * @param {RailwaySectionsByGeometryRequest} railwaySectionsByGeometryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async railwaySectionsByGeometry(railwaySectionsByGeometryRequest: RailwaySectionsByGeometryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RailwaySectionsByGeometryFeatureCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.railwaySectionsByGeometry(railwaySectionsByGeometryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RailwaysApi - factory interface
 * @export
 */
export const RailwaysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RailwaysApiFp(configuration)
    return {
        /**
         * Returns the shortest railway-links [Verbindungen auf dem Schienennetz] between two operating-units [Betriebsstellen], specidied shortest distance to the passed geo-coordinates, and through an optional list of via geo-coordindates as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946). Please note that the result describes a railway link that may not be \'driveable\' by particular journeys [Fahrten], meaning there is no guarantee that a train can drive on the returned list (ie this is no routing on the railway network). Take care that the response may not include the actual requested geo coorindates but the nearest operating-unit [Betriebsstelle].
         * @summary Returns the shortest railway-links between two coordinates
         * @param {RailwaysApiRailwayLinksBetweenCoordinatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railwayLinksBetweenCoordinates(requestParameters: RailwaysApiRailwayLinksBetweenCoordinatesRequest, options?: AxiosRequestConfig): AxiosPromise<RailwayLinksFeatureCollection> {
            return localVarFp.railwayLinksBetweenCoordinates(requestParameters.railwayLinksBetweenCoordinatesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the shortest railway-links [Verbindungen auf dem Schienennetz] between two operating-units [Betriebsstellen] and through an optional list of via operating-units as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946). Please note that the result describes a railway link that may not be \'driveable\' by particular journeys [Fahrten], meaning there is no guarantee that a train can drive on the returned list (ie this is no routing on the railway network).
         * @summary Returns the shortest railway-links between two operating-units
         * @param {RailwaysApiRailwayLinksBetweenOperatingUnitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railwayLinksBetweenOperatingUnits(requestParameters: RailwaysApiRailwayLinksBetweenOperatingUnitsRequest, options?: AxiosRequestConfig): AxiosPromise<RailwayLinksFeatureCollection> {
            return localVarFp.railwayLinksBetweenOperatingUnits(requestParameters.railwayLinksBetweenOperatingUnitsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all operating-units [Betriebsstellen] with information on railway-routes [DB Netz Strecken], railway-sections [DB Netz Streckenabschnitte] and access-points [Zugangspunkte] that pass the the particular operating-unit.
         * @summary Returns all operating-units
         * @param {RailwaysApiRailwayOperatingUnitsBatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railwayOperatingUnitsBatch(requestParameters: RailwaysApiRailwayOperatingUnitsBatchRequest, options?: AxiosRequestConfig): AxiosPromise<RailwayOperatingUnitsResponse> {
            return localVarFp.railwayOperatingUnitsBatch(requestParameters.railwayOperatingUnitsBatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all railway-sections [DB Netz Streckenabschnitte] for a list of a particular route [Strecke] between two operating-units [Betriebsstellen] as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns all railway-sections between two operating-units
         * @param {RailwaysApiRailwaySectionsBetweenOperatingUnitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railwaySectionsBetweenOperatingUnits(requestParameters: RailwaysApiRailwaySectionsBetweenOperatingUnitsRequest, options?: AxiosRequestConfig): AxiosPromise<RailwaySectionsBetweenOperatingUnitsFeatureCollection> {
            return localVarFp.railwaySectionsBetweenOperatingUnits(requestParameters.railwaySectionsBetweenOperatingUnitsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all railway-sections [DB Netz Streckenabschnitte] that intersect the passed geometry as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns all railway-sections by geometry
         * @param {RailwaysApiRailwaySectionsByGeometryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        railwaySectionsByGeometry(requestParameters: RailwaysApiRailwaySectionsByGeometryRequest, options?: AxiosRequestConfig): AxiosPromise<RailwaySectionsByGeometryFeatureCollection> {
            return localVarFp.railwaySectionsByGeometry(requestParameters.railwaySectionsByGeometryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for railwayLinksBetweenCoordinates operation in RailwaysApi.
 * @export
 * @interface RailwaysApiRailwayLinksBetweenCoordinatesRequest
 */
export interface RailwaysApiRailwayLinksBetweenCoordinatesRequest {
    /**
     * 
     * @type {RailwayLinksBetweenCoordinatesRequest}
     * @memberof RailwaysApiRailwayLinksBetweenCoordinates
     */
    readonly railwayLinksBetweenCoordinatesRequest: RailwayLinksBetweenCoordinatesRequest
}

/**
 * Request parameters for railwayLinksBetweenOperatingUnits operation in RailwaysApi.
 * @export
 * @interface RailwaysApiRailwayLinksBetweenOperatingUnitsRequest
 */
export interface RailwaysApiRailwayLinksBetweenOperatingUnitsRequest {
    /**
     * 
     * @type {RailwayLinksBetweenOperatingUnitsRequest}
     * @memberof RailwaysApiRailwayLinksBetweenOperatingUnits
     */
    readonly railwayLinksBetweenOperatingUnitsRequest: RailwayLinksBetweenOperatingUnitsRequest
}

/**
 * Request parameters for railwayOperatingUnitsBatch operation in RailwaysApi.
 * @export
 * @interface RailwaysApiRailwayOperatingUnitsBatchRequest
 */
export interface RailwaysApiRailwayOperatingUnitsBatchRequest {
    /**
     * 
     * @type {RailwayOperatingUnitsBatchRequest}
     * @memberof RailwaysApiRailwayOperatingUnitsBatch
     */
    readonly railwayOperatingUnitsBatchRequest: RailwayOperatingUnitsBatchRequest
}

/**
 * Request parameters for railwaySectionsBetweenOperatingUnits operation in RailwaysApi.
 * @export
 * @interface RailwaysApiRailwaySectionsBetweenOperatingUnitsRequest
 */
export interface RailwaysApiRailwaySectionsBetweenOperatingUnitsRequest {
    /**
     * 
     * @type {RailwaySectionsBetweenOperatingUnitsRequest}
     * @memberof RailwaysApiRailwaySectionsBetweenOperatingUnits
     */
    readonly railwaySectionsBetweenOperatingUnitsRequest: RailwaySectionsBetweenOperatingUnitsRequest
}

/**
 * Request parameters for railwaySectionsByGeometry operation in RailwaysApi.
 * @export
 * @interface RailwaysApiRailwaySectionsByGeometryRequest
 */
export interface RailwaysApiRailwaySectionsByGeometryRequest {
    /**
     * 
     * @type {RailwaySectionsByGeometryRequest}
     * @memberof RailwaysApiRailwaySectionsByGeometry
     */
    readonly railwaySectionsByGeometryRequest: RailwaySectionsByGeometryRequest
}

/**
 * RailwaysApi - object-oriented interface
 * @export
 * @class RailwaysApi
 * @extends {BaseAPI}
 */
export class RailwaysApi extends BaseAPI {
    /**
     * Returns the shortest railway-links [Verbindungen auf dem Schienennetz] between two operating-units [Betriebsstellen], specidied shortest distance to the passed geo-coordinates, and through an optional list of via geo-coordindates as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946). Please note that the result describes a railway link that may not be \'driveable\' by particular journeys [Fahrten], meaning there is no guarantee that a train can drive on the returned list (ie this is no routing on the railway network). Take care that the response may not include the actual requested geo coorindates but the nearest operating-unit [Betriebsstelle].
     * @summary Returns the shortest railway-links between two coordinates
     * @param {RailwaysApiRailwayLinksBetweenCoordinatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RailwaysApi
     */
    public railwayLinksBetweenCoordinates(requestParameters: RailwaysApiRailwayLinksBetweenCoordinatesRequest, options?: AxiosRequestConfig) {
        return RailwaysApiFp(this.configuration).railwayLinksBetweenCoordinates(requestParameters.railwayLinksBetweenCoordinatesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the shortest railway-links [Verbindungen auf dem Schienennetz] between two operating-units [Betriebsstellen] and through an optional list of via operating-units as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946). Please note that the result describes a railway link that may not be \'driveable\' by particular journeys [Fahrten], meaning there is no guarantee that a train can drive on the returned list (ie this is no routing on the railway network).
     * @summary Returns the shortest railway-links between two operating-units
     * @param {RailwaysApiRailwayLinksBetweenOperatingUnitsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RailwaysApi
     */
    public railwayLinksBetweenOperatingUnits(requestParameters: RailwaysApiRailwayLinksBetweenOperatingUnitsRequest, options?: AxiosRequestConfig) {
        return RailwaysApiFp(this.configuration).railwayLinksBetweenOperatingUnits(requestParameters.railwayLinksBetweenOperatingUnitsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all operating-units [Betriebsstellen] with information on railway-routes [DB Netz Strecken], railway-sections [DB Netz Streckenabschnitte] and access-points [Zugangspunkte] that pass the the particular operating-unit.
     * @summary Returns all operating-units
     * @param {RailwaysApiRailwayOperatingUnitsBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RailwaysApi
     */
    public railwayOperatingUnitsBatch(requestParameters: RailwaysApiRailwayOperatingUnitsBatchRequest, options?: AxiosRequestConfig) {
        return RailwaysApiFp(this.configuration).railwayOperatingUnitsBatch(requestParameters.railwayOperatingUnitsBatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all railway-sections [DB Netz Streckenabschnitte] for a list of a particular route [Strecke] between two operating-units [Betriebsstellen] as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
     * @summary Returns all railway-sections between two operating-units
     * @param {RailwaysApiRailwaySectionsBetweenOperatingUnitsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RailwaysApi
     */
    public railwaySectionsBetweenOperatingUnits(requestParameters: RailwaysApiRailwaySectionsBetweenOperatingUnitsRequest, options?: AxiosRequestConfig) {
        return RailwaysApiFp(this.configuration).railwaySectionsBetweenOperatingUnits(requestParameters.railwaySectionsBetweenOperatingUnitsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all railway-sections [DB Netz Streckenabschnitte] that intersect the passed geometry as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
     * @summary Returns all railway-sections by geometry
     * @param {RailwaysApiRailwaySectionsByGeometryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RailwaysApi
     */
    public railwaySectionsByGeometry(requestParameters: RailwaysApiRailwaySectionsByGeometryRequest, options?: AxiosRequestConfig) {
        return RailwaysApiFp(this.configuration).railwaySectionsByGeometry(requestParameters.railwaySectionsByGeometryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VehicleLayoutsApi - axios parameter creator
 * @export
 */
export const VehicleLayoutsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all available digitalized designs for vehicle-layouts.
         * @summary Returns all available digitalized designs for vehicle-layouts
         * @param {string} [lastChanged] limits result to all designs that have been changed (anything) after passed fully-qualified-date (ISO-8601 with time-zone or offset) can be used to get deltas, if omitted all designs are returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableDesigns: async (lastChanged?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vehicle-layouts/available-designs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientId required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-Id", configuration)

            if (lastChanged !== undefined) {
                localVarQueryParameter['lastChanged'] = (lastChanged as any instanceof Date) ?
                    (lastChanged as any).toISOString().substring(0,10) :
                    lastChanged;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns digitalized vehicle-layouts for a particular construction-type [Bauart bzw. Baureihe] and optional layout-id [Redesign, mit grünem Streifem etc.] as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns digitalized vehicle-layouts by construction-type
         * @param {string} constructionType construction-type [Bauart bzw. Baureihe] for vehicle-layout
         * @param {string} layoutID id of vehicle-layout [Redesign, mit grünem Streifem etc.]
         * @param {string} [crs] coordinate reference system, defaults to EPSG:4326 - EPSG:3857 - EPSG:4326
         * @param {Array<string>} [features] filter for feature types to return, if omitted all features are returned - VEHICLE (feature type for vehicle information) - AREA (feature type for area information) - INTERIOR (feature type for interior information) - OPENING (feature type for opening information) - SEAT (feature type for seat information) - POI (feature type for poi information) - ZONE (feature type for zone information)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byConstructionTypeAndLayoutID: async (constructionType: string, layoutID: string, crs?: string, features?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'constructionType' is not null or undefined
            assertParamExists('byConstructionTypeAndLayoutID', 'constructionType', constructionType)
            // verify required parameter 'layoutID' is not null or undefined
            assertParamExists('byConstructionTypeAndLayoutID', 'layoutID', layoutID)
            const localVarPath = `/vehicle-layouts/by-layout/{constructionType}/{layoutID}`
                .replace(`{${"constructionType"}}`, encodeURIComponent(String(constructionType)))
                .replace(`{${"layoutID"}}`, encodeURIComponent(String(layoutID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientId required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-Id", configuration)

            if (crs !== undefined) {
                localVarQueryParameter['crs'] = crs;
            }

            if (features) {
                localVarQueryParameter['features'] = features;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns digitalized vehicle-layouts for a particular design-id as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns digitalized vehicle-layouts by design-id
         * @param {string} internalDesignID internal design-id representing one particular design
         * @param {string} [crs] coordinate reference system, defaults to EPSG:4326 - EPSG:3857 - EPSG:4326
         * @param {Array<string>} [features] filter for feature types to return, if omitted all features are returned - VEHICLE (feature type for vehicle information) - AREA (feature type for area information) - INTERIOR (feature type for interior information) - OPENING (feature type for opening information) - SEAT (feature type for seat information) - POI (feature type for poi information) - ZONE (feature type for zone information)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byDesignID: async (internalDesignID: string, crs?: string, features?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'internalDesignID' is not null or undefined
            assertParamExists('byDesignID', 'internalDesignID', internalDesignID)
            const localVarPath = `/vehicle-layouts/by-designid/{internalDesignID}`
                .replace(`{${"internalDesignID"}}`, encodeURIComponent(String(internalDesignID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientId required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-Id", configuration)

            if (crs !== undefined) {
                localVarQueryParameter['crs'] = crs;
            }

            if (features) {
                localVarQueryParameter['features'] = features;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns digitalized vehicle-layouts for a particular vehicle-id as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns digitalized vehicle-layouts by vehicle-id
         * @param {string} vehicleID id for vehicle (for rail vehicles usually the UIC identification number)
         * @param {string} [crs] coordinate reference system, defaults to EPSG:4326 - EPSG:3857 - EPSG:4326
         * @param {Array<string>} [features] filter for feature types to return, if omitted all features are returned - VEHICLE (feature type for vehicle information) - AREA (feature type for area information) - INTERIOR (feature type for interior information) - OPENING (feature type for opening information) - SEAT (feature type for seat information) - POI (feature type for poi information) - ZONE (feature type for zone information)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byVehicleID: async (vehicleID: string, crs?: string, features?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleID' is not null or undefined
            assertParamExists('byVehicleID', 'vehicleID', vehicleID)
            const localVarPath = `/vehicle-layouts/by-vehicleid/{vehicleID}`
                .replace(`{${"vehicleID"}}`, encodeURIComponent(String(vehicleID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientId required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-Id", configuration)

            if (crs !== undefined) {
                localVarQueryParameter['crs'] = crs;
            }

            if (features) {
                localVarQueryParameter['features'] = features;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleLayoutsApi - functional programming interface
 * @export
 */
export const VehicleLayoutsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleLayoutsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all available digitalized designs for vehicle-layouts.
         * @summary Returns all available digitalized designs for vehicle-layouts
         * @param {string} [lastChanged] limits result to all designs that have been changed (anything) after passed fully-qualified-date (ISO-8601 with time-zone or offset) can be used to get deltas, if omitted all designs are returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableDesigns(lastChanged?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailableDesignsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.availableDesigns(lastChanged, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns digitalized vehicle-layouts for a particular construction-type [Bauart bzw. Baureihe] and optional layout-id [Redesign, mit grünem Streifem etc.] as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns digitalized vehicle-layouts by construction-type
         * @param {string} constructionType construction-type [Bauart bzw. Baureihe] for vehicle-layout
         * @param {string} layoutID id of vehicle-layout [Redesign, mit grünem Streifem etc.]
         * @param {string} [crs] coordinate reference system, defaults to EPSG:4326 - EPSG:3857 - EPSG:4326
         * @param {Array<string>} [features] filter for feature types to return, if omitted all features are returned - VEHICLE (feature type for vehicle information) - AREA (feature type for area information) - INTERIOR (feature type for interior information) - OPENING (feature type for opening information) - SEAT (feature type for seat information) - POI (feature type for poi information) - ZONE (feature type for zone information)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async byConstructionTypeAndLayoutID(constructionType: string, layoutID: string, crs?: string, features?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleLayoutFeatureCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.byConstructionTypeAndLayoutID(constructionType, layoutID, crs, features, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns digitalized vehicle-layouts for a particular design-id as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns digitalized vehicle-layouts by design-id
         * @param {string} internalDesignID internal design-id representing one particular design
         * @param {string} [crs] coordinate reference system, defaults to EPSG:4326 - EPSG:3857 - EPSG:4326
         * @param {Array<string>} [features] filter for feature types to return, if omitted all features are returned - VEHICLE (feature type for vehicle information) - AREA (feature type for area information) - INTERIOR (feature type for interior information) - OPENING (feature type for opening information) - SEAT (feature type for seat information) - POI (feature type for poi information) - ZONE (feature type for zone information)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async byDesignID(internalDesignID: string, crs?: string, features?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleLayoutFeatureCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.byDesignID(internalDesignID, crs, features, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns digitalized vehicle-layouts for a particular vehicle-id as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns digitalized vehicle-layouts by vehicle-id
         * @param {string} vehicleID id for vehicle (for rail vehicles usually the UIC identification number)
         * @param {string} [crs] coordinate reference system, defaults to EPSG:4326 - EPSG:3857 - EPSG:4326
         * @param {Array<string>} [features] filter for feature types to return, if omitted all features are returned - VEHICLE (feature type for vehicle information) - AREA (feature type for area information) - INTERIOR (feature type for interior information) - OPENING (feature type for opening information) - SEAT (feature type for seat information) - POI (feature type for poi information) - ZONE (feature type for zone information)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async byVehicleID(vehicleID: string, crs?: string, features?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleLayoutFeatureCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.byVehicleID(vehicleID, crs, features, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VehicleLayoutsApi - factory interface
 * @export
 */
export const VehicleLayoutsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleLayoutsApiFp(configuration)
    return {
        /**
         * Returns all available digitalized designs for vehicle-layouts.
         * @summary Returns all available digitalized designs for vehicle-layouts
         * @param {VehicleLayoutsApiAvailableDesignsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableDesigns(requestParameters: VehicleLayoutsApiAvailableDesignsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AvailableDesignsResponse> {
            return localVarFp.availableDesigns(requestParameters.lastChanged, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns digitalized vehicle-layouts for a particular construction-type [Bauart bzw. Baureihe] and optional layout-id [Redesign, mit grünem Streifem etc.] as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns digitalized vehicle-layouts by construction-type
         * @param {VehicleLayoutsApiByConstructionTypeAndLayoutIDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byConstructionTypeAndLayoutID(requestParameters: VehicleLayoutsApiByConstructionTypeAndLayoutIDRequest, options?: AxiosRequestConfig): AxiosPromise<VehicleLayoutFeatureCollection> {
            return localVarFp.byConstructionTypeAndLayoutID(requestParameters.constructionType, requestParameters.layoutID, requestParameters.crs, requestParameters.features, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns digitalized vehicle-layouts for a particular design-id as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns digitalized vehicle-layouts by design-id
         * @param {VehicleLayoutsApiByDesignIDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byDesignID(requestParameters: VehicleLayoutsApiByDesignIDRequest, options?: AxiosRequestConfig): AxiosPromise<VehicleLayoutFeatureCollection> {
            return localVarFp.byDesignID(requestParameters.internalDesignID, requestParameters.crs, requestParameters.features, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns digitalized vehicle-layouts for a particular vehicle-id as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
         * @summary Returns digitalized vehicle-layouts by vehicle-id
         * @param {VehicleLayoutsApiByVehicleIDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byVehicleID(requestParameters: VehicleLayoutsApiByVehicleIDRequest, options?: AxiosRequestConfig): AxiosPromise<VehicleLayoutFeatureCollection> {
            return localVarFp.byVehicleID(requestParameters.vehicleID, requestParameters.crs, requestParameters.features, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for availableDesigns operation in VehicleLayoutsApi.
 * @export
 * @interface VehicleLayoutsApiAvailableDesignsRequest
 */
export interface VehicleLayoutsApiAvailableDesignsRequest {
    /**
     * limits result to all designs that have been changed (anything) after passed fully-qualified-date (ISO-8601 with time-zone or offset) can be used to get deltas, if omitted all designs are returned
     * @type {string}
     * @memberof VehicleLayoutsApiAvailableDesigns
     */
    readonly lastChanged?: string
}

/**
 * Request parameters for byConstructionTypeAndLayoutID operation in VehicleLayoutsApi.
 * @export
 * @interface VehicleLayoutsApiByConstructionTypeAndLayoutIDRequest
 */
export interface VehicleLayoutsApiByConstructionTypeAndLayoutIDRequest {
    /**
     * construction-type [Bauart bzw. Baureihe] for vehicle-layout
     * @type {string}
     * @memberof VehicleLayoutsApiByConstructionTypeAndLayoutID
     */
    readonly constructionType: string

    /**
     * id of vehicle-layout [Redesign, mit grünem Streifem etc.]
     * @type {string}
     * @memberof VehicleLayoutsApiByConstructionTypeAndLayoutID
     */
    readonly layoutID: string

    /**
     * coordinate reference system, defaults to EPSG:4326 - EPSG:3857 - EPSG:4326
     * @type {string}
     * @memberof VehicleLayoutsApiByConstructionTypeAndLayoutID
     */
    readonly crs?: string

    /**
     * filter for feature types to return, if omitted all features are returned - VEHICLE (feature type for vehicle information) - AREA (feature type for area information) - INTERIOR (feature type for interior information) - OPENING (feature type for opening information) - SEAT (feature type for seat information) - POI (feature type for poi information) - ZONE (feature type for zone information)
     * @type {Array<string>}
     * @memberof VehicleLayoutsApiByConstructionTypeAndLayoutID
     */
    readonly features?: Array<string>
}

/**
 * Request parameters for byDesignID operation in VehicleLayoutsApi.
 * @export
 * @interface VehicleLayoutsApiByDesignIDRequest
 */
export interface VehicleLayoutsApiByDesignIDRequest {
    /**
     * internal design-id representing one particular design
     * @type {string}
     * @memberof VehicleLayoutsApiByDesignID
     */
    readonly internalDesignID: string

    /**
     * coordinate reference system, defaults to EPSG:4326 - EPSG:3857 - EPSG:4326
     * @type {string}
     * @memberof VehicleLayoutsApiByDesignID
     */
    readonly crs?: string

    /**
     * filter for feature types to return, if omitted all features are returned - VEHICLE (feature type for vehicle information) - AREA (feature type for area information) - INTERIOR (feature type for interior information) - OPENING (feature type for opening information) - SEAT (feature type for seat information) - POI (feature type for poi information) - ZONE (feature type for zone information)
     * @type {Array<string>}
     * @memberof VehicleLayoutsApiByDesignID
     */
    readonly features?: Array<string>
}

/**
 * Request parameters for byVehicleID operation in VehicleLayoutsApi.
 * @export
 * @interface VehicleLayoutsApiByVehicleIDRequest
 */
export interface VehicleLayoutsApiByVehicleIDRequest {
    /**
     * id for vehicle (for rail vehicles usually the UIC identification number)
     * @type {string}
     * @memberof VehicleLayoutsApiByVehicleID
     */
    readonly vehicleID: string

    /**
     * coordinate reference system, defaults to EPSG:4326 - EPSG:3857 - EPSG:4326
     * @type {string}
     * @memberof VehicleLayoutsApiByVehicleID
     */
    readonly crs?: string

    /**
     * filter for feature types to return, if omitted all features are returned - VEHICLE (feature type for vehicle information) - AREA (feature type for area information) - INTERIOR (feature type for interior information) - OPENING (feature type for opening information) - SEAT (feature type for seat information) - POI (feature type for poi information) - ZONE (feature type for zone information)
     * @type {Array<string>}
     * @memberof VehicleLayoutsApiByVehicleID
     */
    readonly features?: Array<string>
}

/**
 * VehicleLayoutsApi - object-oriented interface
 * @export
 * @class VehicleLayoutsApi
 * @extends {BaseAPI}
 */
export class VehicleLayoutsApi extends BaseAPI {
    /**
     * Returns all available digitalized designs for vehicle-layouts.
     * @summary Returns all available digitalized designs for vehicle-layouts
     * @param {VehicleLayoutsApiAvailableDesignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleLayoutsApi
     */
    public availableDesigns(requestParameters: VehicleLayoutsApiAvailableDesignsRequest = {}, options?: AxiosRequestConfig) {
        return VehicleLayoutsApiFp(this.configuration).availableDesigns(requestParameters.lastChanged, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns digitalized vehicle-layouts for a particular construction-type [Bauart bzw. Baureihe] and optional layout-id [Redesign, mit grünem Streifem etc.] as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
     * @summary Returns digitalized vehicle-layouts by construction-type
     * @param {VehicleLayoutsApiByConstructionTypeAndLayoutIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleLayoutsApi
     */
    public byConstructionTypeAndLayoutID(requestParameters: VehicleLayoutsApiByConstructionTypeAndLayoutIDRequest, options?: AxiosRequestConfig) {
        return VehicleLayoutsApiFp(this.configuration).byConstructionTypeAndLayoutID(requestParameters.constructionType, requestParameters.layoutID, requestParameters.crs, requestParameters.features, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns digitalized vehicle-layouts for a particular design-id as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
     * @summary Returns digitalized vehicle-layouts by design-id
     * @param {VehicleLayoutsApiByDesignIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleLayoutsApi
     */
    public byDesignID(requestParameters: VehicleLayoutsApiByDesignIDRequest, options?: AxiosRequestConfig) {
        return VehicleLayoutsApiFp(this.configuration).byDesignID(requestParameters.internalDesignID, requestParameters.crs, requestParameters.features, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns digitalized vehicle-layouts for a particular vehicle-id as geojson according to RFC7946 (https://datatracker.ietf.org/doc/html/rfc7946).
     * @summary Returns digitalized vehicle-layouts by vehicle-id
     * @param {VehicleLayoutsApiByVehicleIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleLayoutsApi
     */
    public byVehicleID(requestParameters: VehicleLayoutsApiByVehicleIDRequest, options?: AxiosRequestConfig) {
        return VehicleLayoutsApiFp(this.configuration).byVehicleID(requestParameters.vehicleID, requestParameters.crs, requestParameters.features, options).then((request) => request(this.axios, this.basePath));
    }
}



