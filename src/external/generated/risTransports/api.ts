/* tslint:disable */
/* eslint-disable */
/**
 * RIS::Transports
 * ## Info  * powered by DB Systel - [doServices Sirius](https://db.de/do-services-sirius) * powered by [DB Reisendeninformation](https://db-planet.deutschebahn.com/pages/reisendeninformation/apps/content/willkommen) * member of the [RIS-API](https://db.de/ris-api) family, the building kit for traveller informations * for details check out [RIS::Transports](https://api-portal.hub.db.de/db/apis/product/ris-transports) in the DB API Portal   ## Capabilities  ### Vehicle-Sequences  Returns the vehicle-sequence [Wagenreihung] for a departure [Abfahrt] or an arrival [Ankunft] within a journey [Fahrt], meaning:  * the vehicle groups that travel together [Vereinigung], their names and destinations * the sequence of the vehicles and the vehicle type (control car, dining car, passenger car etc.) * the position of the vehicles at the platform / track / sector [Plattform / Gleis / Sektor] and according platform information * existing equipment features [Ausstattungsmerkmale] (boarding aid, toilet, etc.) * flag that indicates whether sequence matches schedule [Bitte beachten Sie die geänderte Wagenreihung] * changes for vehicles within vehicle-sequences [Stärkung, Schwächung, Parktausch etc.]  Additionally, all administration IDs [Verwaltungs ID / Code] the system is able to provide vehicle-sequences for can be queried.  ### Occupancies  Provides occupancy information [Auslastungsinformation] for a journey [Fahrt] and its departures [Abfahrten], if available.  This information can therefore be used to:  * let the travellers know the occupancy of a particular journey [Fahrt] at a particular departure [Abfahrt] * let the travellers know where to stand at the platform in order to board the train at the emptiest vehicle [Fahrgastlenkung beim Einstieg]  ### Vehicles by vehicle-id  Returns all journeys [Fahrten] a vehicle [Fahrzeug] with a particular vehicle-id [usually the UIC-number] travels in for a specific date:  * enables consumers to find the journey a traveller is currently travelling with by the uic-number of a vehicle * can be used to match a particular train to its journey [Zugtaufe]  ### Asynchronous change-notifications  The RIS-API event-system [RIS::Events](https://db-planet.deutschebahn.com/pages/reisendeninformation-ris-api/apps/content/events) can be used to get push-notifications in case information within RIS::Transports changes. This enables use-cases like:  * refreshing ui in case information changes * doing something in your backend in case information changes * caching information and invalidate cache in case information changes  ## Limitations / Known Issues  * vehicle-sequences are limited to 22h ahead and are usually ready at about ~22:30 o\'clock for the next day * vehicle-amenity status is only working for bike spaces for DB Regio Baden-Württemberg, all other amenities don\'t have a status at all * the field `vehicleGroupName` sometimes can contain a string with two vehicle group names splitted by a semicolon e.g RPF200009;RPF47041, instead of one vehicle group name  ## Getting Started  * visit our [documentation](https://ris-api.gitpages.tech.rz.db.de), learn how to [get started with openapi](https://developer-docs.deutschebahn.com/doku/apis/openapi.html)   or how to [get started with asyncapi](https://developer-docs.deutschebahn.com/doku/apis/asyncapi.html) and check out our [coding-examples](https://developer-docs.deutschebahn.com/doku/apis) * bounty hunter, bug finder or just idea creator, we are thirsty to hear from you - get in touch with us by using [DB AnwenderEcho](https://anwenderecho.extranet.deutschebahn.com/ris-api/) or write an [email](mailto:ris-api@deutschebahn.com) 
 *
 * The version of the OpenAPI document: 3.1.1-6
 * Contact: doServices.Sirius.Team@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Status of platform accessibility [Barrierefreiheit] information. - AVAILABLE (accessibility item is available) - NOT_AVAILABLE (accessibility item is not available) - PARTIAL (accessibility item is only partial available, for instance available for 12a but not for 12b and therefore not for 12 in total) - NOT_APPLICABLE (accessibility item is not applicable because it depends on availability of other items, for instance stair mark depends on step free access) - UNKNOWN (no information on availability for accessibility item)
 * @export
 * @enum {string}
 */

export const AccessibilityStatus = {
    Available: 'AVAILABLE',
    NotAvailable: 'NOT_AVAILABLE',
    Partial: 'PARTIAL',
    NotApplicable: 'NOT_APPLICABLE',
    Unknown: 'UNKNOWN'
} as const;

export type AccessibilityStatus = typeof AccessibilityStatus[keyof typeof AccessibilityStatus];


/**
 * Information on the operator [Betreiber] and the administration [Verwaltung] of the journey.
 * @export
 * @interface Administration
 */
export interface Administration {
    /**
     * Unique id of the administration [Verwaltung]. - 8 (S - S-Bahn Berlin) - 19 (EST - EUROSTAR) - 51 (PKP - PKP Intercity) - 53 (DPN - Nahreisezug) - 54 (CD - Ceske Drahy) - 55 (MAV - MAV) - 56 (ZSS - ZSSK) - 71 (REN - RENFE) - 74 (SJ - SJ) - 78 (HZ - HZPP) - 79 (SZ - Slovenske zeleznice) - 80 (DB - DB Fernverkehr AG) - 81 (ÖBB - Österreichische Bundesbahnen) - 82 (CFL - CFL) - 83 (TI - Trenitalia) - 84 (NS - Nederlandse Spoorwegen) - 85 (SBB - SBB) - 86 (DSB - Dänische Staatsbahnen) - 87 (SCF - SNCF) - 88 (SCB - SNCB) - 3018 (THA - THALYS) - 3189 (ARV - ARRIVA vlaky) - 3230 (VBG - vogtlandbahn - Die Länderbahn GmbH DLB) - 3236 (WB - WESTbahn) - 3246 (IC - RegioJet) - 3270 (TN - TRENORD) - 3288 (GW - GW Train Regio) - 3332 (KZC - KZC Doprava s.r.o.) - 3393 (TGV - SNCF Voyages Deutschland) - 3613 (StB - Steiermarkbahn und Bus GmbH) - 80001 (S - S-Bahn Berlin) - 550043 (GyS - GySEV) - 743051 (ST - Snälltåget) - 800151 (DB - DB Regio AG Nordost) - 800153 (DB - DB Regio AG Nordost) - 800154 (DB - DB Regio AG Nordost) - 800155 (DB - DB Regio AG Nordost) - 800156 (DB - DB Regio AG Nordost) - 800157 (DB - DB Regio AG Nordost) - 800158 (DB - DB Regio AG Nordost) - 800159 (DB - DB Regio AG Nordost) - 800160 (DB - DB Regio AG Nordost) - 800161 (DB - DB Regio AG Nordost) - 800163 (DB - DB Regio AG Nordost) - 800165 (DB - DB Regio AG Nordost) - 800166 (DB - DB Regio AG Nordost) - 800201 (DB - DB Regio AG Nord) - 800271 (DB - DB Regio AG Nord) - 800279 (DB - DB Regio AG Nord) - 800292 (DB - DB Regio AG Nord) - 800293 (DB - DB Regio AG Nord) - 800295 (DB - DB Regio AG Nord) - 800310 (DB - DB Regio AG NRW) - 800318 (DB - DB Arriva) - 800333 (DB - DB Regio AG NRW) - 800337 (DB - DB Regio AG NRW) - 800338 (DB - DB Regio AG NRW) - 800348 (DB - DB Regio AG NRW) - 800349 (DB - DB Regio AG NRW) - 800351 (DB - DB Regio AG NRW) - 800352 (DB - DB Regio AG NRW) - 800354 (DB - DB Regio AG NRW) - 800363 (DB - DB Regio AG NRW) - 800413 (DB - DB Regio AG Südost) - 800417 (DB - DB Regio AG Südost) - 800430 (EGB - DB RegioNetz Verkehrs GmbH Erzgebirgsbahn) - 800445 (DB - DB Regio AG Südost) - 800456 (DB - DB Regio AG Südost) - 800469 (DB - DB Regio AG Südost) - 800478 (DB - DB Regio AG Südost) - 800486 (DB - DB Regio AG Südost) - 800487 (DB - DB Regio AG Südost) - 800489 (DB - DB Regio AG Südost) - 800523 (KHB - DB RegioNetz Verkehrs GmbH Kurhessenbahn) - 800528 (S - DB Regio AG S-Bahn Rhein-Main) - 800535 (DB - DB Regio AG Mitte) - 800553 (DB - DB Regio AG Mitte) - 800571 (DB - DB Regio AG Mitte) - 800572 (DB - DB Regio AG Mitte) - 800574 (DB - DB Regio AG Mitte) - 800603 (WFB - DB RegioNetz Verkehrs GmbH Westfrankenbahn) - 800622 (DB - DB Regio AG Baden-Württemberg) - 800631 (DB - DB Regio AG Baden-Württemberg) - 800632 (DB - DB Regio AG Baden-Württemberg) - 800640 (SWX - DB Regio AG Mitte SÜWEX) - 800643 (S - DB Regio AG S-Bahn Stuttgart) - 800647 (DB - DB Regio AG Baden-Württemberg) - 800659 (DB - DB Regio AG Baden-Württemberg) - 800693 (DB - DB Regio AG Baden-Württemberg) - 800694 (DB - DB Regio AG Baden-Württemberg) - 800714 (DB - DB Regio AG Bayern) - 800720 (DB - DB Regio AG Bayern) - 800721 (DB - DB Regio AG Bayern) - 800725 (S - DB Regio AG S-Bahn München) - 800734 (DB - DB Regio AG Bayern) - 800742 (DB - DB Regio AG Bayern) - 800746 (DB - DB Regio AG Bayern) - 800755 (DB - DB Regio AG Bayern) - 800759 (DB - DB Regio AG Bayern) - 800765 (DB - DB Regio AG Bayern) - 800767 (DB - DB Regio AG Bayern) - 800772 (DB - DB Regio AG Bayern) - 800785 (DB - DB Regio AG Bayern) - 800790 (DB - DB Regio AG Bayern) - 801512 (DB - DB Regio AG Mitte) - 801513 (DB - DB Regio AG Mitte) - 801518 (DB - DB Regio AG Mitte) - 801526 (DB - DB Regio AG Mitte) - 801539 (DB - DB Regio AG Mitte) - 801566 (DB - DB Regio AG Mitte) - 801591 (DB - DB Regio AG Mitte) - 801599 (DB - DB Regio AG Mitte) - 810003 (mbs - Montafoner Bahn) - 810005 (ZB - Zillertalbahn) - 810007 (SLB - Salzburger Lokalbahnen) - 810008 (STH - Stern & Hafferl Verkehrs-GmbH) - 810009 (WiL - Wiener Linien) - 810011 (R - Schneebergbahn) - 810017 (NÖV - NÖ Verkehrsorganisations-ges.m.b.H.) - 810021 (NÖV - NÖ Verkehrsorganisations-ges.m.b.H.) - 810023 (NÖV - NÖ Verkehrsorganisations-ges.m.b.H.) - 810024 (P - Waldviertler Schmalspurbahn) - 810025 (SLB - Salzburger Lokalbahnen) - 810028 (GyS - GySEV) - 810031 (STR - Linz Linien AG (Straßenbahn Stadt Linz)) - 810043 (ÖPO - ÖBB-Postbus) - 840037 (Rnt - R-net) - 840052 (Brg - Breng) - 840054 (Vll - Valleilijn) - 840055 (BN - Blauwnet) - 840100 (NS - Nederlandse Spoorwegen) - 840500 (ARR - Arriva Nederland) - 850022 (AB - Appenzeller Bahnen) - 850023 (TPC - Transports Publics du Chablais) - 850029 (MBC - Transports de la région Morges-Bière-Cossonay) - 850031 (BDW - BDWM Transport) - 850032 (BLM - Lauterbrunnen-Mürren) - 850033 (BLS - BLS AG) - 850035 (BOB - Berner Oberland-Bahnen) - 850038 (ASM - Aare Seeland mobil) - 850042 (MVR - Montreux-Vevey-Riviera) - 850043 (CJ - Chemins de fer du Jura) - 850044 (TRN - Transports Publics Neuchâtelois SA) - 850046 (FB - Forchbahn) - 850047 (FLP - Lugano-Ponte Tresa) - 850048 (MGB - Matterhorn Gotthard Bahn (fo)) - 850049 (FAR - Ferrovie Autolinee Regionali Ticinesi) - 850051 (FW - Frauenfeld-Wil) - 850053 (TPF - Transports publics fribourgeois) - 850055 (LEB - Lausanne-Echallens-Bercher) - 850056 (ASM - Aare Seeland mobil) - 850061 (TMR - Transports de Martigny et Régions (mc)) - 850064 (MOB - Montreux-Oberland Bernois) - 850065 (THU - THURBO) - 850066 (NSt - Nyon-St-Cergue-Morez) - 850072 (RhB - Rhätische Bahn) - 850073 (TRN - Transports Publics Neuchâtelois SA) - 850074 (RA - Regionalps) - 850078 (SZU - Sihltal-Zürich-Uetliberg-Bahn) - 850081 (ASM - Aare Seeland mobil) - 850082 (SOB - Schweizerische Südostbahn (sob)) - 850086 (ZB - Zentralbahn) - 850088 (RBS - Regionalverkehr Bern-Solothurn) - 850093 (MGB - Matterhorn Gotthard Bahn (bvz)) - 850096 (WSB - Wynental-und Suhrental-Bahn) - 850097 (TRA - Transports Vallée de Joux-Yverdon-Ste-Croix) - 850193 (URh - Untersee und Rhein) - 850195 (SBS - Schweizerische Bodensee-Schiffahrtsgesellschaft) - 850360 (BSB - Bodensee-Schiffsbetriebe) - 850371 (BC - Société coopérative du Chemin de fer - Musée Blonay-Chamby) - 850801 (PAG - PostAuto Schweiz) - 850846 (RVS - Regionale Verkehrsbetriebe Schaffhausen) - 853186 (SZR - Schiff Eglisau-Tössegg) - 853271 (ANA - Association neuchâteloise des Amis du Tramway ANAT) - 857200 (SBB - SBB) - 857206 (SBB - SBB) - 857210 (SBB - SBB) - 857221 (THU - THURBO) - 857231 (SBB - SBB) - 859014 (VDB - Verein Dampfbahn Bern) - 859999 (SBB - SBB) - 860087 (ARR - Arriva Danmark) - 861002 (DSB - Dänische Staatsbahnen) - 8006000 (DB - DB Regio AG Baden-Württemberg) - 0S (S - S-Bahn Hamburg) - 51KD (KD - Koleje Dolnoslaskie) - 51PR (PR - Polregio) - 51PR-Q (PR - Polregio) - 51PR-R (PR - Polregio) - 51PR-S (PR - Polregio) - 8002A3 (DB - DB Regio AG Nord) - 8002B5 (DB - DB Regio AG Nord) - 8003A5 (DB - DB Regio AG NRW) - 8003G1 (DB - DB Regio AG NRW) - 8003G2 (DB - DB Regio AG NRW) - 8003H5 (DB - DB Regio AG NRW) - 8003L1 (DB - DB Regio AG NRW) - 8003L2 (DB - DB Regio AG NRW) - 8003RL (DB - DB Regio AG NRW) - 8003S (DB - DB Regio AG NRW) - 8004A9 (DB - DB Regio AG Südost) - 8004L1 (DB - DB Regio AG Südost) - 8004NT (DB - DB Regio AG Südost) - 8004OB (OBS - DB RegioNetz Verkehrs GmbH Oberweißbacher Berg+Schwarzatalbahn) - 8005A4 (DB - DB Regio AG Mitte) - 8005KG (DB - DB Regio AG Mitte) - 8005MW (DB - DB Regio AG Mitte) - 8005ND (DB - DB Regio AG Mitte) - 8005SV (DB - Rhein-Mosel-Bus Ahrweiler) - 8006A7 (WFB - DB RegioNetz Verkehrs GmbH Westfrankenbahn) - 8006C4 (DB - DB Regio AG Baden-Württemberg) - 8006C5 (DB - DB Regio AG Baden-Württemberg) - 8006C6 (DB - DB Regio AG Baden-Württemberg) - 8006D1 (DB - DB Regio AG Baden-Württemberg) - 8006D2 (DB - DB Regio AG Baden-Württemberg) - 8006D6 (DB - DB Regio AG Baden-Württemberg) - 8006D8 (DB - DB Regio AG Baden-Württemberg) - 8006SH (DB - DB Regio AG Baden-Württemberg) - 8007D4 (DB - DB Regio AG Bayern) - 8007D5 (DB - DB Regio AG Bayern) - 8007DU (DB - DB Regio AG Bayern) - 8007H1 (DB - DB Regio AG Bayern) - 8007H2 (DB - DB Regio AG Bayern) - 8013D (SOB - DB RegioNetz Verkehrs GmbH Südostbayernbahn) - 8013E (SOB - DB RegioNetz Verkehrs GmbH Südostbayernbahn) - 8015A1 (DB - DB Regio AG Mitte) - 8015A6 (DB - DB Regio AG Mitte) - 8015FR (DB - DB Regio AG Mitte) - 8015H9 (DB - DB Regio AG Mitte) - 80SEV (DB - DB Fernverkehr AG) - 80SSP (D - Sylt Shuttle Plus) - 80TRI (EC - DB/SBB/TI) - 81GE43 (DPN - Nahreisezug) - 857LEX (LEX - LEX) - 85DBSH (SBB - SBB) - A0 (AKN - AKN Eisenbahn GmbH) - A5 (VEN - Rhenus Veniro) - A6 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6FEX (DPN - Nahreisezug) - A6S1 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S11 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S12 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S31 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S32 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S34 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S4 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S41 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S42 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S5 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S51 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S52 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S6 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S7 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S71 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S8 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S81 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A8N (ALX - alex - Die Länderbahn GmbH DLB) - A9 (ag - agilis) - aav006 (DPN - Nahreisezug) - aavARN (DPN - Nahreisezug) - aavARR (DPN - Nahreisezug) - aavASE (DPN - Nahreisezug) - aavDKB (DPN - Nahreisezug) - aavNET (DPN - Nahreisezug) - aavTEC (DPN - Nahreisezug) - AB (ABR - SWEG Bahn Stuttgart GmbH) - ABIRE (IRE - SWEG Bahn Stuttgart GmbH) - ABRB (RB - SWEG Bahn Stuttgart GmbH) - ABRE (RE - SWEG Bahn Stuttgart GmbH) - ak_AK (AK - Autokraft) - ak_DRN (DIB - Dithmarschenbus (DB Regio Bus Nord GmbH)) - ak_SVG (SVG - Sylter Verkehrsgesellschaft) - ak_SVL (DPN - Nahreisezug) - ak_SWN (DPN - Nahreisezug) - ak_VIN (DPN - Nahreisezug) - ak_VKP (DPN - Nahreisezug) - ak_VSF (DPN - Nahreisezug) - akAK_A (DPN - Nahreisezug) - akAKTI (DPN - Nahreisezug) - akDRNA (DPN - Nahreisezug) - akECKE (DPN - Nahreisezug) - akKVGK (DPN - Nahreisezug) - akROH (DPN - Nahreisezug) - akSFKK (DPN - Nahreisezug) - akTRAN (DPN - Nahreisezug) - akVINA (DPN - Nahreisezug) - akWDR (DPN - Nahreisezug) - AL (DWE - Dessau-Wörlitzer Eisenbahn) - ald012 (DPN - Nahreisezug) - ald020 (DPN - Nahreisezug) - ald021 (DPN - Nahreisezug) - ald022 (DPN - Nahreisezug) - ald023 (DPN - Nahreisezug) - ald024 (DPN - Nahreisezug) - ald025 (DPN - Nahreisezug) - ald030 (DPN - Nahreisezug) - ald044 (DPN - Nahreisezug) - ald046 (DPN - Nahreisezug) - ald065 (DPN - Nahreisezug) - ald067 (DPN - Nahreisezug) - ald069 (DPN - Nahreisezug) - ald072 (DPN - Nahreisezug) - ald073 (DPN - Nahreisezug) - ald075 (DPN - Nahreisezug) - ald077 (DPN - Nahreisezug) - ald083 (DPN - Nahreisezug) - ald084 (DPN - Nahreisezug) - ald087 (DPN - Nahreisezug) - ald091 (DPN - Nahreisezug) - ald093 (DPN - Nahreisezug) - ald094 (DPN - Nahreisezug) - ald095 (DPN - Nahreisezug) - ald096 (DPN - Nahreisezug) - ald099 (DPN - Nahreisezug) - AM (ABR - Abellio Rail Mitteldeutschland GmbH) - AMHBX (HBX - Abellio Rail Mitteldeutschland GmbH) - AMRB (RB - Abellio Rail Mitteldeutschland GmbH) - AMRE (RE - Abellio Rail Mitteldeutschland GmbH) - AMS (S - Abellio Rail Mitteldeutschland GmbH) - aoeBus (DPN - Nahreisezug) - apg__1 (DPN - Nahreisezug) - avv009 (DPN - Nahreisezug) - avvBus (DPN - Nahreisezug) - B1 (DB - DB Regio AG Nord) - B1EDZ (DPN - Nahreisezug) - B2 (DB - DB Regio AG NRW) - B3 (P - Brohltalbahn) - B4 (S - DB Regio AG S-Bahn Rhein-Main) - B5 (DB - DB Regio AG Mitte) - B6 (DB - DB Regio AG Baden-Württemberg) - B7 (DPN - Nahreisezug) - bacBus (DPN - Nahreisezug) - bambus (DPN - Nahreisezug) - bayaut (DPN - Nahreisezug) - BB (DB - DB Regio AG Nordost) - bcl001 (DPN - Nahreisezug) - BD (SDG - SDG Sächsische Dampfeisenbahngesellschaft mbH) - BE (BE - Bentheimer Eisenbahn) - bod000 (DPN - Nahreisezug) - bod001 (DPN - Nahreisezug) - bod002 (DPN - Nahreisezug) - bod003 (DPN - Nahreisezug) - bod004 (DPN - Nahreisezug) - bod005 (DPN - Nahreisezug) - bod006 (DPN - Nahreisezug) - bod008 (DPN - Nahreisezug) - bod012 (DPN - Nahreisezug) - bod013 (DPN - Nahreisezug) - bod014 (DPN - Nahreisezug) - bod015 (DPN - Nahreisezug) - bod018 (DPN - Nahreisezug) - bod019 (DPN - Nahreisezug) - bod020 (DPN - Nahreisezug) - bod031 (DPN - Nahreisezug) - BurBus (DPN - Nahreisezug) - BW (DB - DB Regio AG Nordost) - byr001 (DPN - Nahreisezug) - C6 (KTB - Kandertalbahn) - C8 (LEO - Chiemgauer Lokalbahn) - CD (CB - City-Bahn Chemnitz) - cha016 (DPN - Nahreisezug) - cobBus (DPN - Nahreisezug) - css002 (P - Chiemseebahn) - csscss (DPN - Nahreisezug) - cw001 (DPN - Nahreisezug) - cw010 (DPN - Nahreisezug) - CX (MRB - Mitteldeutsche Regiobahn) - CXRB (RB - Mitteldeutsche Regiobahn) - CXRE (RE - Mitteldeutsche Regiobahn) - D3 (RTB - Rurtalbahn) - daf005 (DPN - Nahreisezug) - dgfBus (DPN - Nahreisezug) - drbBUS (DPN - Nahreisezug) - E0 (EVB - EVB ELBE-WESER GmbH) - E3 (P - Kasbachtalbahn) - EB (RB - Erfurter Bahn GmbH) - ED (FEG - Freiberger Eisenbahngesellschaft) - estbus (DPN - Nahreisezug) - etgBus (DPN - Nahreisezug) - EX (RE - Erfurter Bahn GmbH) - F1 (DPN - Nahreisezug) - F7 (RB - Bodensee-Oberschwaben-Bahn) - fds002 (DPN - Nahreisezug) - fdsBus (DPN - Nahreisezug) - FisBus (DPN - Nahreisezug) - FLX10 (FLX - FlixTrain) - FLX11 (FLX - FlixTrain) - FLX15 (FLX - FlixTrain) - FLX20 (FLX - FlixTrain) - FLX30 (FLX - FlixTrain) - FLX35 (FLX - FlixTrain) - frg001 (DPN - Nahreisezug) - fuebus (DPN - Nahreisezug) - fwzBus (DPN - Nahreisezug) - GA (GA - Go-Ahead Baden-Württemberg GmbH) - GAIRE (IRE - Go-Ahead Baden-Württemberg GmbH) - GAMEX (MEX - Go-Ahead Baden-Württemberg GmbH) - GARB (RB - Go-Ahead Baden-Württemberg GmbH) - GARE (RE - Go-Ahead Baden-Württemberg GmbH) - ge2GEV (DPN - Nahreisezug) - ge3GEV (DPN - Nahreisezug) - geiBus (DPN - Nahreisezug) - gf2001 (DPN - Nahreisezug) - gfn011 (DPN - Nahreisezug) - gfn012 (DPN - Nahreisezug) - gfn015 (DPN - Nahreisezug) - gfn020 (DPN - Nahreisezug) - ghuBus (DPN - Nahreisezug) - grhBus (DPN - Nahreisezug) - GY (GA - Go-Ahead Bayern GmbH) - GYRB (RB - Go-Ahead Bayern GmbH) - GYRE (RE - Go-Ahead Bayern GmbH) - H4 (RT - RegioTram) - H6 (HzL - Hohenzollerische Landesbahn (SWEG)) - H7 (HzL - Hohenzollerische Landesbahn (SWEG)) - hggBus (DPN - Nahreisezug) - HL (HSB - Harzer Schmalspurbahn) - hnv030 (DPN - Nahreisezug) - hnv031 (DPN - Nahreisezug) - hnv034 (DPN - Nahreisezug) - hnv050 (DPN - Nahreisezug) - hof004 (DPN - Nahreisezug) - hvv001 (DPN - Nahreisezug) - hvvDAH (DPN - Nahreisezug) - hvvHAD (DPN - Nahreisezug) - hvvHHA (DPN - Nahreisezug) - hvvHOX (DPN - Nahreisezug) - hvvKVI (DPN - Nahreisezug) - hvvLIZ (DPN - Nahreisezug) - hvvRAO (DPN - Nahreisezug) - hvvRMV (DPN - Nahreisezug) - hvvVHH (DPN - Nahreisezug) - hvvVLP (DPN - Nahreisezug) - invBus (DPN - Nahreisezug) - K4 (HLB - HLB Hessenbahn GmbH) - K4RB (HLB - HLB Hessenbahn GmbH) - K4RE (HLB - HLB Hessenbahn GmbH) - K6 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - KD (KD - Köln-Düsseldorfer Deutsche Rheinschifffahrt GmbH) - kis001 (DPN - Nahreisezug) - kolbus (DPN - Nahreisezug) - kraBus (DPN - Nahreisezug) - krgBus (DPN - Nahreisezug) - kulBus (DPN - Nahreisezug) - kvg001 (DPN - Nahreisezug) - kvv002 (DPN - Nahreisezug) - kvv003 (DPN - Nahreisezug) - kvv004 (DPN - Nahreisezug) - kvv006 (DPN - Nahreisezug) - kvv010 (DPN - Nahreisezug) - kvv011 (DPN - Nahreisezug) - kvv012 (DPN - Nahreisezug) - kvv015 (DPN - Nahreisezug) - kvv017 (DPN - Nahreisezug) - kvv021 (DPN - Nahreisezug) - kvv023 (DPN - Nahreisezug) - kvv024 (DPN - Nahreisezug) - kvv025 (DPN - Nahreisezug) - kvv027 (DPN - Nahreisezug) - kvv028 (DPN - Nahreisezug) - kvv030 (DPN - Nahreisezug) - kvv041 (DPN - Nahreisezug) - kvv22E (DPN - Nahreisezug) - kvvFEX (DPN - Nahreisezug) - L7 (SBB - SBB GmbH) - L8 (BRB - Bayerische Regiobahn) - lamBus (DPN - Nahreisezug) - lanGEV (DPN - Nahreisezug) - LD (TL - trilex  - Die Länderbahn GmbH DLB) - LDTLX (TLX - trilex-express - Die Länderbahn GmbH DLB) - lklGEV (DPN - Nahreisezug) - M1 (P - Museumsbahn) - M2 (S - REGIOBAHN) - M2RE (R - REGIOBAHN) - M4 (VSE - Verein Sächsischer Eisenbahnfreunde) - M8 (BRB - Bayerische Regiobahn) - M9 (MSB - Mainschleifenbahn) - marmar (DPN - Nahreisezug) - marovf (DPN - Nahreisezug) - marrbk (DPN - Nahreisezug) - mvgb10 (DPN - Nahreisezug) - mvgb14 (DPN - Nahreisezug) - mvgb15 (DPN - Nahreisezug) - mvgb16 (DPN - Nahreisezug) - mvv099 (DPN - Nahreisezug) - mvvEBU (DPN - Nahreisezug) - mvvRBU (DPN - Nahreisezug) - mvvRFB (DPN - Nahreisezug) - MW (MBB - Mecklenburgische Bäderbahn Molli) - mzbBUS (DPN - Nahreisezug) - N0 (neg - Norddeutsche Eisenbahn Gesellschaft) - N1 (NWB - NordWestBahn) - N2 (NWB - NordWestBahn) - N4 (RB - cantus Verkehrsgesellschaft) - N4RE (RE - cantus Verkehrsgesellschaft) - N6 (SWE - Südwestdeutsche Landesverkehrs-GmbH) - N8 (P - BayernBahn GmbH) - nas001 (DPN - Nahreisezug) - nas003 (DPN - Nahreisezug) - nasBLK (DPN - Nahreisezug) - nasBOE (DPN - Nahreisezug) - nasDVG (DPN - Nahreisezug) - nasFWL (DPN - Nahreisezug) - nasHAB (DPN - Nahreisezug) - nasHAT (DPN - Nahreisezug) - nasHVB (DPN - Nahreisezug) - nasHVG (DPN - Nahreisezug) - nasKSB (DPN - Nahreisezug) - nasLVB (DPN - Nahreisezug) - nasLVT (DPN - Nahreisezug) - nasMBB (DPN - Nahreisezug) - nasMBT (DPN - Nahreisezug) - nasMQ (DPN - Nahreisezug) - nasNJL (DPN - Nahreisezug) - nasNTB (DPN - Nahreisezug) - nasOBS (DPN - Nahreisezug) - nasOVH (DPN - Nahreisezug) - nasRBM (DPN - Nahreisezug) - nasRL (DPN - Nahreisezug) - nasSAW (DPN - Nahreisezug) - nasSDL (DPN - Nahreisezug) - nasTHU (DPN - Nahreisezug) - nasVET (DPN - Nahreisezug) - nasVGS (DPN - Nahreisezug) - nasZel (DPN - Nahreisezug) - NB (RB - NEB Niederbarnimer Eisenbahn) - NBRB12 (RB - NEB Niederbarnimer Eisenbahn) - NBRB25 (RB - NEB Niederbarnimer Eisenbahn) - NBRB26 (RB - NEB Niederbarnimer Eisenbahn) - NBRB27 (RB - NEB Niederbarnimer Eisenbahn) - NBRB35 (RB - NEB Niederbarnimer Eisenbahn) - NBRB36 (RB - NEB Niederbarnimer Eisenbahn) - NBRB54 (RB - NEB Niederbarnimer Eisenbahn) - NBRB60 (RB - NEB Niederbarnimer Eisenbahn) - NBRB61 (RB - NEB Niederbarnimer Eisenbahn) - NBRB62 (RB - NEB Niederbarnimer Eisenbahn) - NBRB63 (RB - NEB Niederbarnimer Eisenbahn) - nvpBUS (DPN - Nahreisezug) - NWBus (NWB - NordWestBahn) - NX (NX - National Express) - NXRB (RB - National Express) - NXRE (RE - National Express) - NY (MSM - MSM Partyzug) - NYUEX (UEX - Urlaubs-Express) - NZ (RE - DB Fernverkehr AG) - O0 (NBE - Nordbahn Eisenbahngesellschaft) - O7 (ÖBA - Öchsle-Bahn-Betriebsgesellschaft mbH) - O9 (OPB - oberpfalzbahn - Die Länderbahn GmbH DLB) - O9X (OPX - oberpfalz-express - Die Länderbahn GmbH DLB) - OD (SOE - Sächsisch-Oberlausitzer Eisenbahngesellschaft) - omp001 (DPN - Nahreisezug) - omp003 (DPN - Nahreisezug) - omp007 (DPN - Nahreisezug) - omp014 (DPN - Nahreisezug) - omp022 (DPN - Nahreisezug) - omp024 (DPN - Nahreisezug) - omp033 (DPN - Nahreisezug) - omp035 (DPN - Nahreisezug) - omp043 (DPN - Nahreisezug) - omp047 (DPN - Nahreisezug) - omp048 (DPN - Nahreisezug) - omp050 (DPN - Nahreisezug) - omp051 (DPN - Nahreisezug) - omp052 (DPN - Nahreisezug) - omp053 (DPN - Nahreisezug) - omp054 (DPN - Nahreisezug) - omp055 (DPN - Nahreisezug) - omp056 (DPN - Nahreisezug) - omp057 (DPN - Nahreisezug) - omp058 (DPN - Nahreisezug) - omp059 (DPN - Nahreisezug) - omp062 (DPN - Nahreisezug) - omp063 (DPN - Nahreisezug) - omp065 (DPN - Nahreisezug) - omp066 (DPN - Nahreisezug) - omp067 (DPN - Nahreisezug) - omp069 (DPN - Nahreisezug) - omp070 (DPN - Nahreisezug) - omp071 (DPN - Nahreisezug) - omp072 (DPN - Nahreisezug) - omp073 (DPN - Nahreisezug) - omp074 (DPN - Nahreisezug) - omp075 (DPN - Nahreisezug) - omp077 (DPN - Nahreisezug) - omp079 (DPN - Nahreisezug) - omp085 (DPN - Nahreisezug) - omp086 (DPN - Nahreisezug) - omp088 (DPN - Nahreisezug) - omp092 (DPN - Nahreisezug) - omp093 (DPN - Nahreisezug) - omp094 (DPN - Nahreisezug) - omp095 (DPN - Nahreisezug) - omp096 (DPN - Nahreisezug) - omp098 (DPN - Nahreisezug) - omp099 (DPN - Nahreisezug) - omsBus (DPN - Nahreisezug) - ova002 (DPN - Nahreisezug) - ova035 (DPN - Nahreisezug) - ovaOVA (DPN - Nahreisezug) - ovfOVF (DPN - Nahreisezug) - OWBus (OE - Ostdeutsche Eisenbahn GmbH) - owl020 (DPN - Nahreisezug) - owl021 (DPN - Nahreisezug) - owl022 (DPN - Nahreisezug) - owl023 (DPN - Nahreisezug) - owl024 (DPN - Nahreisezug) - owl025 (DPN - Nahreisezug) - owl026 (DPN - Nahreisezug) - owl027 (DPN - Nahreisezug) - owl028 (DPN - Nahreisezug) - owl029 (DPN - Nahreisezug) - owl031 (STB - moBiel GmbH) - owl032 (DPN - Nahreisezug) - owl038 (DPN - Nahreisezug) - owl039 (DPN - Nahreisezug) - owl040 (DPN - Nahreisezug) - owl041 (DPN - Nahreisezug) - owl042 (DPN - Nahreisezug) - owl043 (DPN - Nahreisezug) - owl044 (DPN - Nahreisezug) - owl045 (DPN - Nahreisezug) - owl049 (DPN - Nahreisezug) - owl050 (DPN - Nahreisezug) - owl051 (DPN - Nahreisezug) - owl052 (DPN - Nahreisezug) - owl053 (DPN - Nahreisezug) - owl054 (DPN - Nahreisezug) - owl059 (DPN - Nahreisezug) - OWRB (RB - Ostdeutsche Eisenbahn GmbH) - OWRB13 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB14 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB15 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB19 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB33 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB46 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB51 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB64 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB65 (RB - Ostdeutsche Eisenbahn GmbH) - OWRE (RE - Ostdeutsche Eisenbahn GmbH) - OWRE2 (RE - Ostdeutsche Eisenbahn GmbH) - OWRE4 (RE - Ostdeutsche Eisenbahn GmbH) - pafBus (DPN - Nahreisezug) - PB (RB - Hanseatische Eisenbahn GmbH) - pbaATT (DPN - Nahreisezug) - pbaitr (DPN - Nahreisezug) - pbaKB (ÖPO - ÖBB-Postbus) - pbaVVT (DPN - Nahreisezug) - pbaW3 (DPN - Nahreisezug) - pbaWR (ÖPO - ÖBB-Postbus) - prg091 (DPN - Nahreisezug) - R0 (ENO - enno) - R1 (ME - metronom) - R2 (ERB - eurobahn) - R2RB (RB - eurobahn) - R2RE (RE - eurobahn) - R4 (VIA - VIAS Rail GmbH) - R4NRN (VIA - VIAS Rail GmbH) - R4RB35 (VIA - VIAS Rail GmbH) - R4RH (VIA - VIAS GmbH) - R4S7 (VIA - VIAS Rail GmbH) - R4WEST (VIA - VIAS Rail GmbH) - R7 (HzL - Hohenzollerische Landesbahn (SWEG)) - rabRAB (RAB - Regionalverkehr Alb-Bodensee) - rbgAST (SBG - Südbadenbus) - rbgBBO (DPN - Nahreisezug) - rbgBER (DPN - Nahreisezug) - rbgBRN (BRN - Busverkehr Rhein-Neckar) - rbgBVH (DPN - Nahreisezug) - rbgFAB (DPN - Nahreisezug) - rbgFMO (FMO - Friedrich Müller Omnibusunternehmen GmbH) - rbgHMO (DPN - Nahreisezug) - rbgKNU (DPN - Nahreisezug) - rbgOVZ (DPN - Nahreisezug) - rbgRBG (DPN - Nahreisezug) - rbgRBS (RBS - Regiobus Stuttgart) - rbgRVS (RVS - Südwestbus) - rbgRVs (RVS - Südwestbus) - rbgSBG (SBG - Südbadenbus) - rbgWMR (DPN - Nahreisezug) - rboMB (DPN - Nahreisezug) - rbpORN (ORN - ORN Omnibusverkehr Rhein-Nahe GmbH (Rhein-Nahe-Bus)) - rbpRMA (DB - Rhein-Mosel-Bus Ahrweiler) - rbpRMB (DB - RMB Rhein-Mosel-Bus) - rbpRPB (RPB - Rheinpfalzbus) - rbpRU1 (DPN - Nahreisezug) - rbpRU2 (DPN - Nahreisezug) - rbpSAA (DPN - Nahreisezug) - rbpSWM (DB - DB Regio Bus Mitte) - rbr002 (DPN - Nahreisezug) - rbr003 (DPN - Nahreisezug) - rbr004 (DPN - Nahreisezug) - rbrBOS (DPN - Nahreisezug) - rbrOST (DPN - Nahreisezug) - rbrSBE (DPN - Nahreisezug) - rbrSEV (DPN - Nahreisezug) - rbrSNB (DPN - Nahreisezug) - RC (AZS - AUTOZUG Sylt) - RD (VBG - vogtlandbahn - Die Länderbahn GmbH DLB) - rmbwug (DPN - Nahreisezug) - rmpREB (DPN - Nahreisezug) - rmpRSG (DPN - Nahreisezug) - rmpUBB (DPN - Nahreisezug) - rmtEVA (DPN - Nahreisezug) - rmtEWB (DPN - Nahreisezug) - rmtFiS (DPN - Nahreisezug) - rmtGVB (DPN - Nahreisezug) - rmtIOV (DPN - Nahreisezug) - rmtJES (DPN - Nahreisezug) - rmtJNV (DPN - Nahreisezug) - rmtKOM (DPN - Nahreisezug) - rmtLWW (DPN - Nahreisezug) - rmtMBB (DPN - Nahreisezug) - rmtMKI (DPN - Nahreisezug) - rmtNDH (DPN - Nahreisezug) - rmtOVG (DPN - Nahreisezug) - rmtPVG (DPN - Nahreisezug) - rmtRBM (DPN - Nahreisezug) - rmtSal (DPN - Nahreisezug) - rmtSNG (DPN - Nahreisezug) - rmtSWG (DPN - Nahreisezug) - rmtTWS (DPN - Nahreisezug) - rmtVHO (DPN - Nahreisezug) - rmtVLG (DPN - Nahreisezug) - rmtVLO (DPN - Nahreisezug) - rmtVUS (DPN - Nahreisezug) - rmtVUW (DPN - Nahreisezug) - rmtVWG (DPN - Nahreisezug) - rmtVWO (DPN - Nahreisezug) - rmtWER (DPN - Nahreisezug) - rmtWGT (DPN - Nahreisezug) - rmv001 (DPN - Nahreisezug) - rmv007 (DPN - Nahreisezug) - rmv019 (DPN - Nahreisezug) - rmv020 (DPN - Nahreisezug) - rmv031 (DPN - Nahreisezug) - rmv045 (DPN - Nahreisezug) - rmv053 (DPN - Nahreisezug) - rmv061 (DPN - Nahreisezug) - rmv087 (DPN - Nahreisezug) - rmv099 (DPN - Nahreisezug) - rmv106 (DPN - Nahreisezug) - rmv117 (DPN - Nahreisezug) - rmv156 (DPN - Nahreisezug) - rmv158 (DPN - Nahreisezug) - rmv162 (DPN - Nahreisezug) - rmv163 (DPN - Nahreisezug) - rmv165 (DPN - Nahreisezug) - rmv168 (DPN - Nahreisezug) - rmv196 (DPN - Nahreisezug) - rmv211 (DPN - Nahreisezug) - rmv218 (DPN - Nahreisezug) - rmv222 (DPN - Nahreisezug) - rmv223 (DPN - Nahreisezug) - rmv224 (DPN - Nahreisezug) - rmv234 (DPN - Nahreisezug) - rmv238 (DPN - Nahreisezug) - rmv242 (DPN - Nahreisezug) - rmv243 (DPN - Nahreisezug) - rmv251 (DPN - Nahreisezug) - rmv254 (DPN - Nahreisezug) - rmv255 (DPN - Nahreisezug) - rmv257 (DPN - Nahreisezug) - rmv258 (DPN - Nahreisezug) - rmv260 (DPN - Nahreisezug) - rmv264 (DPN - Nahreisezug) - rmv265 (DPN - Nahreisezug) - rmv269 (DPN - Nahreisezug) - rmv272 (DPN - Nahreisezug) - rmv275 (DPN - Nahreisezug) - rmv277 (DPN - Nahreisezug) - rmv278 (DPN - Nahreisezug) - rmv282 (DPN - Nahreisezug) - rmv283 (DPN - Nahreisezug) - rmv284 (DPN - Nahreisezug) - rmv289 (DPN - Nahreisezug) - rmv290 (DPN - Nahreisezug) - rmv293 (DPN - Nahreisezug) - rmv294 (DPN - Nahreisezug) - rmv295 (DPN - Nahreisezug) - rmv297 (DPN - Nahreisezug) - rmv301 (DPN - Nahreisezug) - rmv304 (DPN - Nahreisezug) - rmv305 (DPN - Nahreisezug) - rmv306 (DPN - Nahreisezug) - rmv307 (DPN - Nahreisezug) - rmv308 (DPN - Nahreisezug) - rmv309 (DPN - Nahreisezug) - rmv316 (DPN - Nahreisezug) - rmv317 (DPN - Nahreisezug) - rmv319 (DPN - Nahreisezug) - rmv322 (DPN - Nahreisezug) - rmv323 (DPN - Nahreisezug) - rmv333 (DPN - Nahreisezug) - rmv392 (DPN - Nahreisezug) - rmv394 (DPN - Nahreisezug) - rmv395 (DPN - Nahreisezug) - rmv396 (DPN - Nahreisezug) - rmv397 (DPN - Nahreisezug) - rmv398 (DPN - Nahreisezug) - rmv399 (DPN - Nahreisezug) - rmv400 (DPN - Nahreisezug) - rmv401 (DPN - Nahreisezug) - rmv403 (DPN - Nahreisezug) - rmv404 (DPN - Nahreisezug) - rmv405 (DPN - Nahreisezug) - rmv406 (DPN - Nahreisezug) - rmv408 (DPN - Nahreisezug) - rmv412 (DPN - Nahreisezug) - rmv413 (DPN - Nahreisezug) - rmvALV (DPN - Nahreisezug) - rmvARG (DPN - Nahreisezug) - rmvBBW (DPN - Nahreisezug) - rmvBEC (DPN - Nahreisezug) - rmvCBU (DPN - Nahreisezug) - rmvDBR (DPN - Nahreisezug) - rmvERL (DPN - Nahreisezug) - rmvESE (DPN - Nahreisezug) - rmvFBB (DPN - Nahreisezug) - rmvFGR (DPN - Nahreisezug) - rmvFRI (DPN - Nahreisezug) - rmvFro (DPN - Nahreisezug) - rmvFSB (DPN - Nahreisezug) - rmvFUL (DPN - Nahreisezug) - rmvGBG (DPN - Nahreisezug) - rmvGIB (DPN - Nahreisezug) - rmvHEB (DPN - Nahreisezug) - rmvHGS (DPN - Nahreisezug) - rmvHLB (DPN - Nahreisezug) - rmvHTR (DPN - Nahreisezug) - rmvJUN (DPN - Nahreisezug) - rmvKAE (DPN - Nahreisezug) - rmvKOF (DPN - Nahreisezug) - rmvKRT (DPN - Nahreisezug) - rmvLGG (DPN - Nahreisezug) - rmvMUL (DPN - Nahreisezug) - rmvNVG (DPN - Nahreisezug) - rmvPoh (DPN - Nahreisezug) - rmvRAC (DPN - Nahreisezug) - rmvREV (DPN - Nahreisezug) - rmvRIN (DPN - Nahreisezug) - rmvRTO (DPN - Nahreisezug) - rmvRTV (DPN - Nahreisezug) - rmvSBB (DPN - Nahreisezug) - rmvSBO (DPN - Nahreisezug) - rmvSFB (DPN - Nahreisezug) - rmvSIL (DPN - Nahreisezug) - rmvSLM (DPN - Nahreisezug) - rmvSWF (DPN - Nahreisezug) - rmvSWK (DPN - Nahreisezug) - rmvSWN (DPN - Nahreisezug) - rmvSWR (DPN - Nahreisezug) - rmvTRD (DPN - Nahreisezug) - rmvVBB (DPN - Nahreisezug) - rmvVES (DPN - Nahreisezug) - rmvVIL (DPN - Nahreisezug) - rmvVLD (DPN - Nahreisezug) - rmvVUW (DPN - Nahreisezug) - rmvWB (DPN - Nahreisezug) - rmvWIN (DPN - Nahreisezug) - rmvWIR (DPN - Nahreisezug) - rmvWIS (DPN - Nahreisezug) - rmvWZV (DPN - Nahreisezug) - rohBus (DPN - Nahreisezug) - RS (RE - Regionalverkehre Start Deutschland GmbH) - RSNM (RB - Regionalverkehre Start Deutschland GmbH (Start Niedersachsen-Mitte)) - RSTN (STN - Regionalverkehre Start Deutschland GmbH (Start Taunus)) - RSUE (RE - Regionalverkehre Start Deutschland GmbH (Start Unterelbe)) - rvgRVG (DPN - Nahreisezug) - rvoRVO (RVO - Regionalverkehr Oberbayern) - rvvRVV (DPN - Nahreisezug) - RW (PRE - Pressnitztalbahn) - S0 (DPN - Nahreisezug) - S1 (DPN - Nahreisezug) - S3 (SWB - Stadtwerke Bonn) - S6 (SWE - SWEG Südwestdeutsche Landesverkehrs-GmbH) - S7 (DPN - Nahreisezug) - S9 (ag - agilis) - SAB (SAB - Schwäbische Alb-Bahn) - SAD003 (SAD - Vinschgaubahn) - sadBUS (DPN - Nahreisezug) - SB (RB - Süd-Thüringen-Bahn GmbH) - sbpMU (DPN - Nahreisezug) - sbpRW (DPN - Nahreisezug) - sbpSK (DPN - Nahreisezug) - SBSBUS (DPN - Nahreisezug) - sbsbus (DPN - Nahreisezug) - SBSIRE (IRE - SWEG Bahn Stuttgart GmbH) - SBSMEX (MEX - SWEG Bahn Stuttgart GmbH) - SBSRB (RB - SWEG Bahn Stuttgart GmbH) - SBSRE (RE - SWEG Bahn Stuttgart GmbH) - SBX (RE - Süd-Thüringen-Bahn GmbH) - SD (DB - DB Regio AG Südost) - smrBus (DPN - Nahreisezug) - smrRfb (DPN - Nahreisezug) - snp001 (DPN - Nahreisezug) - snp002 (DPN - Nahreisezug) - spaBus (DPN - Nahreisezug) - srlBus (DPN - Nahreisezug) - sswssw (DPN - Nahreisezug) - sva006 (DPN - Nahreisezug) - svaBUS (DPN - Nahreisezug) - svaSTR (DPN - Nahreisezug) - svr001 (DPN - Nahreisezug) - SW (DPN - Nahreisezug) - swg099 (SWE - SWEG Südwestdeutsche Landesverkehrs-GmbH) - swgSWB (DPN - Nahreisezug) - swlbus (DPN - Nahreisezug) - swm001 (DPN - Nahreisezug) - swm002 (DPN - Nahreisezug) - swm003 (DPN - Nahreisezug) - swpVBP (DPN - Nahreisezug) - swt_31 (DPN - Nahreisezug) - swt_32 (DPN - Nahreisezug) - swt_33 (DPN - Nahreisezug) - swt_35 (DPN - Nahreisezug) - swt_36 (DPN - Nahreisezug) - swt_37 (DPN - Nahreisezug) - swt_38 (DPN - Nahreisezug) - swt_39 (DPN - Nahreisezug) - swt001 (DPN - Nahreisezug) - swt007 (DPN - Nahreisezug) - swt009 (DPN - Nahreisezug) - swt014 (DPN - Nahreisezug) - swt021 (DPN - Nahreisezug) - swt022 (DPN - Nahreisezug) - swt023 (DPN - Nahreisezug) - swt024 (DPN - Nahreisezug) - swt025 (DPN - Nahreisezug) - swt026 (DPN - Nahreisezug) - swt028 (DPN - Nahreisezug) - swt030 (DPN - Nahreisezug) - swt031 (DPN - Nahreisezug) - swt032 (DPN - Nahreisezug) - swt033 (DPN - Nahreisezug) - swtb00 (DPN - Nahreisezug) - swtb01 (DPN - Nahreisezug) - swtb03 (DPN - Nahreisezug) - swtb12 (DPN - Nahreisezug) - swtb16 (DPN - Nahreisezug) - swtb19 (DPN - Nahreisezug) - swtb20 (DPN - Nahreisezug) - swtb21 (DPN - Nahreisezug) - swtb22 (DPN - Nahreisezug) - swtb24 (DPN - Nahreisezug) - swtb25 (DPN - Nahreisezug) - swtb27 (DPN - Nahreisezug) - swtb29 (DPN - Nahreisezug) - T8 (BRB - Bayerische Regiobahn) - TDHS (S - S-Bahn Hannover (Transdev)) - TDRR (RRB - RheinRuhrBahn (Transdev)) - tgo099 (SWE - SWEG Südwestdeutsche Landesverkehrs-GmbH) - TR (RB - MittelrheinBahn (Trans Regio)) - TRI (TRI - TRI Train Rental GmbH) - tub001 (DPN - Nahreisezug) - tub003 (DPN - Nahreisezug) - tub004 (DPN - Nahreisezug) - tub007 (DPN - Nahreisezug) - tub008 (DPN - Nahreisezug) - tub009 (DPN - Nahreisezug) - tub010 (DPN - Nahreisezug) - tub015 (DPN - Nahreisezug) - tub022 (DPN - Nahreisezug) - tub030 (DPN - Nahreisezug) - tub031 (DPN - Nahreisezug) - tub033 (DPN - Nahreisezug) - tub034 (DPN - Nahreisezug) - tub035 (DPN - Nahreisezug) - tub036 (DPN - Nahreisezug) - tub038 (DPN - Nahreisezug) - tub041 (DPN - Nahreisezug) - tub042 (DPN - Nahreisezug) - tub044 (DPN - Nahreisezug) - tub048 (DPN - Nahreisezug) - tub049 (DPN - Nahreisezug) - tub051 (DPN - Nahreisezug) - tub053 (DPN - Nahreisezug) - tub054 (DPN - Nahreisezug) - tub061 (DPN - Nahreisezug) - tub068 (DPN - Nahreisezug) - tub069 (DPN - Nahreisezug) - tub071 (DPN - Nahreisezug) - tub072 (DPN - Nahreisezug) - tub079 (DPN - Nahreisezug) - tub090 (DPN - Nahreisezug) - tub093 (DPN - Nahreisezug) - tub094 (DPN - Nahreisezug) - tub095 (DPN - Nahreisezug) - tut001 (DPN - Nahreisezug) - UW (UBB - Usedomer Bäderbahn) - V6 (vlx - vlexx) - V6RB (RB - vlexx) - V6RE (RE - vlexx) - V7 (SVG - SVG Schienenverkehrsgesellschaft Stuttgart) - V9 (P - Wanderbahn im Regental) - vabsta (DPN - Nahreisezug) - vag010 (DPN - Nahreisezug) - vag011 (DPN - Nahreisezug) - vag013 (DPN - Nahreisezug) - vag014 (DPN - Nahreisezug) - vag060 (DPN - Nahreisezug) - vanbus (DPN - Nahreisezug) - vanstr (DPN - Nahreisezug) - vanuba (DPN - Nahreisezug) - vbb070 (DPN - Nahreisezug) - vbb071 (DPN - Nahreisezug) - vbb072 (DPN - Nahreisezug) - vbbBBG (DPN - Nahreisezug) - vbbBRB (DPN - Nahreisezug) - vbbBRT (DPN - Nahreisezug) - vbbBVB (DPN - Nahreisezug) - vbbBVF (DPN - Nahreisezug) - vbbBVT (DPN - Nahreisezug) - vbbBVU (DPN - Nahreisezug) - vbbCNB (DPN - Nahreisezug) - vbbCNT (DPN - Nahreisezug) - vbbFFB (DPN - Nahreisezug) - vbbFFT (DPN - Nahreisezug) - vbbGLA (DPN - Nahreisezug) - vbbHVG (DPN - Nahreisezug) - vbbMOB (DPN - Nahreisezug) - vbbORP (DPN - Nahreisezug) - vbbOSL (DPN - Nahreisezug) - vbbOVG (DPN - Nahreisezug) - vbbREI (DPN - Nahreisezug) - vbbRPM (DPN - Nahreisezug) - vbbRVS (DPN - Nahreisezug) - vbbSCH (DPN - Nahreisezug) - vbbSRS (DPN - Nahreisezug) - vbbSTE (DPN - Nahreisezug) - vbbSTF (DPN - Nahreisezug) - vbbSTG (DPN - Nahreisezug) - vbbUVG (DPN - Nahreisezug) - vbbVEE (DPN - Nahreisezug) - vbbVIB (DPN - Nahreisezug) - vbbVIF (DPN - Nahreisezug) - vbbVIT (DPN - Nahreisezug) - vbbVTF (DPN - Nahreisezug) - vgb00 (DPN - Nahreisezug) - vgm013 (DPN - Nahreisezug) - vgm020 (DPN - Nahreisezug) - vgm022 (DPN - Nahreisezug) - vgm023 (DPN - Nahreisezug) - vgm024 (DPN - Nahreisezug) - vgm025 (DPN - Nahreisezug) - vgm026 (DPN - Nahreisezug) - vgm028 (DPN - Nahreisezug) - vgm029 (DPN - Nahreisezug) - vgm030 (DPN - Nahreisezug) - vgm031 (DPN - Nahreisezug) - vgm032 (DPN - Nahreisezug) - vgm033 (DPN - Nahreisezug) - vgm034 (DPN - Nahreisezug) - vgm035 (DPN - Nahreisezug) - vgm036 (DPN - Nahreisezug) - vgm037 (DPN - Nahreisezug) - vgm038 (DPN - Nahreisezug) - vgm039 (DPN - Nahreisezug) - vgm040 (DPN - Nahreisezug) - vgm041 (DPN - Nahreisezug) - vgm042 (DPN - Nahreisezug) - vgm044 (DPN - Nahreisezug) - vgm045 (DPN - Nahreisezug) - vgm046 (DPN - Nahreisezug) - vgm047 (DPN - Nahreisezug) - vgm050 (DPN - Nahreisezug) - vgm051 (DPN - Nahreisezug) - vgm053 (DPN - Nahreisezug) - vgm060 (DPN - Nahreisezug) - vgm079 (DPN - Nahreisezug) - vgm092 (DPN - Nahreisezug) - vgm093 (WB - Westfalenbus) - vgm094 (DPN - Nahreisezug) - vgmb93 (WB - Westfalenbus) - vgn_16 (DPN - Nahreisezug) - vgn043 (DPN - Nahreisezug) - vgn061 (DPN - Nahreisezug) - vgn063 (DPN - Nahreisezug) - vgn065 (DPN - Nahreisezug) - vgn068 (DPN - Nahreisezug) - vgn083 (DPN - Nahreisezug) - vgsARG (DPN - Nahreisezug) - vgsBar (DPN - Nahreisezug) - vgsBTV (DPN - Nahreisezug) - vgsKIR (DPN - Nahreisezug) - vgsKVS (DPN - Nahreisezug) - vgsLay (DPN - Nahreisezug) - vgsMLB (DPN - Nahreisezug) - vgsNVG (DPN - Nahreisezug) - vgsSAM (DPN - Nahreisezug) - vgsSBB (DPN - Nahreisezug) - vgsSBS (S - Saarbahn) - vgsVVB (DPN - Nahreisezug) - vgsZar (DPN - Nahreisezug) - vhb000 (DPN - Nahreisezug) - vhb002 (DPN - Nahreisezug) - vhb003 (DPN - Nahreisezug) - vmo004 (DPN - Nahreisezug) - vmo008 (DPN - Nahreisezug) - vmo010 (DPN - Nahreisezug) - vmo012 (DPN - Nahreisezug) - vmo050 (DPN - Nahreisezug) - vmo099 (DPN - Nahreisezug) - vms001 (DPN - Nahreisezug) - vms002 (DPN - Nahreisezug) - vms010 (DPN - Nahreisezug) - vms011 (DPN - Nahreisezug) - vms012 (DPN - Nahreisezug) - vms014 (DPN - Nahreisezug) - vms020 (DPN - Nahreisezug) - vms022 (DPN - Nahreisezug) - vms023 (DPN - Nahreisezug) - vms024 (DPN - Nahreisezug) - vms025 (DPN - Nahreisezug) - vms031 (DPN - Nahreisezug) - vms032 (DPN - Nahreisezug) - vms040 (DPN - Nahreisezug) - vms041 (DPN - Nahreisezug) - vms042 (DPN - Nahreisezug) - vms043 (DPN - Nahreisezug) - vms044 (DPN - Nahreisezug) - vms046 (DPN - Nahreisezug) - vms047 (DPN - Nahreisezug) - vms051 (DPN - Nahreisezug) - vms056 (DPN - Nahreisezug) - vms060 (DPN - Nahreisezug) - vms061 (DPN - Nahreisezug) - vms062 (DPN - Nahreisezug) - vms063 (DPN - Nahreisezug) - vms064 (DPN - Nahreisezug) - vms070 (DPN - Nahreisezug) - vms076 (DPN - Nahreisezug) - vms077 (DPN - Nahreisezug) - vms080 (DPN - Nahreisezug) - vms081 (DPN - Nahreisezug) - vms099 (DPN - Nahreisezug) - voe_12 (DPN - Nahreisezug) - voe_SB (DPN - Nahreisezug) - voe002 (DPN - Nahreisezug) - voe011 (DPN - Nahreisezug) - voe012 (DPN - Nahreisezug) - voe013 (DPN - Nahreisezug) - voe015 (DPN - Nahreisezug) - voe021 (DPN - Nahreisezug) - voe022 (DPN - Nahreisezug) - voe023 (DPN - Nahreisezug) - voe024 (DPN - Nahreisezug) - voe027 (DPN - Nahreisezug) - voe028 (DPN - Nahreisezug) - voe029 (DPN - Nahreisezug) - voe081 (DPN - Nahreisezug) - voe091 (DPN - Nahreisezug) - voeALT (DPN - Nahreisezug) - voeBU3 (DPN - Nahreisezug) - voeBU4 (DPN - Nahreisezug) - voeFAE (DPN - Nahreisezug) - voeSTR (DPN - Nahreisezug) - voeSWB (DPN - Nahreisezug) - vogBus (DPN - Nahreisezug) - von026 (DPN - Nahreisezug) - von027 (DPN - Nahreisezug) - von030 (DPN - Nahreisezug) - von031 (DPN - Nahreisezug) - von032 (DPN - Nahreisezug) - von042 (DPN - Nahreisezug) - von044 (DPN - Nahreisezug) - von052 (DPN - Nahreisezug) - von062 (DPN - Nahreisezug) - von064 (DPN - Nahreisezug) - von065 (DPN - Nahreisezug) - von069 (DPN - Nahreisezug) - vpeAST (DPN - Nahreisezug) - vpeBus (DPN - Nahreisezug) - vph063 (DPN - Nahreisezug) - vph071 (DPN - Nahreisezug) - vph072 (DPN - Nahreisezug) - vph073 (DPN - Nahreisezug) - vph074 (DPN - Nahreisezug) - vph075 (DPN - Nahreisezug) - vph076 (DPN - Nahreisezug) - vph077 (DPN - Nahreisezug) - vph078 (DPN - Nahreisezug) - vph079 (DPN - Nahreisezug) - vph080 (DPN - Nahreisezug) - vph081 (DPN - Nahreisezug) - vph082 (DPN - Nahreisezug) - vpo099 (DPN - Nahreisezug) - vrm002 (DPN - Nahreisezug) - vrm005 (DPN - Nahreisezug) - vrm006 (DPN - Nahreisezug) - vrm007 (DPN - Nahreisezug) - vrm008 (DPN - Nahreisezug) - vrm009 (DPN - Nahreisezug) - vrm011 (DPN - Nahreisezug) - vrm014 (DPN - Nahreisezug) - vrm015 (DPN - Nahreisezug) - vrm016 (DPN - Nahreisezug) - vrm017 (DPN - Nahreisezug) - vrm019 (DPN - Nahreisezug) - vrm020 (DPN - Nahreisezug) - vrm025 (DPN - Nahreisezug) - vrm031 (DPN - Nahreisezug) - vrm032 (DPN - Nahreisezug) - vrm036 (DPN - Nahreisezug) - vrm061 (DPN - Nahreisezug) - vrm066 (DPN - Nahreisezug) - vrm067 (DPN - Nahreisezug) - vrm068 (DPN - Nahreisezug) - vrm069 (DPN - Nahreisezug) - vrm070 (DPN - Nahreisezug) - vrm072 (DPN - Nahreisezug) - vrm073 (DPN - Nahreisezug) - vrm074 (DPN - Nahreisezug) - vrm077 (DPN - Nahreisezug) - vrm078 (DPN - Nahreisezug) - vrm083 (DPN - Nahreisezug) - vrm084 (DPN - Nahreisezug) - vrm085 (DPN - Nahreisezug) - vrn008 (STR - Rhein-Neckar-Verkehr GmbH) - vrn011 (STR - Rhein-Neckar-Verkehr GmbH) - vrn016 (DPN - Nahreisezug) - vrn017 (DPN - Nahreisezug) - vrn018 (DPN - Nahreisezug) - vrn019 (DPN - Nahreisezug) - vrn020 (DPN - Nahreisezug) - vrn022 (MNV - MNV Mittelhaardt Nahverkehrsgesellschaft) - vrn023 (DPN - Nahreisezug) - vrn025 (DPN - Nahreisezug) - vrn026 (DPN - Nahreisezug) - vrn027 (DPN - Nahreisezug) - vrn028 (H&P - Hetzler & Pfadt) - vrn029 (DPN - Nahreisezug) - vrn030 (DPN - Nahreisezug) - vrn032 (PAL - PalatinaBus) - vrn033 (DPN - Nahreisezug) - vrn040 (DPN - Nahreisezug) - vrn041 (DPN - Nahreisezug) - vrn043 (DPN - Nahreisezug) - vrn047 (DPN - Nahreisezug) - vrn049 (DPN - Nahreisezug) - vrn050 (QNV - QNV Queichtal Nahverkehr) - vrn051 (DPN - Nahreisezug) - vrn053 (DPN - Nahreisezug) - vrn057 (DPN - Nahreisezug) - vrn058 (DPN - Nahreisezug) - vrn059 (DPN - Nahreisezug) - vrn062 (DPN - Nahreisezug) - vrn068 (DPN - Nahreisezug) - vrn073 (DPN - Nahreisezug) - vrn074 (DPN - Nahreisezug) - vrn076 (DPN - Nahreisezug) - vrn078 (DPN - Nahreisezug) - vrn079 (DPN - Nahreisezug) - vrn080 (DPN - Nahreisezug) - vrn081 (DPN - Nahreisezug) - vrn082 (DPN - Nahreisezug) - vrn083 (DPN - Nahreisezug) - vrn095 (DPN - Nahreisezug) - vrnOEG (RNV - Rhein-Neckar-Verkehr GmbH (Oberrheinische Eisenbahn)) - vrnRHB (RNV - Rhein-Neckar-Verkehr GmbH (Rhein-Haardtbahn)) - vrr001 (DPN - Nahreisezug) - vrr002 (DPN - Nahreisezug) - vrr010 (DPN - Nahreisezug) - vrr011 (DPN - Nahreisezug) - vrr012 (DPN - Nahreisezug) - vrr013 (DPN - Nahreisezug) - vrr015 (DPN - Nahreisezug) - vrr016 (DPN - Nahreisezug) - vrr018 (DPN - Nahreisezug) - vrr020 (DPN - Nahreisezug) - vrr021 (DPN - Nahreisezug) - vrr023 (DPN - Nahreisezug) - vrr025 (DPN - Nahreisezug) - vrr029 (DPN - Nahreisezug) - vrr030 (DPN - Nahreisezug) - vrr031 (DPN - Nahreisezug) - vrr032 (DPN - Nahreisezug) - vrr033 (DPN - Nahreisezug) - vrr034 (DPN - Nahreisezug) - vrr035 (DPN - Nahreisezug) - vrr036 (DPN - Nahreisezug) - vrr037 (DPN - Nahreisezug) - vrr038 (DPN - Nahreisezug) - vrr039 (DPN - Nahreisezug) - vrr040 (DPN - Nahreisezug) - vrr045 (DPN - Nahreisezug) - vrr050 (DPN - Nahreisezug) - vrr060 (DPN - Nahreisezug) - vrr064 (DPN - Nahreisezug) - vrr065 (DPN - Nahreisezug) - vrr066 (DPN - Nahreisezug) - vrr070 (DPN - Nahreisezug) - vrr071 (DPN - Nahreisezug) - vrr072 (DPN - Nahreisezug) - vrr073 (DPN - Nahreisezug) - vrr075 (DPN - Nahreisezug) - vrr076 (DPN - Nahreisezug) - vrr077 (DPN - Nahreisezug) - vrr080 (DPN - Nahreisezug) - vrr088 (BVR - Busverkehr Rheinland) - vrs001 (DPN - Nahreisezug) - vrs003 (DPN - Nahreisezug) - vrs006 (DPN - Nahreisezug) - vrs008 (DPN - Nahreisezug) - vrs011 (DPN - Nahreisezug) - vrs012 (DPN - Nahreisezug) - vrs013 (DPN - Nahreisezug) - vrs014 (DPN - Nahreisezug) - vrs016 (DPN - Nahreisezug) - vrs017 (DPN - Nahreisezug) - vrs021 (DPN - Nahreisezug) - vrs022 (DPN - Nahreisezug) - vrs023 (DPN - Nahreisezug) - vrs024 (DPN - Nahreisezug) - vrs025 (DPN - Nahreisezug) - vrs028 (DPN - Nahreisezug) - vrs029 (DPN - Nahreisezug) - vrs060 (DPN - Nahreisezug) - vrs063 (DPN - Nahreisezug) - vsh001 (DPN - Nahreisezug) - vsh010 (DPN - Nahreisezug) - vsh020 (DPN - Nahreisezug) - vuvab (VU - Verkehrsgesellschaft mbH Untermain) - vvs012 (WEG - Württembergische Eisenbahn-Gesellschaft mbH) - vvs020 (DPN - Nahreisezug) - vvs021 (DPN - Nahreisezug) - vvs030 (DPN - Nahreisezug) - vvs031 (DPN - Nahreisezug) - vvs033 (DPN - Nahreisezug) - vvs034 (DPN - Nahreisezug) - vvs035 (DPN - Nahreisezug) - vvs041 (DPN - Nahreisezug) - vvs050 (DPN - Nahreisezug) - vvs051 (DPN - Nahreisezug) - vvs052 (DPN - Nahreisezug) - vvs055 (DPN - Nahreisezug) - vvs077 (DPN - Nahreisezug) - vvs078 (DPN - Nahreisezug) - vwmBuS (DPN - Nahreisezug) - vwmNAH (DPN - Nahreisezug) - vwmStr (DPN - Nahreisezug) - vwmVLP (DPN - Nahreisezug) - vws003 (DPN - Nahreisezug) - vws005 (DPN - Nahreisezug) - vws007 (DPN - Nahreisezug) - W0 (WDR - Wyker Dampfschiffs-Reederei Föhr-Amrum GmbH) - W2 (Dab - Daadetalbahn) - W3 (WFB - WestfalenBahn) - W6 (WTB - Wutachtalbahn) - W9 (WBA - waldbahn - Die Länderbahn GmbH DLB) - wabBus (DPN - Nahreisezug) - web_AN (DPN - Nahreisezug) - web_HB (DPN - Nahreisezug) - web_OF (DPN - Nahreisezug) - web_OS (DPN - Nahreisezug) - web002 (DPN - Nahreisezug) - web005 (DPN - Nahreisezug) - web006 (DPN - Nahreisezug) - web018 (DPN - Nahreisezug) - web019 (DPN - Nahreisezug) - webALL (DPN - Nahreisezug) - webAND (DPN - Nahreisezug) - webARE (DPN - Nahreisezug) - webAST (DPN - Nahreisezug) - webBBU (DPN - Nahreisezug) - webBEC (DPN - Nahreisezug) - webBPU (DPN - Nahreisezug) - webBRU (DPN - Nahreisezug) - webBTR (STR - Bremer Straßenbahn AG) - webBVB (DPN - Nahreisezug) - webBVS (DPN - Nahreisezug) - webDEL (DPN - Nahreisezug) - webDHE (DPN - Nahreisezug) - webEDZ (DPN - Nahreisezug) - webEMS (DPN - Nahreisezug) - webEVB (DPN - Nahreisezug) - webFAS (DPN - Nahreisezug) - webFIS (DPN - Nahreisezug) - webFLX (DPN - Nahreisezug) - webGEB (DPN - Nahreisezug) - webGER (DPN - Nahreisezug) - webGIE (DPN - Nahreisezug) - webGOE (DPN - Nahreisezug) - webGOS (DPN - Nahreisezug) - webHAR (DPN - Nahreisezug) - webHDK (DPN - Nahreisezug) - webHKR (DPN - Nahreisezug) - webHM (DPN - Nahreisezug) - webHUT (DPN - Nahreisezug) - webHVG (DPN - Nahreisezug) - webJAC (DPN - Nahreisezug) - webjan (DPN - Nahreisezug) - webKAR (DPN - Nahreisezug) - webKBA (DPN - Nahreisezug) - webKRR (DPN - Nahreisezug) - webKVG (DPN - Nahreisezug) - webLSE (DPN - Nahreisezug) - webMEY (DPN - Nahreisezug) - webNIE (DPN - Nahreisezug) - webNOH (DPN - Nahreisezug) - webNOR (DPN - Nahreisezug) - webONS (DPN - Nahreisezug) - webOS1 (DPN - Nahreisezug) - webOSV (DPN - Nahreisezug) - webRA1 (DPN - Nahreisezug) - webRBG (DPN - Nahreisezug) - webRVH (DPN - Nahreisezug) - webSAL (DPN - Nahreisezug) - webSTO (DPN - Nahreisezug) - webSVG (DPN - Nahreisezug) - webSWE (DPN - Nahreisezug) - webSWH (DPN - Nahreisezug) - webSZG (DPN - Nahreisezug) - webTMW (DPN - Nahreisezug) - webUEB (DPN - Nahreisezug) - webUET (STB - üstra Hannoversche Verkehrsbetriebe AG) - webUFF (DPN - Nahreisezug) - webVBB (DPN - Nahreisezug) - webVBN (DPN - Nahreisezug) - webVBW (DPN - Nahreisezug) - webVGE (DPN - Nahreisezug) - webVGH (DPN - Nahreisezug) - webVGP (DPN - Nahreisezug) - webVGV (DPN - Nahreisezug) - webVGW (DPN - Nahreisezug) - webVL1 (DPN - Nahreisezug) - webVLG (DPN - Nahreisezug) - webVO8 (DPN - Nahreisezug) - webVOH (DPN - Nahreisezug) - webVOL (DPN - Nahreisezug) - webVOS (DPN - Nahreisezug) - webVSN (DPN - Nahreisezug) - webVWG (DPN - Nahreisezug) - webWHV (DPN - Nahreisezug) - webWIN (DPN - Nahreisezug) - webWIS (DPN - Nahreisezug) - webWOB (DPN - Nahreisezug) - webWSF (DPN - Nahreisezug) - webXOS (WEB - Weser-Ems-Bus) - webYGO (RBB - Regionalbus Braunschweig GmbH) - webYUE (RBB - Regionalbus Braunschweig GmbH) - webYUZ (DPN - Nahreisezug) - wenBUS (DPN - Nahreisezug) - WL (RB - Kreisbahn Mansfelder Land) - wstwst (DPN - Nahreisezug) - wvvBUS (DPN - Nahreisezug) - wvvSTR (DPN - Nahreisezug) - wzlBus (DPN - Nahreisezug) - X1 (erx - erixx) - X2 (erx - erixx) - Y0 (SCH - Adler-Schiffe) - Y8 (BRB - Bayerische Regiobahn) - Z8 (BZB - Bayerische Zugspitzbahn) - Z9 (P - Rhön-Zügle) - zsbteg (DPN - Nahreisezug) - zvv008 (DPN - Nahreisezug) - zvv018 (DPN - Nahreisezug) - zvv019 (DPN - Nahreisezug) - zvv041 (DPN - Nahreisezug) note: list is not exhausting and more undocumented values may be returned
     * @type {string}
     * @memberof Administration
     */
    'administrationID': string;
    /**
     * Unique code of the operator [Betreiber].
     * @type {string}
     * @memberof Administration
     */
    'operatorCode': string;
    /**
     * Name of the operator [Betreiber].
     * @type {string}
     * @memberof Administration
     */
    'operatorName': string;
}
/**
 * Unique identification of a departure [Abfahrt] within a particular journey [Fahrt] by its relation [Abfahrt-Relation].
 * @export
 * @interface DepartureRelation
 */
export interface DepartureRelation {
    /**
     * Eva number of departure stop-place [Haltestelle] within journey.
     * @type {string}
     * @memberof DepartureRelation
     */
    'evaNumber': string;
    /**
     * Scheduled departure time [Geplante Abfahrtzeit] at stop-place [Haltestelle] within journey as fully-qualified-date (ISO-8601 with time-zone or offset).
     * @type {string}
     * @memberof DepartureRelation
     */
    'timeSchedule': string;
}
/**
 * Detailed error information on field level.
 * @export
 * @interface ErrorDetail
 */
export interface ErrorDetail {
    /**
     * Detailed information for error.
     * @type {string}
     * @memberof ErrorDetail
     */
    'detail': string;
    /**
     * Unique code that identifies error.
     * @type {string}
     * @memberof ErrorDetail
     */
    'errorCode'?: string;
    /**
     * Name of field / element that raised the error.
     * @type {string}
     * @memberof ErrorDetail
     */
    'field': string;
    /**
     * Common description of error.
     * @type {string}
     * @memberof ErrorDetail
     */
    'title': string;
}
/**
 * API error object according to RFC7807.
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Detailed information for error.
     * @type {string}
     * @memberof ErrorResponse
     */
    'detail': string;
    /**
     * Unique code that identifies error.
     * @type {string}
     * @memberof ErrorResponse
     */
    'errorCode'?: string;
    /**
     * List of detailed errors in case multiple errors have lead to the surrounding error.
     * @type {Array<ErrorDetail>}
     * @memberof ErrorResponse
     */
    'errors'?: Array<ErrorDetail>;
    /**
     * Unique identifier for instance that raised the error.
     * @type {string}
     * @memberof ErrorResponse
     */
    'instanceId'?: string;
    /**
     * Http status for error origin.
     * @type {string}
     * @memberof ErrorResponse
     */
    'status'?: string;
    /**
     * Common description of error.
     * @type {string}
     * @memberof ErrorResponse
     */
    'title': string;
}
/**
 * Occupancy [Auslastung] information for a journeys departure [Abfahrt].
 * @export
 * @interface JourneyDepartureOccupancy
 */
export interface JourneyDepartureOccupancy {
    /**
     * ID of departure [Abfahrt-ID].
     * @type {string}
     * @memberof JourneyDepartureOccupancy
     */
    'departureID': string;
    /**
     * 
     * @type {Occupancy}
     * @memberof JourneyDepartureOccupancy
     */
    'occupancy': Occupancy;
}
/**
 * Occupancy [Auslastung] information for a journeys departure [Abfahrt]. Unmatched version.
 * @export
 * @interface JourneyDepartureOccupancyUnmatched
 */
export interface JourneyDepartureOccupancyUnmatched {
    /**
     * 
     * @type {DepartureRelation}
     * @memberof JourneyDepartureOccupancyUnmatched
     */
    'departureRelation': DepartureRelation;
    /**
     * 
     * @type {Occupancy}
     * @memberof JourneyDepartureOccupancyUnmatched
     */
    'occupancy': Occupancy;
}
/**
 * Occupancy [Auslastung] information for a journey [Fahrt] and its departures [Abfahrten].
 * @export
 * @interface JourneyOccupancy
 */
export interface JourneyOccupancy {
    /**
     * List of occupancy information for journey departures [Abfahrten]. Please note that some departures may be missing in case no occupancy information is available.
     * @type {Array<JourneyDepartureOccupancy>}
     * @memberof JourneyOccupancy
     */
    'departures'?: Array<JourneyDepartureOccupancy>;
    /**
     * ID of journey [FahrtID].
     * @type {string}
     * @memberof JourneyOccupancy
     */
    'journeyID': string;
}
/**
 * Occupancy [Auslastung] information for a journey [Fahrt] and its departures [Abfahrten]. Unmatched version.
 * @export
 * @interface JourneyOccupancyUnmatched
 */
export interface JourneyOccupancyUnmatched {
    /**
     * List of occupancy information for journey departures [Abfahrten]. Please note that some departures may be missing in case no occupancy information is available.
     * @type {Array<JourneyDepartureOccupancyUnmatched>}
     * @memberof JourneyOccupancyUnmatched
     */
    'departures'?: Array<JourneyDepartureOccupancyUnmatched>;
    /**
     * 
     * @type {JourneyRelationWithoutHead}
     * @memberof JourneyOccupancyUnmatched
     */
    'journeyRelation': JourneyRelationWithoutHead;
}
/**
 * Description of a journey [Fahrt] by key attributes, that are summarized as journey relation [Fahrtrelation] without header information.
 * @export
 * @interface JourneyRelationWithoutHead
 */
export interface JourneyRelationWithoutHead {
    /**
     * Unique id of the administration [Verwaltung] at scheduled start stop-place [Geplanter Starthalt].
     * @type {string}
     * @memberof JourneyRelationWithoutHead
     */
    'startAdministrationID': string;
    /**
     * Category [externe Fahrtgattung nach Ausgabensteurerung] at scheduled start stop-place [Geplanter Starthalt].
     * @type {string}
     * @memberof JourneyRelationWithoutHead
     */
    'startCategory': string;
    /**
     * Eva number of scheduled start stop-place [Geplanter Starthalt].
     * @type {string}
     * @memberof JourneyRelationWithoutHead
     */
    'startEvaNumber': string;
    /**
     * Number of journey [Fahrtnummer] at scheduled start stop-place [Geplanter Starthalt].
     * @type {number}
     * @memberof JourneyRelationWithoutHead
     */
    'startJourneyNumber': number;
    /**
     * Scheduled start time [Geplante Startzeit] at scheduled start stop-place [Geplanter Starthalt] as fully-qualified-date (ISO-8601 with time-zone or offset).
     * @type {string}
     * @memberof JourneyRelationWithoutHead
     */
    'startTime': string;
}
/**
 * Journey [Fahrt] matching result for a particular journey-id.
 * @export
 * @interface MatchVehicleID
 */
export interface MatchVehicleID {
    /**
     * ID of journey [FahrtID].
     * @type {string}
     * @memberof MatchVehicleID
     */
    'journeyID': string;
    /**
     * 
     * @type {JourneyRelationWithoutHead}
     * @memberof MatchVehicleID
     */
    'journeyRelation': JourneyRelationWithoutHead;
    /**
     * Wagon identification number [Wagenordnungsnummer] of vehicle.
     * @type {number}
     * @memberof MatchVehicleID
     */
    'wagonIdentificationNumber'?: number;
}
/**
 * Journey [Fahrten] matching results for a particular vehicle-id.
 * @export
 * @interface MatchVehicleIDs
 */
export interface MatchVehicleIDs {
    /**
     * List of matched journeys [Fahrten].
     * @type {Array<MatchVehicleID>}
     * @memberof MatchVehicleIDs
     */
    'journeys': Array<MatchVehicleID>;
    /**
     * 
     * @type {MatchVehicleInGroup}
     * @memberof MatchVehicleIDs
     */
    'vehicle': MatchVehicleInGroup;
}
/**
 * Vehicle [Fahrzeug] matching result for vehicle within vehicle-group [Fahrzeuggruppe].
 * @export
 * @interface MatchVehicleInGroup
 */
export interface MatchVehicleInGroup {
    /**
     * 
     * @type {VehicleType}
     * @memberof MatchVehicleInGroup
     */
    'type': VehicleType;
    /**
     * Name of the vehicle-group [Fahrzeuggruppe], if present.
     * @type {string}
     * @memberof MatchVehicleInGroup
     */
    'vehicleGroupName'?: string;
    /**
     * ID of the vehicle [Fahrzeug] (for rail vehicles usually the UIC identification nunmber).
     * @type {string}
     * @memberof MatchVehicleInGroup
     */
    'vehicleID': string;
}
/**
 * Occupancy level [Auslastungsstufe] of a particular departure [Abfahrt] of a journey [Fahrt]. Occupancy may refer to the whole vehicle sequence [Formation], a vehicle group [Fahrzeuggruppe], a single vehicle [Fahrzeug] or to specific parts of those entities.
 * @export
 * @interface Occupancy
 */
export interface Occupancy {
    /**
     * Occupancy level indicator for economy class, may be null in case there is no first class. Possible values are: - OVERCROWDED (occupancy is considered as overcrowded) - HIGH (occupancy is considered as high) - MIDDLE (occupancy is considered as middle) - LOW (occupancy is considered as low)
     * @type {string}
     * @memberof Occupancy
     */
    'levelEconomyClass'?: string;
    /**
     * Occupancy level indicator for first class, may be null in case there is no first class. Possible values are: - OVERCROWDED (occupancy is considered as overcrowded) - HIGH (occupancy is considered as high) - MIDDLE (occupancy is considered as middle) - LOW (occupancy is considered as low)
     * @type {string}
     * @memberof Occupancy
     */
    'levelFirstClass'?: string;
}
/**
 * Platform [Gleis, Bahnsteig, Plattform] information in the context of vehicle-sequences [Wagenreihungsinformationen].
 * @export
 * @interface Platform
 */
export interface Platform {
    /**
     * 
     * @type {PlatformDetails}
     * @memberof Platform
     */
    'details'?: PlatformDetails;
    /**
     * Name of the current departure / arrival platform [Gleis, Bahnsteig, Plattform - Vorschau]. Note that there might be no information on the estimated platform (due to various reasons); in this case the attribute details will also be empty.
     * @type {string}
     * @memberof Platform
     */
    'platform'?: string;
    /**
     * Name of the scheduled departure / arrival platform [Gleis, Bahnsteig, Plattform - Soll].
     * @type {string}
     * @memberof Platform
     */
    'platformSchedule'?: string;
}
/**
 * Accessibility [Barrierefreiheit] information for a particular platform [Gleis, Bahnsteig, Plattform].
 * @export
 * @interface PlatformAccessibility
 */
export interface PlatformAccessibility {
    /**
     * 
     * @type {AccessibilityStatus}
     * @memberof PlatformAccessibility
     */
    'boardingAid'?: AccessibilityStatus;
    /**
     * 
     * @type {AccessibilityStatus}
     * @memberof PlatformAccessibility
     */
    'platformSign'?: AccessibilityStatus;
    /**
     * 
     * @type {AccessibilityStatus}
     * @memberof PlatformAccessibility
     */
    'stairsMarking'?: AccessibilityStatus;
    /**
     * 
     * @type {AccessibilityStatus}
     * @memberof PlatformAccessibility
     */
    'standardPlatformHeight'?: AccessibilityStatus;
    /**
     * 
     * @type {AccessibilityStatus}
     * @memberof PlatformAccessibility
     */
    'tactileGuidingStrips'?: AccessibilityStatus;
    /**
     * 
     * @type {AccessibilityStatus}
     * @memberof PlatformAccessibility
     */
    'tactileHandrailLabel'?: AccessibilityStatus;
    /**
     * 
     * @type {AccessibilityStatus}
     * @memberof PlatformAccessibility
     */
    'tactilePlatformAccess'?: AccessibilityStatus;
}


/**
 * Platform [Gleis, Bahnsteig, Plattform] details in the context of vehicle-sequences [Wagenreihungsinformationen].
 * @export
 * @interface PlatformDetails
 */
export interface PlatformDetails {
    /**
     * 
     * @type {PlatformAccessibility}
     * @memberof PlatformDetails
     */
    'accessibility'?: PlatformAccessibility;
    /**
     * End of the usable part of the platform given in meter in local coordinates.
     * @type {number}
     * @memberof PlatformDetails
     */
    'end'?: number;
    /**
     * Name of the platform (12, 1a, Nord, Süd etc.).
     * @type {string}
     * @memberof PlatformDetails
     */
    'name': string;
    /**
     * List of sectors [Sektoren] that belong to the platform.
     * @type {Array<Sector>}
     * @memberof PlatformDetails
     */
    'sectors'?: Array<Sector>;
    /**
     * Start of the usable part of the platform given in meter in local coordinates. This value may differ from zero and may be positive as well as negative.
     * @type {number}
     * @memberof PlatformDetails
     */
    'start'?: number;
}
/**
 * Platform [Gleis, Bahnsteig, Plattform] sector [Gleisabschnitt, Steigabschnitt] information for vehicle-sequences [Wagenreihungsinformationen].
 * @export
 * @interface Sector
 */
export interface Sector {
    /**
     * Position of the cube [Sektorwürfel] given in meters in local coordinates.
     * @type {number}
     * @memberof Sector
     */
    'cubePosition'?: number;
    /**
     * End of the sector given in meters in local coordinates.
     * @type {number}
     * @memberof Sector
     */
    'end': number;
    /**
     * Name of the sector [Sektor / Mast etc.].
     * @type {string}
     * @memberof Sector
     */
    'name': string;
    /**
     * Start of the sector given in meters in local coordinates.
     * @type {number}
     * @memberof Sector
     */
    'start': number;
}
/**
 * Comprehensive stop-place [Haltestelle] information.
 * @export
 * @interface StopPlaceEmbedded
 */
export interface StopPlaceEmbedded {
    /**
     * Eva number of stop-place [Haltestelle].
     * @type {string}
     * @memberof StopPlaceEmbedded
     */
    'evaNumber': string;
    /**
     * Name for stop-place [Haltestelle] in fixed language \'DE\'.
     * @type {string}
     * @memberof StopPlaceEmbedded
     */
    'name': string;
}
/**
 * Vehicle [Fahrzeug] amenity [Ausstattungsmerkmal].
 * @export
 * @interface VehicleAmenity
 */
export interface VehicleAmenity {
    /**
     * Amount of amenity.
     * @type {number}
     * @memberof VehicleAmenity
     */
    'amount'?: number;
    /**
     * Status an amenity [Ausstattungsmerkmal] can have. - AVAILABLE (amenity is considered as available [Verfügbar]) - NOT_AVAILABLE (amenity is considered as not available [Nicht Verfügbar]) - RESERVED (amenity is considered as reserved [Reserviert]) - UNDEFINED (status is undefined [Undefiniert])
     * @type {string}
     * @memberof VehicleAmenity
     */
    'status': string;
    /**
     * Type of vehicle amenity [Ausstattungsmerkmal des Fahrzeugs]. - BISTRO (Bordbistro) - AIR_CONDITION (Klimaanlage) - BIKE_SPACE (Fahrradstellplätze) - TOILET (Toilette) - WHEELCHAIR_SPACE (Rollstuhlstellplätze) - TOILET_WHEELCHAIR (Rollstuhlgängige Toilette) - BOARDING_AID (Einstiegshilfe) - CABIN_INFANT (Kleinkindabteil) - ZONE_MULTI_PURPOSE (Mehrzweckbereich) - ZONE_QUIET (Ruhebereich) - ZONE_FAMILY (Familienbereich) - INFO (Info-Abteil) - SEATS_SEVERELY_DISABLED (Plätze für Schwerbehinderte) - SEATS_BAHN_BONUS (Plätze für Bahn.Bonus-Kunden) - SEATS_LUFTHANSA_EXPRESS_RAIL (Plätze für LH-Codeshare) - WIFI (WLAN-Hotspot)
     * @type {string}
     * @memberof VehicleAmenity
     */
    'type': string;
}
/**
 * Vehicle-group [Fahrzeuggruppe] within the vehicle-sequence [Wagenreihung] containing at least one vehicle [Fahrzeug] for arrival [Ankunft].
 * @export
 * @interface VehicleGroupInSequenceArrival
 */
export interface VehicleGroupInSequenceArrival {
    /**
     * 
     * @type {StopPlaceEmbedded}
     * @memberof VehicleGroupInSequenceArrival
     */
    'destination': StopPlaceEmbedded;
    /**
     * ID of journey [FahrtID] for this vehicle-group [Fahrzeuggruppe].
     * @type {string}
     * @memberof VehicleGroupInSequenceArrival
     */
    'journeyID': string;
    /**
     * Name of the vehicle-group [Fahrzeuggruppe] within the sequence.
     * @type {string}
     * @memberof VehicleGroupInSequenceArrival
     */
    'name': string;
    /**
     * Vehicles within the group ordered in direction of travel, including informations only valid within the sequence.
     * @type {Array<VehicleInGroupArrival>}
     * @memberof VehicleGroupInSequenceArrival
     */
    'vehicles': Array<VehicleInGroupArrival>;
}
/**
 * Vehicle-group [Fahrzeuggruppe] within the vehicle-sequence [Wagenreihung] containing at least one vehicle [Fahrzeug] for arrival [Ankunft].
 * @export
 * @interface VehicleGroupInSequenceArrivalUnmatched
 */
export interface VehicleGroupInSequenceArrivalUnmatched {
    /**
     * 
     * @type {StopPlaceEmbedded}
     * @memberof VehicleGroupInSequenceArrivalUnmatched
     */
    'destination': StopPlaceEmbedded;
    /**
     * ID of journey [FahrtID] for this vehicle-group [Fahrzeuggruppe].
     * @type {string}
     * @memberof VehicleGroupInSequenceArrivalUnmatched
     */
    'journeyID': string;
    /**
     * 
     * @type {JourneyRelationWithoutHead}
     * @memberof VehicleGroupInSequenceArrivalUnmatched
     */
    'journeyRelation': JourneyRelationWithoutHead;
    /**
     * Name of the vehicle-group [Fahrzeuggruppe] within the sequence.
     * @type {string}
     * @memberof VehicleGroupInSequenceArrivalUnmatched
     */
    'name': string;
    /**
     * Vehicles within the group ordered in direction of travel, including informations only valid within the sequence.
     * @type {Array<VehicleInGroupArrival>}
     * @memberof VehicleGroupInSequenceArrivalUnmatched
     */
    'vehicles': Array<VehicleInGroupArrival>;
}
/**
 * Vehicle-group [Fahrzeuggruppe] within the vehicle-sequence [Wagenreihung] containing at least one vehicle [Fahrzeug] for departure [Abfahrt].
 * @export
 * @interface VehicleGroupInSequenceDeparture
 */
export interface VehicleGroupInSequenceDeparture {
    /**
     * 
     * @type {StopPlaceEmbedded}
     * @memberof VehicleGroupInSequenceDeparture
     */
    'destination': StopPlaceEmbedded;
    /**
     * ID of journey [FahrtID] for this vehicle-group [Fahrzeuggruppe].
     * @type {string}
     * @memberof VehicleGroupInSequenceDeparture
     */
    'journeyID': string;
    /**
     * Name of the vehicle-group [Fahrzeuggruppe] within the sequence.
     * @type {string}
     * @memberof VehicleGroupInSequenceDeparture
     */
    'name': string;
    /**
     * 
     * @type {Occupancy}
     * @memberof VehicleGroupInSequenceDeparture
     */
    'occupancy'?: Occupancy;
    /**
     * Vehicles within the group ordered in direction of travel, including informations only valid within the sequence.
     * @type {Array<VehicleInGroupDeparture>}
     * @memberof VehicleGroupInSequenceDeparture
     */
    'vehicles': Array<VehicleInGroupDeparture>;
}
/**
 * Vehicle-group [Fahrzeuggruppe] within the vehicle sequence [Wagenreihung] containing at least one vehicle [Fahrzeug] for departure [Abfahrt].
 * @export
 * @interface VehicleGroupInSequenceDepartureUnmatched
 */
export interface VehicleGroupInSequenceDepartureUnmatched {
    /**
     * 
     * @type {StopPlaceEmbedded}
     * @memberof VehicleGroupInSequenceDepartureUnmatched
     */
    'destination': StopPlaceEmbedded;
    /**
     * ID of journey [FahrtID] for this vehicle-group [Fahrzeuggruppe].
     * @type {string}
     * @memberof VehicleGroupInSequenceDepartureUnmatched
     */
    'journeyID': string;
    /**
     * 
     * @type {JourneyRelationWithoutHead}
     * @memberof VehicleGroupInSequenceDepartureUnmatched
     */
    'journeyRelation': JourneyRelationWithoutHead;
    /**
     * Name of the vehicle-group [Fahrzeuggruppe] within the sequence.
     * @type {string}
     * @memberof VehicleGroupInSequenceDepartureUnmatched
     */
    'name': string;
    /**
     * 
     * @type {Occupancy}
     * @memberof VehicleGroupInSequenceDepartureUnmatched
     */
    'occupancy'?: Occupancy;
    /**
     * Vehicles within the group ordered in direction of travel, including informations only valid within the sequence.
     * @type {Array<VehicleInGroupDeparture>}
     * @memberof VehicleGroupInSequenceDepartureUnmatched
     */
    'vehicles': Array<VehicleInGroupDeparture>;
}
/**
 * Information for a vehicle [Fahrzeug] within a vehicle-group [Fahrzeuggruppe] within a vehicle-sequence [Wagenreihung].
 * @export
 * @interface VehicleInGroupArrival
 */
export interface VehicleInGroupArrival {
    /**
     * Amount and status of vehicle-amenities [Ausstattungsmerkmale].
     * @type {Array<VehicleAmenity>}
     * @memberof VehicleInGroupArrival
     */
    'amenities': Array<VehicleAmenity>;
    /**
     * Orientation of vehicle [Fahrzeug] within vehicle-sequence [Wagenreihung] in direction of travel.  - FORWARDS (relative orientation forwards [vorwärts])  - BACKWARDS (relative orientation backwards [rückwaerts])  - UNDEFINED (undefined orientation)
     * @type {string}
     * @memberof VehicleInGroupArrival
     */
    'orientation': string;
    /**
     * 
     * @type {VehiclePlatformPosition}
     * @memberof VehicleInGroupArrival
     */
    'platformPosition'?: VehiclePlatformPosition;
    /**
     * Status of vehicle [Fahrzeug] with respect to accessibility for passengers. - OPEN (vehicle is open [Offen] - CLOSED (vehicle is closed [Geschlossen]
     * @type {string}
     * @memberof VehicleInGroupArrival
     */
    'status': string;
    /**
     * 
     * @type {VehicleType}
     * @memberof VehicleInGroupArrival
     */
    'type': VehicleType;
    /**
     * ID of the vehicle [Fahrzeug] (for rail vehicles usually the UIC identification nunmber).
     * @type {string}
     * @memberof VehicleInGroupArrival
     */
    'vehicleID': string;
    /**
     * Wagon identification number [Ordnungsnummer] of the vehicle [Fahrzeug]. May be empty, if no unique identification of a wagon is needed.
     * @type {number}
     * @memberof VehicleInGroupArrival
     */
    'wagonIdentificationNumber'?: number;
}
/**
 * Information for a vehicle [Fahrzeug] within a vehicle-group [Fahrzeuggruppe] within a vehicle-sequence [Wagenreihung].
 * @export
 * @interface VehicleInGroupDeparture
 */
export interface VehicleInGroupDeparture {
    /**
     * Amount and status of vehicle-amenities [Ausstattungsmerkmale].
     * @type {Array<VehicleAmenity>}
     * @memberof VehicleInGroupDeparture
     */
    'amenities': Array<VehicleAmenity>;
    /**
     * 
     * @type {Occupancy}
     * @memberof VehicleInGroupDeparture
     */
    'occupancy'?: Occupancy;
    /**
     * Orientation of vehicle [Fahrzeug] within vehicle-sequence [Wagenreihung] in direction of travel.  - FORWARDS (relative orientation forwards [vorwärts])  - BACKWARDS (relative orientation backwards [rückwaerts])  - UNDEFINED (undefined orientation)
     * @type {string}
     * @memberof VehicleInGroupDeparture
     */
    'orientation': string;
    /**
     * 
     * @type {VehiclePlatformPosition}
     * @memberof VehicleInGroupDeparture
     */
    'platformPosition'?: VehiclePlatformPosition;
    /**
     * Status of vehicle [Fahrzeug] with respect to accessibility for passengers. - OPEN (vehicle is open [Offen] - CLOSED (vehicle is closed [Geschlossen]
     * @type {string}
     * @memberof VehicleInGroupDeparture
     */
    'status': string;
    /**
     * 
     * @type {VehicleType}
     * @memberof VehicleInGroupDeparture
     */
    'type': VehicleType;
    /**
     * ID of the vehicle [Fahrzeug] (for rail vehicles usually the UIC identification nunmber).
     * @type {string}
     * @memberof VehicleInGroupDeparture
     */
    'vehicleID': string;
    /**
     * Wagon identification number [Ordnungsnummer] of the vehicle [Fahrzeug]. May be empty, if no unique identification of a wagon is needed.
     * @type {number}
     * @memberof VehicleInGroupDeparture
     */
    'wagonIdentificationNumber'?: number;
}
/**
 * Position of a vehicle [Fahrzeug] at platform [Gleis, Bahnsteig, Plattform].
 * @export
 * @interface VehiclePlatformPosition
 */
export interface VehiclePlatformPosition {
    /**
     * End position [Ende Meter] at the platform given in meters in local coordinates.
     * @type {number}
     * @memberof VehiclePlatformPosition
     */
    'end': number;
    /**
     * Sector [Sektor] the major part of the vehicle [Fahrzeug] is located in. May be empty in case the platform has no sectors.
     * @type {string}
     * @memberof VehiclePlatformPosition
     */
    'sector'?: string;
    /**
     * Start position [Beginn Meter] at the platform given in meters in local coordinates.
     * @type {number}
     * @memberof VehiclePlatformPosition
     */
    'start': number;
}
/**
 * Vehicle-sequence [Wagenreihung] for transports at a particular arrival.
 * @export
 * @interface VehicleSequenceArrival
 */
export interface VehicleSequenceArrival {
    /**
     * ID of the requested arrival [AnkunftID].
     * @type {string}
     * @memberof VehicleSequenceArrival
     */
    'arrivalID': string;
    /**
     * Vehicle-groups [Fahrzeuggruppen] of the transport ordered in direction of travel.
     * @type {Array<VehicleGroupInSequenceArrival>}
     * @memberof VehicleSequenceArrival
     */
    'groups': Array<VehicleGroupInSequenceArrival>;
    /**
     * ID of the requested journey [FahrtID].
     * @type {string}
     * @memberof VehicleSequenceArrival
     */
    'journeyID': string;
    /**
     * 
     * @type {Platform}
     * @memberof VehicleSequenceArrival
     */
    'platform': Platform;
    /**
     * Reflects vehicle-sequence [Wagenreihung] status with respect to order of first and economy class. - MATCHES_SCHEDULE (the current sequence matches the scheduled order.) - DIFFERS_FROM_SCHEDULE (the current sequence differs from the scheduled order [abweichende Wagenreihung].) - NO_SCHEDULE (there is no scheduled sequence.)
     * @type {string}
     * @memberof VehicleSequenceArrival
     */
    'sequenceStatus': string;
}
/**
 * Vehicle-sequence [Wagenreihung] for transports at a particular arrival.
 * @export
 * @interface VehicleSequenceArrivalUnmatched
 */
export interface VehicleSequenceArrivalUnmatched {
    /**
     * ID of the requested arrival [AnkunftID].
     * @type {string}
     * @memberof VehicleSequenceArrivalUnmatched
     */
    'arrivalID': string;
    /**
     * Vehicle-groups [Fahrzeuggruppen] of the transport ordered in direction of travel.
     * @type {Array<VehicleGroupInSequenceArrivalUnmatched>}
     * @memberof VehicleSequenceArrivalUnmatched
     */
    'groups': Array<VehicleGroupInSequenceArrivalUnmatched>;
    /**
     * ID of the requested journey [FahrtID].
     * @type {string}
     * @memberof VehicleSequenceArrivalUnmatched
     */
    'journeyID': string;
    /**
     * 
     * @type {Platform}
     * @memberof VehicleSequenceArrivalUnmatched
     */
    'platform': Platform;
    /**
     * Reflects vehicle-sequence [Wagenreihung] status with respect to order of first and economy class. - MATCHES_SCHEDULE (the current sequence matches the scheduled order.) - DIFFERS_FROM_SCHEDULE (the current sequence differs from the scheduled order [abweichende Wagenreihung].) - NO_SCHEDULE (there is no scheduled sequence.)
     * @type {string}
     * @memberof VehicleSequenceArrivalUnmatched
     */
    'sequenceStatus': string;
}
/**
 * Administrations [Verwaltung] that provide vehicle-sequences [Wagenreihungen].
 * @export
 * @interface VehicleSequenceAvailableAdministrations
 */
export interface VehicleSequenceAvailableAdministrations {
    /**
     * List of administrations [Verwaltungen].
     * @type {Array<Administration>}
     * @memberof VehicleSequenceAvailableAdministrations
     */
    'administrations': Array<Administration>;
}
/**
 * Vehicle-sequence [Wagenreihung] for transports at a particular departure.
 * @export
 * @interface VehicleSequenceDeparture
 */
export interface VehicleSequenceDeparture {
    /**
     * ID of the requested departure [AbfahrtID].
     * @type {string}
     * @memberof VehicleSequenceDeparture
     */
    'departureID': string;
    /**
     * Vehicle-groups [Fahrzeuggruppen] of the transport ordered in direction of travel.
     * @type {Array<VehicleGroupInSequenceDeparture>}
     * @memberof VehicleSequenceDeparture
     */
    'groups': Array<VehicleGroupInSequenceDeparture>;
    /**
     * ID of the requested journey [FahrtID].
     * @type {string}
     * @memberof VehicleSequenceDeparture
     */
    'journeyID': string;
    /**
     * 
     * @type {Occupancy}
     * @memberof VehicleSequenceDeparture
     */
    'occupancy'?: Occupancy;
    /**
     * 
     * @type {Platform}
     * @memberof VehicleSequenceDeparture
     */
    'platform': Platform;
    /**
     * Reflects vehicle-sequence [Wagenreihung] change [Änderung] of a departure [Abfahrt] in comparisson to its preceeding arrival [Ankunft]. - VEHICLES_ADDED (some vehicles have been added [Stärkung]) - VEHICLES_REMOVED (some vehicles have been removed [Schwächung]) - VEHICLES_REPLACEMENT (all vehicles haven been replaced by other vehicles [Parktausch]) - OTHER_CHANGE (other change, like replacing 2 of 8 vehicles with new ones) - NO_CHANGE (no change) - UNDEFINED (no information available)
     * @type {string}
     * @memberof VehicleSequenceDeparture
     */
    'sequenceChange': string;
    /**
     * Reflects vehicle-sequence [Wagenreihung] status with respect to order of first and economy class. - MATCHES_SCHEDULE (the current sequence matches the scheduled order.) - DIFFERS_FROM_SCHEDULE (the current sequence differs from the scheduled order [abweichende Wagenreihung].) - NO_SCHEDULE (there is no scheduled sequence.)
     * @type {string}
     * @memberof VehicleSequenceDeparture
     */
    'sequenceStatus': string;
}
/**
 * Vehicle-sequence [Wagenreihung] for transports at a particular departure.
 * @export
 * @interface VehicleSequenceDepartureUnmatched
 */
export interface VehicleSequenceDepartureUnmatched {
    /**
     * ID of the requested departure [AbfahrtID].
     * @type {string}
     * @memberof VehicleSequenceDepartureUnmatched
     */
    'departureID': string;
    /**
     * Vehicle-groups [Fahrzeuggruppen] of the transport ordered in direction of travel.
     * @type {Array<VehicleGroupInSequenceDepartureUnmatched>}
     * @memberof VehicleSequenceDepartureUnmatched
     */
    'groups': Array<VehicleGroupInSequenceDepartureUnmatched>;
    /**
     * ID of the requested journey [FahrtID].
     * @type {string}
     * @memberof VehicleSequenceDepartureUnmatched
     */
    'journeyID': string;
    /**
     * 
     * @type {Occupancy}
     * @memberof VehicleSequenceDepartureUnmatched
     */
    'occupancy'?: Occupancy;
    /**
     * 
     * @type {Platform}
     * @memberof VehicleSequenceDepartureUnmatched
     */
    'platform': Platform;
    /**
     * Reflects vehicle-sequence [Wagenreihung] change [Änderung] of a departure [Abfahrt] in comparisson to its preceeding arrival [Ankunft]. - VEHICLES_ADDED (some vehicles have been added [Stärkung]) - VEHICLES_REMOVED (some vehicles have been removed [Schwächung]) - VEHICLES_REPLACEMENT (all vehicles haven been replaced by other vehicles [Parktausch]) - OTHER_CHANGE (other change, like replacing 2 of 8 vehicles with new ones) - NO_CHANGE (no change) - UNDEFINED (no information available)
     * @type {string}
     * @memberof VehicleSequenceDepartureUnmatched
     */
    'sequenceChange': string;
    /**
     * Reflects vehicle-sequence [Wagenreihung] status with respect to order of first and economy class. - MATCHES_SCHEDULE (the current sequence matches the scheduled order.) - DIFFERS_FROM_SCHEDULE (the current sequence differs from the scheduled order [abweichende Wagenreihung].) - NO_SCHEDULE (there is no scheduled sequence.)
     * @type {string}
     * @memberof VehicleSequenceDepartureUnmatched
     */
    'sequenceStatus': string;
}
/**
 * Detailed information on the vehicle [Fahrzeug] type.
 * @export
 * @interface VehicleType
 */
export interface VehicleType {
    /**
     * Category of vehicle [Fahrzeug] according to basic visual differentiation. - DOUBLEDECK_FIRST_ECONOMY_CLASS (Doppelstockwagen 1.& 2. Klasse) - DOUBLEDECK_FIRST_CLASS (Doppelstockwagen 1. Klasse) - DOUBLEDECK_ECONOMY_CLASS (Doppelstockwagen 2. Klasse) - DOUBLEDECK_CONTROLCAR_FIRST_ECONOMOY_CLASS (Doppelstocksteuerwagen 1. & 2. Klasse) - DOUBLEDECK_CONTROLCAR_FIRST_CLASS (Doppelstocksteuerwagen 1. Klasse) - DOUBLEDECK_CONTROLCAR_ECONOMY_CLASS (Doppelstocksteuerwagen 2. Klasse) - DOUBLEDECK_CARCARRIER_PASSENGERTRAIN (Doppelstock-Autotransportwagen der Reisezugwagen-Bauart) - PASSENGERCARRIAGE_FIRST_ECONOMY_CLASS (Reisezugwagen 1.& 2. Klasse) - PASSENGERCARRIAGE_FIRST_CLASS (Reisezugwagen 1.Klasse) - PASSENGERCARRIAGE_ECONOMY_CLASS (Reisezugwagen 2.Klasse) - CONTROLCAR_FIRST_CLASS (Steuerwagen & 1.Klasse) - CONTROLCAR_ECONOMY_CLASS (Steuerwagen & 2.Klasse) - CONTROLCAR_FIRST_ECONOMY_CLASS (Steuerwagen 1.& 2.Klasse) - DOUBLECONTROLCAR_ECONOMY_CLASS (Beidseitiger Steuerwagen aka \'Schienenbus\' & 2.Klasse) - DOUBLECONTROLCAR_FIRST_ECONOMY_CLASS (Beidseitiger Steuerwagen aka \'Schienenbus\' 1.& 2.Klasse) - DININGCAR (Speisewagen) - HALFDININGCAR_FIRST_CLASS (Halbspeisewagen & 1. Klasse) - HALFDININGCAR_ECONOMY_CLASS (Halbspeisewagen & 2. Klasse) - SLEEPER_FIRST_CLASS (Schlafwagen 1. Klasse) - SLEEPER_FIRST_ECONOMY_CLASS (Schlafwagen 1. & 2. Klasse) - SLEEPER_ECONOMY_CLASS (Schlafwagen 2. Klasse) - COUCHETTE_FIRST_CLASS (Liegewagen 1. Klasse) - COUCHETTE_ECONOMY_CLASS (Liegewagen 2. Klasse) - BAGGAGECAR (Gepaeckwagen) - LOCOMOTIVE (Lok) - POWERCAR (Triebkopf) - UNDEFINED (unbekannt)
     * @type {string}
     * @memberof VehicleType
     */
    'category': string;
    /**
     * Construction type of the vehicle [Bauart / Baureihe], for instance \'I4030\' or \'If03F\'.
     * @type {string}
     * @memberof VehicleType
     */
    'constructionType': string;
    /**
     * Indicates if the vehicle [Fahrzeug] has economy class seats.
     * @type {boolean}
     * @memberof VehicleType
     */
    'hasEconomyClass'?: boolean;
    /**
     * Indicates if the vehicle [Fahrzeug] has first class seats.
     * @type {boolean}
     * @memberof VehicleType
     */
    'hasFirstClass'?: boolean;
    /**
     * ID of layout [Redesign, modernisiert, 2. Bauserie etc.] of the vehicle type, for instance \'403.1.BS\' or \'403.2.BS\'.
     * @type {string}
     * @memberof VehicleType
     */
    'layoutID'?: string;
}

/**
 * OccupanciesApi - axios parameter creator
 * @export
 */
export const OccupanciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns occupancies [Auslastung] for a particular departrue [Abfahrt] within a journey [Fahrt]. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'departureID\'. Be aware that in case the combination of filters, that are used to identify the journey or its departure, doesn\'t result in a unique match that an exception is thrown. 
         * @summary Returns occupancies for a departure within a journey
         * @param {string} date calendar date [Kalendertag] of transports departure as date (\&#39;YYYY-MM-dd\&#39;) at time-zone of departure (usually \&#39;Europe/Berlin\&#39;) 
         * @param {number} journeyNumber number of journey [Fahrtnummer] at departure
         * @param {string} category category [Fahrtgattung] of transport at departure
         * @param {string} evaNumber eva number of departure stop-place [Haltestelle]
         * @param {string} [timeSchedule] scheduled departure time [Geplante Abfahrtzeit] (\&#39;HH:mm:ss\&#39;) at stop-place [Haltestelle] as time-zone of departure (usually \&#39;Europe/Berlin\&#39;) only necessary to identify multiple stops at the same stop-place within a particular journey [Schleifenfahrten]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        occupancyByDepartureUnmatched: async (date: string, journeyNumber: number, category: string, evaNumber: string, timeSchedule?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('occupancyByDepartureUnmatched', 'date', date)
            // verify required parameter 'journeyNumber' is not null or undefined
            assertParamExists('occupancyByDepartureUnmatched', 'journeyNumber', journeyNumber)
            // verify required parameter 'category' is not null or undefined
            assertParamExists('occupancyByDepartureUnmatched', 'category', category)
            // verify required parameter 'evaNumber' is not null or undefined
            assertParamExists('occupancyByDepartureUnmatched', 'evaNumber', evaNumber)
            const localVarPath = `/occupancies/departures/unmatched`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientID required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-ID", configuration)

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substring(0,10) :
                    date;
            }

            if (journeyNumber !== undefined) {
                localVarQueryParameter['journeyNumber'] = journeyNumber;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (evaNumber !== undefined) {
                localVarQueryParameter['evaNumber'] = evaNumber;
            }

            if (timeSchedule !== undefined) {
                localVarQueryParameter['timeSchedule'] = timeSchedule;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns occupancies [Auslastung] for a particular journey [Fahrt].
         * @summary Returns occupancies for a journey
         * @param {string} journeyID id of journey [Fahrt-ID]
         * @param {string} [departureID] id of departure [Abfahrt-ID], if omitted all departures with occupancy information are returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        occupancyByJourneyId: async (journeyID: string, departureID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'journeyID' is not null or undefined
            assertParamExists('occupancyByJourneyId', 'journeyID', journeyID)
            const localVarPath = `/occupancies/{journeyID}`
                .replace(`{${"journeyID"}}`, encodeURIComponent(String(journeyID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientID required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-ID", configuration)

            if (departureID !== undefined) {
                localVarQueryParameter['departureID'] = departureID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns occupancies [Auslastung] for a particular journey [Fahrt] and all its departures [Abfahrten]. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'departureID\'. Be aware that in case the combination of filters, that are used to identify the journey or its departure, doesn\'t result in a unique match that an exception is thrown. 
         * @summary Returns occupancies for a journey
         * @param {string} startTime scheduled start time [Geplante Startzeit] of transport at scheduled start stop-place [Geplanter Starthalt] as fully-qualified-date (ISO-8601 with time-zone or offset)
         * @param {string} startCategory category [Fahrtgattung] of transport at scheduled start stop-place [Geplanter Starthalt]
         * @param {number} startJourneyNumber number of journey [Fahrtnummer] at scheduled start stop-place [Geplanter Starthalt]
         * @param {string} [startEvaNumber] eva number of scheduled start stop-place [Geplanter Starthalt] of transport
         * @param {string} [startAdministrationID] id of the administration [Verwaltung] of transport at scheduled start stop-place [Geplanter Starthalt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        occupancyByJourneyUnmatched: async (startTime: string, startCategory: string, startJourneyNumber: number, startEvaNumber?: string, startAdministrationID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('occupancyByJourneyUnmatched', 'startTime', startTime)
            // verify required parameter 'startCategory' is not null or undefined
            assertParamExists('occupancyByJourneyUnmatched', 'startCategory', startCategory)
            // verify required parameter 'startJourneyNumber' is not null or undefined
            assertParamExists('occupancyByJourneyUnmatched', 'startJourneyNumber', startJourneyNumber)
            const localVarPath = `/occupancies/unmatched`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientID required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-ID", configuration)

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (startEvaNumber !== undefined) {
                localVarQueryParameter['startEvaNumber'] = startEvaNumber;
            }

            if (startAdministrationID !== undefined) {
                localVarQueryParameter['startAdministrationID'] = startAdministrationID;
            }

            if (startCategory !== undefined) {
                localVarQueryParameter['startCategory'] = startCategory;
            }

            if (startJourneyNumber !== undefined) {
                localVarQueryParameter['startJourneyNumber'] = startJourneyNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OccupanciesApi - functional programming interface
 * @export
 */
export const OccupanciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OccupanciesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns occupancies [Auslastung] for a particular departrue [Abfahrt] within a journey [Fahrt]. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'departureID\'. Be aware that in case the combination of filters, that are used to identify the journey or its departure, doesn\'t result in a unique match that an exception is thrown. 
         * @summary Returns occupancies for a departure within a journey
         * @param {string} date calendar date [Kalendertag] of transports departure as date (\&#39;YYYY-MM-dd\&#39;) at time-zone of departure (usually \&#39;Europe/Berlin\&#39;) 
         * @param {number} journeyNumber number of journey [Fahrtnummer] at departure
         * @param {string} category category [Fahrtgattung] of transport at departure
         * @param {string} evaNumber eva number of departure stop-place [Haltestelle]
         * @param {string} [timeSchedule] scheduled departure time [Geplante Abfahrtzeit] (\&#39;HH:mm:ss\&#39;) at stop-place [Haltestelle] as time-zone of departure (usually \&#39;Europe/Berlin\&#39;) only necessary to identify multiple stops at the same stop-place within a particular journey [Schleifenfahrten]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async occupancyByDepartureUnmatched(date: string, journeyNumber: number, category: string, evaNumber: string, timeSchedule?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JourneyOccupancyUnmatched>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.occupancyByDepartureUnmatched(date, journeyNumber, category, evaNumber, timeSchedule, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns occupancies [Auslastung] for a particular journey [Fahrt].
         * @summary Returns occupancies for a journey
         * @param {string} journeyID id of journey [Fahrt-ID]
         * @param {string} [departureID] id of departure [Abfahrt-ID], if omitted all departures with occupancy information are returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async occupancyByJourneyId(journeyID: string, departureID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JourneyOccupancy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.occupancyByJourneyId(journeyID, departureID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns occupancies [Auslastung] for a particular journey [Fahrt] and all its departures [Abfahrten]. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'departureID\'. Be aware that in case the combination of filters, that are used to identify the journey or its departure, doesn\'t result in a unique match that an exception is thrown. 
         * @summary Returns occupancies for a journey
         * @param {string} startTime scheduled start time [Geplante Startzeit] of transport at scheduled start stop-place [Geplanter Starthalt] as fully-qualified-date (ISO-8601 with time-zone or offset)
         * @param {string} startCategory category [Fahrtgattung] of transport at scheduled start stop-place [Geplanter Starthalt]
         * @param {number} startJourneyNumber number of journey [Fahrtnummer] at scheduled start stop-place [Geplanter Starthalt]
         * @param {string} [startEvaNumber] eva number of scheduled start stop-place [Geplanter Starthalt] of transport
         * @param {string} [startAdministrationID] id of the administration [Verwaltung] of transport at scheduled start stop-place [Geplanter Starthalt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async occupancyByJourneyUnmatched(startTime: string, startCategory: string, startJourneyNumber: number, startEvaNumber?: string, startAdministrationID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JourneyOccupancyUnmatched>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.occupancyByJourneyUnmatched(startTime, startCategory, startJourneyNumber, startEvaNumber, startAdministrationID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OccupanciesApi - factory interface
 * @export
 */
export const OccupanciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OccupanciesApiFp(configuration)
    return {
        /**
         * Returns occupancies [Auslastung] for a particular departrue [Abfahrt] within a journey [Fahrt]. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'departureID\'. Be aware that in case the combination of filters, that are used to identify the journey or its departure, doesn\'t result in a unique match that an exception is thrown. 
         * @summary Returns occupancies for a departure within a journey
         * @param {OccupanciesApiOccupancyByDepartureUnmatchedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        occupancyByDepartureUnmatched(requestParameters: OccupanciesApiOccupancyByDepartureUnmatchedRequest, options?: AxiosRequestConfig): AxiosPromise<JourneyOccupancyUnmatched> {
            return localVarFp.occupancyByDepartureUnmatched(requestParameters.date, requestParameters.journeyNumber, requestParameters.category, requestParameters.evaNumber, requestParameters.timeSchedule, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns occupancies [Auslastung] for a particular journey [Fahrt].
         * @summary Returns occupancies for a journey
         * @param {OccupanciesApiOccupancyByJourneyIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        occupancyByJourneyId(requestParameters: OccupanciesApiOccupancyByJourneyIdRequest, options?: AxiosRequestConfig): AxiosPromise<JourneyOccupancy> {
            return localVarFp.occupancyByJourneyId(requestParameters.journeyID, requestParameters.departureID, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns occupancies [Auslastung] for a particular journey [Fahrt] and all its departures [Abfahrten]. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'departureID\'. Be aware that in case the combination of filters, that are used to identify the journey or its departure, doesn\'t result in a unique match that an exception is thrown. 
         * @summary Returns occupancies for a journey
         * @param {OccupanciesApiOccupancyByJourneyUnmatchedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        occupancyByJourneyUnmatched(requestParameters: OccupanciesApiOccupancyByJourneyUnmatchedRequest, options?: AxiosRequestConfig): AxiosPromise<JourneyOccupancyUnmatched> {
            return localVarFp.occupancyByJourneyUnmatched(requestParameters.startTime, requestParameters.startCategory, requestParameters.startJourneyNumber, requestParameters.startEvaNumber, requestParameters.startAdministrationID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for occupancyByDepartureUnmatched operation in OccupanciesApi.
 * @export
 * @interface OccupanciesApiOccupancyByDepartureUnmatchedRequest
 */
export interface OccupanciesApiOccupancyByDepartureUnmatchedRequest {
    /**
     * calendar date [Kalendertag] of transports departure as date (\&#39;YYYY-MM-dd\&#39;) at time-zone of departure (usually \&#39;Europe/Berlin\&#39;) 
     * @type {string}
     * @memberof OccupanciesApiOccupancyByDepartureUnmatched
     */
    readonly date: string

    /**
     * number of journey [Fahrtnummer] at departure
     * @type {number}
     * @memberof OccupanciesApiOccupancyByDepartureUnmatched
     */
    readonly journeyNumber: number

    /**
     * category [Fahrtgattung] of transport at departure
     * @type {string}
     * @memberof OccupanciesApiOccupancyByDepartureUnmatched
     */
    readonly category: string

    /**
     * eva number of departure stop-place [Haltestelle]
     * @type {string}
     * @memberof OccupanciesApiOccupancyByDepartureUnmatched
     */
    readonly evaNumber: string

    /**
     * scheduled departure time [Geplante Abfahrtzeit] (\&#39;HH:mm:ss\&#39;) at stop-place [Haltestelle] as time-zone of departure (usually \&#39;Europe/Berlin\&#39;) only necessary to identify multiple stops at the same stop-place within a particular journey [Schleifenfahrten]
     * @type {string}
     * @memberof OccupanciesApiOccupancyByDepartureUnmatched
     */
    readonly timeSchedule?: string
}

/**
 * Request parameters for occupancyByJourneyId operation in OccupanciesApi.
 * @export
 * @interface OccupanciesApiOccupancyByJourneyIdRequest
 */
export interface OccupanciesApiOccupancyByJourneyIdRequest {
    /**
     * id of journey [Fahrt-ID]
     * @type {string}
     * @memberof OccupanciesApiOccupancyByJourneyId
     */
    readonly journeyID: string

    /**
     * id of departure [Abfahrt-ID], if omitted all departures with occupancy information are returned
     * @type {string}
     * @memberof OccupanciesApiOccupancyByJourneyId
     */
    readonly departureID?: string
}

/**
 * Request parameters for occupancyByJourneyUnmatched operation in OccupanciesApi.
 * @export
 * @interface OccupanciesApiOccupancyByJourneyUnmatchedRequest
 */
export interface OccupanciesApiOccupancyByJourneyUnmatchedRequest {
    /**
     * scheduled start time [Geplante Startzeit] of transport at scheduled start stop-place [Geplanter Starthalt] as fully-qualified-date (ISO-8601 with time-zone or offset)
     * @type {string}
     * @memberof OccupanciesApiOccupancyByJourneyUnmatched
     */
    readonly startTime: string

    /**
     * category [Fahrtgattung] of transport at scheduled start stop-place [Geplanter Starthalt]
     * @type {string}
     * @memberof OccupanciesApiOccupancyByJourneyUnmatched
     */
    readonly startCategory: string

    /**
     * number of journey [Fahrtnummer] at scheduled start stop-place [Geplanter Starthalt]
     * @type {number}
     * @memberof OccupanciesApiOccupancyByJourneyUnmatched
     */
    readonly startJourneyNumber: number

    /**
     * eva number of scheduled start stop-place [Geplanter Starthalt] of transport
     * @type {string}
     * @memberof OccupanciesApiOccupancyByJourneyUnmatched
     */
    readonly startEvaNumber?: string

    /**
     * id of the administration [Verwaltung] of transport at scheduled start stop-place [Geplanter Starthalt]
     * @type {string}
     * @memberof OccupanciesApiOccupancyByJourneyUnmatched
     */
    readonly startAdministrationID?: string
}

/**
 * OccupanciesApi - object-oriented interface
 * @export
 * @class OccupanciesApi
 * @extends {BaseAPI}
 */
export class OccupanciesApi extends BaseAPI {
    /**
     * Returns occupancies [Auslastung] for a particular departrue [Abfahrt] within a journey [Fahrt]. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'departureID\'. Be aware that in case the combination of filters, that are used to identify the journey or its departure, doesn\'t result in a unique match that an exception is thrown. 
     * @summary Returns occupancies for a departure within a journey
     * @param {OccupanciesApiOccupancyByDepartureUnmatchedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OccupanciesApi
     */
    public occupancyByDepartureUnmatched(requestParameters: OccupanciesApiOccupancyByDepartureUnmatchedRequest, options?: AxiosRequestConfig) {
        return OccupanciesApiFp(this.configuration).occupancyByDepartureUnmatched(requestParameters.date, requestParameters.journeyNumber, requestParameters.category, requestParameters.evaNumber, requestParameters.timeSchedule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns occupancies [Auslastung] for a particular journey [Fahrt].
     * @summary Returns occupancies for a journey
     * @param {OccupanciesApiOccupancyByJourneyIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OccupanciesApi
     */
    public occupancyByJourneyId(requestParameters: OccupanciesApiOccupancyByJourneyIdRequest, options?: AxiosRequestConfig) {
        return OccupanciesApiFp(this.configuration).occupancyByJourneyId(requestParameters.journeyID, requestParameters.departureID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns occupancies [Auslastung] for a particular journey [Fahrt] and all its departures [Abfahrten]. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'departureID\'. Be aware that in case the combination of filters, that are used to identify the journey or its departure, doesn\'t result in a unique match that an exception is thrown. 
     * @summary Returns occupancies for a journey
     * @param {OccupanciesApiOccupancyByJourneyUnmatchedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OccupanciesApi
     */
    public occupancyByJourneyUnmatched(requestParameters: OccupanciesApiOccupancyByJourneyUnmatchedRequest, options?: AxiosRequestConfig) {
        return OccupanciesApiFp(this.configuration).occupancyByJourneyUnmatched(requestParameters.startTime, requestParameters.startCategory, requestParameters.startJourneyNumber, requestParameters.startEvaNumber, requestParameters.startAdministrationID, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VehicleSequencesApi - axios parameter creator
 * @export
 */
export const VehicleSequencesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all administrations [Verwaltungen] that provide vehicle-sequences [Wagenreihungen].
         * @summary Returns all administrations that provide vehicle-sequences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleSequenceAdministrations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vehicle-sequences/administrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientID required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-ID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a transports vehicle-sequence [Wagenreihung] with position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmalen], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular arrival.
         * @summary Returns transports arrial vehicle-sequence, position at platform, amenities and occupacy
         * @param {string} journeyID id of journey [Fahrt-ID]
         * @param {string} arrivalID id of arrival [Ankunfts-ID]
         * @param {boolean} [includePosition] include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned, may be empty
         * @param {boolean} [includeAmenities] include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleSequenceArrival: async (journeyID: string, arrivalID: string, includePosition?: boolean, includeAmenities?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'journeyID' is not null or undefined
            assertParamExists('vehicleSequenceArrival', 'journeyID', journeyID)
            // verify required parameter 'arrivalID' is not null or undefined
            assertParamExists('vehicleSequenceArrival', 'arrivalID', arrivalID)
            const localVarPath = `/vehicle-sequences/arrivals/{journeyID}/{arrivalID}`
                .replace(`{${"journeyID"}}`, encodeURIComponent(String(journeyID)))
                .replace(`{${"arrivalID"}}`, encodeURIComponent(String(arrivalID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientID required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-ID", configuration)

            if (includePosition !== undefined) {
                localVarQueryParameter['includePosition'] = includePosition;
            }

            if (includeAmenities !== undefined) {
                localVarQueryParameter['includeAmenities'] = includeAmenities;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a transports vehicle sequence [Wagenreihung] with optional position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmale], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular departure. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'arrivalID\'. Be aware that in case the combination of filters, that are used to identify the journey or its arrival, doesn\'t result in a unique match that an exception is thrown. 
         * @summary Returns transports arrival vehicle-sequence, position at platform, amenities and occupacy
         * @param {string} date calendar date [Kalendertag] of transports arrival as date (\&#39;YYYY-MM-dd\&#39;) at time-zone of departure (usually \&#39;Europe/Berlin\&#39;) 
         * @param {number} journeyNumber number of journey [Fahrtnummer] at arrival
         * @param {string} category category [Fahrtgattung] of transport at arrival
         * @param {string} evaNumber eva number of arrival stop-place [Haltestelle]
         * @param {string} [timeSchedule] scheduled arrival time [Geplante Ankunftszeit] (\&#39;HH:mm:ss\&#39;) at stop-place [Haltestelle] as time-zone of arrival (usually \&#39;Europe/Berlin\&#39;) only necessary to identify multiple stops at the same stop-place within a particular journey [Schleifenfahrten]
         * @param {boolean} [includePosition] include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned
         * @param {boolean} [includeAmenities] include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleSequenceArrivalUnmatched: async (date: string, journeyNumber: number, category: string, evaNumber: string, timeSchedule?: string, includePosition?: boolean, includeAmenities?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('vehicleSequenceArrivalUnmatched', 'date', date)
            // verify required parameter 'journeyNumber' is not null or undefined
            assertParamExists('vehicleSequenceArrivalUnmatched', 'journeyNumber', journeyNumber)
            // verify required parameter 'category' is not null or undefined
            assertParamExists('vehicleSequenceArrivalUnmatched', 'category', category)
            // verify required parameter 'evaNumber' is not null or undefined
            assertParamExists('vehicleSequenceArrivalUnmatched', 'evaNumber', evaNumber)
            const localVarPath = `/vehicle-sequences/arrivals/unmatched`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientID required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-ID", configuration)

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substring(0,10) :
                    date;
            }

            if (journeyNumber !== undefined) {
                localVarQueryParameter['journeyNumber'] = journeyNumber;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (evaNumber !== undefined) {
                localVarQueryParameter['evaNumber'] = evaNumber;
            }

            if (timeSchedule !== undefined) {
                localVarQueryParameter['timeSchedule'] = timeSchedule;
            }

            if (includePosition !== undefined) {
                localVarQueryParameter['includePosition'] = includePosition;
            }

            if (includeAmenities !== undefined) {
                localVarQueryParameter['includeAmenities'] = includeAmenities;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a transports vehicle-sequence [Wagenreihung] with position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmalen], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular departure.
         * @summary Returns transports departure vehicle-sequence, position at platform, amenities and occupacy
         * @param {string} journeyID id of journey [Fahrt-ID]
         * @param {string} departureID id of departure [Abfahrt-ID]
         * @param {boolean} [includePosition] include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned, may be empty
         * @param {boolean} [includeAmenities] include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned
         * @param {string} [includeOccupancy] include occupancy [Auslastung] for vehicles at departure, if omitted \&#39;OVERALL\&#39; occupancy will be returned - NONE (return no occupancy [Auslastung]) - OVERALL (return only overall occupancy [Auslastung] on a first / economy class level)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleSequenceDeparture: async (journeyID: string, departureID: string, includePosition?: boolean, includeAmenities?: boolean, includeOccupancy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'journeyID' is not null or undefined
            assertParamExists('vehicleSequenceDeparture', 'journeyID', journeyID)
            // verify required parameter 'departureID' is not null or undefined
            assertParamExists('vehicleSequenceDeparture', 'departureID', departureID)
            const localVarPath = `/vehicle-sequences/departures/{journeyID}/{departureID}`
                .replace(`{${"journeyID"}}`, encodeURIComponent(String(journeyID)))
                .replace(`{${"departureID"}}`, encodeURIComponent(String(departureID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientID required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-ID", configuration)

            if (includePosition !== undefined) {
                localVarQueryParameter['includePosition'] = includePosition;
            }

            if (includeAmenities !== undefined) {
                localVarQueryParameter['includeAmenities'] = includeAmenities;
            }

            if (includeOccupancy !== undefined) {
                localVarQueryParameter['includeOccupancy'] = includeOccupancy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a transports vehicle-sequence [Wagenreihung] with optional position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmale], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular departure. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'departureID\'. Be aware that in case the combination of filters, that are used to identify the journey or its departure, doesn\'t result in a unique match that an exception is thrown. 
         * @summary Returns transports departure vehicle-sequence, position at platform, amenities and occupacy
         * @param {string} date calendar date [Kalendertag] of transports departure as date (\&#39;YYYY-MM-dd\&#39;) at time-zone of departure (usually \&#39;Europe/Berlin\&#39;) 
         * @param {number} journeyNumber number of journey [Fahrtnummer] at departure
         * @param {string} category category [Fahrtgattung] of transport at departure
         * @param {string} evaNumber eva number of departure stop-place [Haltestelle]
         * @param {string} [timeSchedule] scheduled departure time [Geplante Abfahrtzeit] (\&#39;HH:mm:ss\&#39;) at stop-place [Haltestelle] as time-zone of departure (usually \&#39;Europe/Berlin\&#39;) only necessary to identify multiple stops at the same stop-place within a particular journey [Schleifenfahrten]
         * @param {boolean} [includePosition] include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned, may be empty
         * @param {boolean} [includeAmenities] include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned
         * @param {string} [includeOccupancy] include occupancy [Auslastung] for vehicles at departure, if omitted \&#39;OVERALL\&#39; occupancy will be returned - NONE (return no occupancy [Auslastung]) - OVERALL (return only overall occupancy [Auslastung] on a first / economy class level)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleSequenceDepartureUnmatched: async (date: string, journeyNumber: number, category: string, evaNumber: string, timeSchedule?: string, includePosition?: boolean, includeAmenities?: boolean, includeOccupancy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('vehicleSequenceDepartureUnmatched', 'date', date)
            // verify required parameter 'journeyNumber' is not null or undefined
            assertParamExists('vehicleSequenceDepartureUnmatched', 'journeyNumber', journeyNumber)
            // verify required parameter 'category' is not null or undefined
            assertParamExists('vehicleSequenceDepartureUnmatched', 'category', category)
            // verify required parameter 'evaNumber' is not null or undefined
            assertParamExists('vehicleSequenceDepartureUnmatched', 'evaNumber', evaNumber)
            const localVarPath = `/vehicle-sequences/departures/unmatched`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientID required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-ID", configuration)

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substring(0,10) :
                    date;
            }

            if (journeyNumber !== undefined) {
                localVarQueryParameter['journeyNumber'] = journeyNumber;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (evaNumber !== undefined) {
                localVarQueryParameter['evaNumber'] = evaNumber;
            }

            if (timeSchedule !== undefined) {
                localVarQueryParameter['timeSchedule'] = timeSchedule;
            }

            if (includePosition !== undefined) {
                localVarQueryParameter['includePosition'] = includePosition;
            }

            if (includeAmenities !== undefined) {
                localVarQueryParameter['includeAmenities'] = includeAmenities;
            }

            if (includeOccupancy !== undefined) {
                localVarQueryParameter['includeOccupancy'] = includeOccupancy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleSequencesApi - functional programming interface
 * @export
 */
export const VehicleSequencesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleSequencesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all administrations [Verwaltungen] that provide vehicle-sequences [Wagenreihungen].
         * @summary Returns all administrations that provide vehicle-sequences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleSequenceAdministrations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleSequenceAvailableAdministrations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleSequenceAdministrations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a transports vehicle-sequence [Wagenreihung] with position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmalen], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular arrival.
         * @summary Returns transports arrial vehicle-sequence, position at platform, amenities and occupacy
         * @param {string} journeyID id of journey [Fahrt-ID]
         * @param {string} arrivalID id of arrival [Ankunfts-ID]
         * @param {boolean} [includePosition] include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned, may be empty
         * @param {boolean} [includeAmenities] include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleSequenceArrival(journeyID: string, arrivalID: string, includePosition?: boolean, includeAmenities?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleSequenceArrival>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleSequenceArrival(journeyID, arrivalID, includePosition, includeAmenities, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a transports vehicle sequence [Wagenreihung] with optional position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmale], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular departure. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'arrivalID\'. Be aware that in case the combination of filters, that are used to identify the journey or its arrival, doesn\'t result in a unique match that an exception is thrown. 
         * @summary Returns transports arrival vehicle-sequence, position at platform, amenities and occupacy
         * @param {string} date calendar date [Kalendertag] of transports arrival as date (\&#39;YYYY-MM-dd\&#39;) at time-zone of departure (usually \&#39;Europe/Berlin\&#39;) 
         * @param {number} journeyNumber number of journey [Fahrtnummer] at arrival
         * @param {string} category category [Fahrtgattung] of transport at arrival
         * @param {string} evaNumber eva number of arrival stop-place [Haltestelle]
         * @param {string} [timeSchedule] scheduled arrival time [Geplante Ankunftszeit] (\&#39;HH:mm:ss\&#39;) at stop-place [Haltestelle] as time-zone of arrival (usually \&#39;Europe/Berlin\&#39;) only necessary to identify multiple stops at the same stop-place within a particular journey [Schleifenfahrten]
         * @param {boolean} [includePosition] include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned
         * @param {boolean} [includeAmenities] include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleSequenceArrivalUnmatched(date: string, journeyNumber: number, category: string, evaNumber: string, timeSchedule?: string, includePosition?: boolean, includeAmenities?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleSequenceArrivalUnmatched>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleSequenceArrivalUnmatched(date, journeyNumber, category, evaNumber, timeSchedule, includePosition, includeAmenities, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a transports vehicle-sequence [Wagenreihung] with position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmalen], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular departure.
         * @summary Returns transports departure vehicle-sequence, position at platform, amenities and occupacy
         * @param {string} journeyID id of journey [Fahrt-ID]
         * @param {string} departureID id of departure [Abfahrt-ID]
         * @param {boolean} [includePosition] include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned, may be empty
         * @param {boolean} [includeAmenities] include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned
         * @param {string} [includeOccupancy] include occupancy [Auslastung] for vehicles at departure, if omitted \&#39;OVERALL\&#39; occupancy will be returned - NONE (return no occupancy [Auslastung]) - OVERALL (return only overall occupancy [Auslastung] on a first / economy class level)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleSequenceDeparture(journeyID: string, departureID: string, includePosition?: boolean, includeAmenities?: boolean, includeOccupancy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleSequenceDeparture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleSequenceDeparture(journeyID, departureID, includePosition, includeAmenities, includeOccupancy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a transports vehicle-sequence [Wagenreihung] with optional position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmale], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular departure. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'departureID\'. Be aware that in case the combination of filters, that are used to identify the journey or its departure, doesn\'t result in a unique match that an exception is thrown. 
         * @summary Returns transports departure vehicle-sequence, position at platform, amenities and occupacy
         * @param {string} date calendar date [Kalendertag] of transports departure as date (\&#39;YYYY-MM-dd\&#39;) at time-zone of departure (usually \&#39;Europe/Berlin\&#39;) 
         * @param {number} journeyNumber number of journey [Fahrtnummer] at departure
         * @param {string} category category [Fahrtgattung] of transport at departure
         * @param {string} evaNumber eva number of departure stop-place [Haltestelle]
         * @param {string} [timeSchedule] scheduled departure time [Geplante Abfahrtzeit] (\&#39;HH:mm:ss\&#39;) at stop-place [Haltestelle] as time-zone of departure (usually \&#39;Europe/Berlin\&#39;) only necessary to identify multiple stops at the same stop-place within a particular journey [Schleifenfahrten]
         * @param {boolean} [includePosition] include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned, may be empty
         * @param {boolean} [includeAmenities] include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned
         * @param {string} [includeOccupancy] include occupancy [Auslastung] for vehicles at departure, if omitted \&#39;OVERALL\&#39; occupancy will be returned - NONE (return no occupancy [Auslastung]) - OVERALL (return only overall occupancy [Auslastung] on a first / economy class level)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vehicleSequenceDepartureUnmatched(date: string, journeyNumber: number, category: string, evaNumber: string, timeSchedule?: string, includePosition?: boolean, includeAmenities?: boolean, includeOccupancy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleSequenceDepartureUnmatched>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vehicleSequenceDepartureUnmatched(date, journeyNumber, category, evaNumber, timeSchedule, includePosition, includeAmenities, includeOccupancy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VehicleSequencesApi - factory interface
 * @export
 */
export const VehicleSequencesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleSequencesApiFp(configuration)
    return {
        /**
         * Returns all administrations [Verwaltungen] that provide vehicle-sequences [Wagenreihungen].
         * @summary Returns all administrations that provide vehicle-sequences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleSequenceAdministrations(options?: AxiosRequestConfig): AxiosPromise<VehicleSequenceAvailableAdministrations> {
            return localVarFp.vehicleSequenceAdministrations(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a transports vehicle-sequence [Wagenreihung] with position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmalen], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular arrival.
         * @summary Returns transports arrial vehicle-sequence, position at platform, amenities and occupacy
         * @param {VehicleSequencesApiVehicleSequenceArrivalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleSequenceArrival(requestParameters: VehicleSequencesApiVehicleSequenceArrivalRequest, options?: AxiosRequestConfig): AxiosPromise<VehicleSequenceArrival> {
            return localVarFp.vehicleSequenceArrival(requestParameters.journeyID, requestParameters.arrivalID, requestParameters.includePosition, requestParameters.includeAmenities, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a transports vehicle sequence [Wagenreihung] with optional position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmale], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular departure. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'arrivalID\'. Be aware that in case the combination of filters, that are used to identify the journey or its arrival, doesn\'t result in a unique match that an exception is thrown. 
         * @summary Returns transports arrival vehicle-sequence, position at platform, amenities and occupacy
         * @param {VehicleSequencesApiVehicleSequenceArrivalUnmatchedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleSequenceArrivalUnmatched(requestParameters: VehicleSequencesApiVehicleSequenceArrivalUnmatchedRequest, options?: AxiosRequestConfig): AxiosPromise<VehicleSequenceArrivalUnmatched> {
            return localVarFp.vehicleSequenceArrivalUnmatched(requestParameters.date, requestParameters.journeyNumber, requestParameters.category, requestParameters.evaNumber, requestParameters.timeSchedule, requestParameters.includePosition, requestParameters.includeAmenities, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a transports vehicle-sequence [Wagenreihung] with position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmalen], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular departure.
         * @summary Returns transports departure vehicle-sequence, position at platform, amenities and occupacy
         * @param {VehicleSequencesApiVehicleSequenceDepartureRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleSequenceDeparture(requestParameters: VehicleSequencesApiVehicleSequenceDepartureRequest, options?: AxiosRequestConfig): AxiosPromise<VehicleSequenceDeparture> {
            return localVarFp.vehicleSequenceDeparture(requestParameters.journeyID, requestParameters.departureID, requestParameters.includePosition, requestParameters.includeAmenities, requestParameters.includeOccupancy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a transports vehicle-sequence [Wagenreihung] with optional position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmale], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular departure. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'departureID\'. Be aware that in case the combination of filters, that are used to identify the journey or its departure, doesn\'t result in a unique match that an exception is thrown. 
         * @summary Returns transports departure vehicle-sequence, position at platform, amenities and occupacy
         * @param {VehicleSequencesApiVehicleSequenceDepartureUnmatchedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vehicleSequenceDepartureUnmatched(requestParameters: VehicleSequencesApiVehicleSequenceDepartureUnmatchedRequest, options?: AxiosRequestConfig): AxiosPromise<VehicleSequenceDepartureUnmatched> {
            return localVarFp.vehicleSequenceDepartureUnmatched(requestParameters.date, requestParameters.journeyNumber, requestParameters.category, requestParameters.evaNumber, requestParameters.timeSchedule, requestParameters.includePosition, requestParameters.includeAmenities, requestParameters.includeOccupancy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for vehicleSequenceArrival operation in VehicleSequencesApi.
 * @export
 * @interface VehicleSequencesApiVehicleSequenceArrivalRequest
 */
export interface VehicleSequencesApiVehicleSequenceArrivalRequest {
    /**
     * id of journey [Fahrt-ID]
     * @type {string}
     * @memberof VehicleSequencesApiVehicleSequenceArrival
     */
    readonly journeyID: string

    /**
     * id of arrival [Ankunfts-ID]
     * @type {string}
     * @memberof VehicleSequencesApiVehicleSequenceArrival
     */
    readonly arrivalID: string

    /**
     * include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned, may be empty
     * @type {boolean}
     * @memberof VehicleSequencesApiVehicleSequenceArrival
     */
    readonly includePosition?: boolean

    /**
     * include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned
     * @type {boolean}
     * @memberof VehicleSequencesApiVehicleSequenceArrival
     */
    readonly includeAmenities?: boolean
}

/**
 * Request parameters for vehicleSequenceArrivalUnmatched operation in VehicleSequencesApi.
 * @export
 * @interface VehicleSequencesApiVehicleSequenceArrivalUnmatchedRequest
 */
export interface VehicleSequencesApiVehicleSequenceArrivalUnmatchedRequest {
    /**
     * calendar date [Kalendertag] of transports arrival as date (\&#39;YYYY-MM-dd\&#39;) at time-zone of departure (usually \&#39;Europe/Berlin\&#39;) 
     * @type {string}
     * @memberof VehicleSequencesApiVehicleSequenceArrivalUnmatched
     */
    readonly date: string

    /**
     * number of journey [Fahrtnummer] at arrival
     * @type {number}
     * @memberof VehicleSequencesApiVehicleSequenceArrivalUnmatched
     */
    readonly journeyNumber: number

    /**
     * category [Fahrtgattung] of transport at arrival
     * @type {string}
     * @memberof VehicleSequencesApiVehicleSequenceArrivalUnmatched
     */
    readonly category: string

    /**
     * eva number of arrival stop-place [Haltestelle]
     * @type {string}
     * @memberof VehicleSequencesApiVehicleSequenceArrivalUnmatched
     */
    readonly evaNumber: string

    /**
     * scheduled arrival time [Geplante Ankunftszeit] (\&#39;HH:mm:ss\&#39;) at stop-place [Haltestelle] as time-zone of arrival (usually \&#39;Europe/Berlin\&#39;) only necessary to identify multiple stops at the same stop-place within a particular journey [Schleifenfahrten]
     * @type {string}
     * @memberof VehicleSequencesApiVehicleSequenceArrivalUnmatched
     */
    readonly timeSchedule?: string

    /**
     * include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned
     * @type {boolean}
     * @memberof VehicleSequencesApiVehicleSequenceArrivalUnmatched
     */
    readonly includePosition?: boolean

    /**
     * include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned
     * @type {boolean}
     * @memberof VehicleSequencesApiVehicleSequenceArrivalUnmatched
     */
    readonly includeAmenities?: boolean
}

/**
 * Request parameters for vehicleSequenceDeparture operation in VehicleSequencesApi.
 * @export
 * @interface VehicleSequencesApiVehicleSequenceDepartureRequest
 */
export interface VehicleSequencesApiVehicleSequenceDepartureRequest {
    /**
     * id of journey [Fahrt-ID]
     * @type {string}
     * @memberof VehicleSequencesApiVehicleSequenceDeparture
     */
    readonly journeyID: string

    /**
     * id of departure [Abfahrt-ID]
     * @type {string}
     * @memberof VehicleSequencesApiVehicleSequenceDeparture
     */
    readonly departureID: string

    /**
     * include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned, may be empty
     * @type {boolean}
     * @memberof VehicleSequencesApiVehicleSequenceDeparture
     */
    readonly includePosition?: boolean

    /**
     * include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned
     * @type {boolean}
     * @memberof VehicleSequencesApiVehicleSequenceDeparture
     */
    readonly includeAmenities?: boolean

    /**
     * include occupancy [Auslastung] for vehicles at departure, if omitted \&#39;OVERALL\&#39; occupancy will be returned - NONE (return no occupancy [Auslastung]) - OVERALL (return only overall occupancy [Auslastung] on a first / economy class level)
     * @type {string}
     * @memberof VehicleSequencesApiVehicleSequenceDeparture
     */
    readonly includeOccupancy?: string
}

/**
 * Request parameters for vehicleSequenceDepartureUnmatched operation in VehicleSequencesApi.
 * @export
 * @interface VehicleSequencesApiVehicleSequenceDepartureUnmatchedRequest
 */
export interface VehicleSequencesApiVehicleSequenceDepartureUnmatchedRequest {
    /**
     * calendar date [Kalendertag] of transports departure as date (\&#39;YYYY-MM-dd\&#39;) at time-zone of departure (usually \&#39;Europe/Berlin\&#39;) 
     * @type {string}
     * @memberof VehicleSequencesApiVehicleSequenceDepartureUnmatched
     */
    readonly date: string

    /**
     * number of journey [Fahrtnummer] at departure
     * @type {number}
     * @memberof VehicleSequencesApiVehicleSequenceDepartureUnmatched
     */
    readonly journeyNumber: number

    /**
     * category [Fahrtgattung] of transport at departure
     * @type {string}
     * @memberof VehicleSequencesApiVehicleSequenceDepartureUnmatched
     */
    readonly category: string

    /**
     * eva number of departure stop-place [Haltestelle]
     * @type {string}
     * @memberof VehicleSequencesApiVehicleSequenceDepartureUnmatched
     */
    readonly evaNumber: string

    /**
     * scheduled departure time [Geplante Abfahrtzeit] (\&#39;HH:mm:ss\&#39;) at stop-place [Haltestelle] as time-zone of departure (usually \&#39;Europe/Berlin\&#39;) only necessary to identify multiple stops at the same stop-place within a particular journey [Schleifenfahrten]
     * @type {string}
     * @memberof VehicleSequencesApiVehicleSequenceDepartureUnmatched
     */
    readonly timeSchedule?: string

    /**
     * include position at platform [Gleis, Bahnsteig, Plattform], if omitted or false no platform and no position information per vehicle will be returned, may be empty
     * @type {boolean}
     * @memberof VehicleSequencesApiVehicleSequenceDepartureUnmatched
     */
    readonly includePosition?: boolean

    /**
     * include amenities [Ausstatungsmerkmale] like WC, WLAN, boarding aids etc. on a vehicle base, if omitted or false no amenities will be returned
     * @type {boolean}
     * @memberof VehicleSequencesApiVehicleSequenceDepartureUnmatched
     */
    readonly includeAmenities?: boolean

    /**
     * include occupancy [Auslastung] for vehicles at departure, if omitted \&#39;OVERALL\&#39; occupancy will be returned - NONE (return no occupancy [Auslastung]) - OVERALL (return only overall occupancy [Auslastung] on a first / economy class level)
     * @type {string}
     * @memberof VehicleSequencesApiVehicleSequenceDepartureUnmatched
     */
    readonly includeOccupancy?: string
}

/**
 * VehicleSequencesApi - object-oriented interface
 * @export
 * @class VehicleSequencesApi
 * @extends {BaseAPI}
 */
export class VehicleSequencesApi extends BaseAPI {
    /**
     * Returns all administrations [Verwaltungen] that provide vehicle-sequences [Wagenreihungen].
     * @summary Returns all administrations that provide vehicle-sequences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleSequencesApi
     */
    public vehicleSequenceAdministrations(options?: AxiosRequestConfig) {
        return VehicleSequencesApiFp(this.configuration).vehicleSequenceAdministrations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a transports vehicle-sequence [Wagenreihung] with position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmalen], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular arrival.
     * @summary Returns transports arrial vehicle-sequence, position at platform, amenities and occupacy
     * @param {VehicleSequencesApiVehicleSequenceArrivalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleSequencesApi
     */
    public vehicleSequenceArrival(requestParameters: VehicleSequencesApiVehicleSequenceArrivalRequest, options?: AxiosRequestConfig) {
        return VehicleSequencesApiFp(this.configuration).vehicleSequenceArrival(requestParameters.journeyID, requestParameters.arrivalID, requestParameters.includePosition, requestParameters.includeAmenities, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a transports vehicle sequence [Wagenreihung] with optional position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmale], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular departure. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'arrivalID\'. Be aware that in case the combination of filters, that are used to identify the journey or its arrival, doesn\'t result in a unique match that an exception is thrown. 
     * @summary Returns transports arrival vehicle-sequence, position at platform, amenities and occupacy
     * @param {VehicleSequencesApiVehicleSequenceArrivalUnmatchedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleSequencesApi
     */
    public vehicleSequenceArrivalUnmatched(requestParameters: VehicleSequencesApiVehicleSequenceArrivalUnmatchedRequest, options?: AxiosRequestConfig) {
        return VehicleSequencesApiFp(this.configuration).vehicleSequenceArrivalUnmatched(requestParameters.date, requestParameters.journeyNumber, requestParameters.category, requestParameters.evaNumber, requestParameters.timeSchedule, requestParameters.includePosition, requestParameters.includeAmenities, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a transports vehicle-sequence [Wagenreihung] with position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmalen], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular departure.
     * @summary Returns transports departure vehicle-sequence, position at platform, amenities and occupacy
     * @param {VehicleSequencesApiVehicleSequenceDepartureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleSequencesApi
     */
    public vehicleSequenceDeparture(requestParameters: VehicleSequencesApiVehicleSequenceDepartureRequest, options?: AxiosRequestConfig) {
        return VehicleSequencesApiFp(this.configuration).vehicleSequenceDeparture(requestParameters.journeyID, requestParameters.departureID, requestParameters.includePosition, requestParameters.includeAmenities, requestParameters.includeOccupancy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a transports vehicle-sequence [Wagenreihung] with optional position at platform [Positionierung am Gleis], amenities [Ausstattungsmerkmale], barrier-free [Barrierefreiheit] information and occupancy [Auslastung] for a particular departure. This is the unmatched entrypoint in case the caller is not aware of the particular \'journeyID\' and \'departureID\'. Be aware that in case the combination of filters, that are used to identify the journey or its departure, doesn\'t result in a unique match that an exception is thrown. 
     * @summary Returns transports departure vehicle-sequence, position at platform, amenities and occupacy
     * @param {VehicleSequencesApiVehicleSequenceDepartureUnmatchedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleSequencesApi
     */
    public vehicleSequenceDepartureUnmatched(requestParameters: VehicleSequencesApiVehicleSequenceDepartureUnmatchedRequest, options?: AxiosRequestConfig) {
        return VehicleSequencesApiFp(this.configuration).vehicleSequenceDepartureUnmatched(requestParameters.date, requestParameters.journeyNumber, requestParameters.category, requestParameters.evaNumber, requestParameters.timeSchedule, requestParameters.includePosition, requestParameters.includeAmenities, requestParameters.includeOccupancy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VehiclesApi - axios parameter creator
 * @export
 */
export const VehiclesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all journeys [Fahrten] that contain a vehicle [Fahrzeug] with a matching vehicle-id order by scheduled departure time asc. May contain outdated and / or future journeys. Journeys are limited to 22h ahead and a maximum of 7 days in the past.
         * @summary Returns all journeys for a specific vehicle
         * @param {string} vehicleID id for vehicle [Fahrzeug] (for rail vehicles usually the UIC identification nunmber)
         * @param {string} [date] scheduled departure / arrival date to limit returned vehicles for, if omitted defaults to today
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        journeysByVehicleId: async (vehicleID: string, date?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleID' is not null or undefined
            assertParamExists('journeysByVehicleId', 'vehicleID', vehicleID)
            const localVarPath = `/vehicles/{vehicleID}/journeys`
                .replace(`{${"vehicleID"}}`, encodeURIComponent(String(vehicleID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientSecret required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Api-Key", configuration)

            // authentication ClientID required
            await setApiKeyToObject(localVarHeaderParameter, "DB-Client-ID", configuration)

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substring(0,10) :
                    date;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehiclesApi - functional programming interface
 * @export
 */
export const VehiclesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehiclesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all journeys [Fahrten] that contain a vehicle [Fahrzeug] with a matching vehicle-id order by scheduled departure time asc. May contain outdated and / or future journeys. Journeys are limited to 22h ahead and a maximum of 7 days in the past.
         * @summary Returns all journeys for a specific vehicle
         * @param {string} vehicleID id for vehicle [Fahrzeug] (for rail vehicles usually the UIC identification nunmber)
         * @param {string} [date] scheduled departure / arrival date to limit returned vehicles for, if omitted defaults to today
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async journeysByVehicleId(vehicleID: string, date?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchVehicleIDs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.journeysByVehicleId(vehicleID, date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VehiclesApi - factory interface
 * @export
 */
export const VehiclesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehiclesApiFp(configuration)
    return {
        /**
         * Returns all journeys [Fahrten] that contain a vehicle [Fahrzeug] with a matching vehicle-id order by scheduled departure time asc. May contain outdated and / or future journeys. Journeys are limited to 22h ahead and a maximum of 7 days in the past.
         * @summary Returns all journeys for a specific vehicle
         * @param {VehiclesApiJourneysByVehicleIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        journeysByVehicleId(requestParameters: VehiclesApiJourneysByVehicleIdRequest, options?: AxiosRequestConfig): AxiosPromise<MatchVehicleIDs> {
            return localVarFp.journeysByVehicleId(requestParameters.vehicleID, requestParameters.date, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for journeysByVehicleId operation in VehiclesApi.
 * @export
 * @interface VehiclesApiJourneysByVehicleIdRequest
 */
export interface VehiclesApiJourneysByVehicleIdRequest {
    /**
     * id for vehicle [Fahrzeug] (for rail vehicles usually the UIC identification nunmber)
     * @type {string}
     * @memberof VehiclesApiJourneysByVehicleId
     */
    readonly vehicleID: string

    /**
     * scheduled departure / arrival date to limit returned vehicles for, if omitted defaults to today
     * @type {string}
     * @memberof VehiclesApiJourneysByVehicleId
     */
    readonly date?: string
}

/**
 * VehiclesApi - object-oriented interface
 * @export
 * @class VehiclesApi
 * @extends {BaseAPI}
 */
export class VehiclesApi extends BaseAPI {
    /**
     * Returns all journeys [Fahrten] that contain a vehicle [Fahrzeug] with a matching vehicle-id order by scheduled departure time asc. May contain outdated and / or future journeys. Journeys are limited to 22h ahead and a maximum of 7 days in the past.
     * @summary Returns all journeys for a specific vehicle
     * @param {VehiclesApiJourneysByVehicleIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public journeysByVehicleId(requestParameters: VehiclesApiJourneysByVehicleIdRequest, options?: AxiosRequestConfig) {
        return VehiclesApiFp(this.configuration).journeysByVehicleId(requestParameters.vehicleID, requestParameters.date, options).then((request) => request(this.axios, this.basePath));
    }
}



