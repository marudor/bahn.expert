/* tslint:disable */
/* eslint-disable */
/**
 * RIS::Journeys
 * ## Info  * powered by [DB Reisendeninformation](https://db-planet.deutschebahn.com/pages/reisendeninformation/apps/content/willkommen) * member of the [RIS-API](https://db.de/ris-api) family, the building kit for traveller informations * for details check out [RIS::Journeys](https://api-portal.hub.db.de/db/apis/product/ris-journeys) in the DB API Portal  ## Capabilities  ### Journey-Information  Provides detailed information for a particular journey [Fahrt] or a batch of up to 500 journeys, including:  * information on transport like journey-number [Fahrtnummer], category [externe Fahrtgattung], line [Linie], administration [Verwaltung], transport-type [Produktklasse] and direction texts [Richtungstexte] * departures [Abfahrten] and arrivals [Ankünfte] with information on cancellation [Haltausfall], additional [Zusatzhalt] and cancelled additional [zurückgenommener Zusatzhalt] * detailed information on schedule [Soll], forecast [Vorschau] and real times and scheduled and real platforms [Plattform / Gleis / Bussteig etc.] on a journey-event [Fahrtereignis] level * references to other transports representing replacement [Ersatz], relief [Entlastung], travels with [Vereinigung] including separation at [Trennung in] and continuation [Durchbindung] * cancelled stops [Haltausfall], additional stops [Zusatzhalt], cancelled additional stops [zurückgenommene Zusatzhalte] additional textual information [Freitexte] and possible restrictions on changing passengers [Fahrgastwechsel] and on demand stops [Bedarfshalt] * messages like disruptions [Störungen / Störungskommunikationen], attributes [Fahrtattribute / Sollmerkmale], ris cause codes [RIS Kundengrüner], ris quality deviations [RIS Qualitätsabweichungen] and general notes [Hinweistexte] * and much more  ### Journey-Searches  Powerful search functionallity for finding journeys by their journey-relation [fachliche Fahrt-Relation] or by attributes of a particular journey-event [Fahrtereignis], like  * date [Kalendertag der Fahrt] * journey number [Fahrtnummer] * administration [Verwaltung] * category [externe Gattung] * line [Linienname] * transport-types [Produktklassen]  ### Asynchronous change-notifications  The RIS-API event-system [RIS::Events](https://db-planet.deutschebahn.com/pages/reisendeninformation-ris-api/apps/content/events) can be used to get push-notifications in case information within RIS::Journeys changes. This enables use-cases like:  * refreshing ui in case information changes * doing something in your backend in case information changes * caching information and invalidate cache in case information changes  ## Getting Started  * visit our [documentation](https://ris-api.gitpages.tech.rz.db.de), learn how to [get started with openapi](https://developer-docs.deutschebahn.com/doku/apis/openapi.html) or how to [get started with asyncapi](https://developer-docs.deutschebahn.com/doku/apis/asyncapi.html) and check out our [coding-examples](https://developer-docs.deutschebahn.com/doku/apis) * bounty hunter, bug finder or just idea creator, we are thirsty to hear from you - get in touch with us by using [DB AnwenderEcho](https://anwenderecho.extranet.deutschebahn.com/ris-api/) or write an [email](mailto:ris-api@deutschebahn.com)
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: ris-fachbetrieb@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = 'http://localhost/ris-journeys/v2'.replace(/\/+$/, '');

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|',
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
  url: string;
  options: AxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration | undefined;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected axios: AxiosInstance = globalAxios,
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  constructor(
    public field: string,
    msg?: string,
  ) {
    super(msg);
    this.name = 'RequiredError';
  }
}
