/* tslint:disable */
/* eslint-disable */
/**
 * RIS::Journeys
 * ## Info  * powered by [DB Reisendeninformation](https://db-planet.deutschebahn.com/pages/reisendeninformation/apps/content/willkommen) * member of the [RIS-API](https://db.de/ris-api) family, the building kit for traveller informations * for details check out [RIS::Journeys](https://api-portal.hub.db.de/db/apis/product/ris-journeys) in the DB API Portal  ## Capabilities  ### Journey-Information  Provides detailed information for a particular journey [Fahrt] or a batch of up to 500 journeys, including:  * information on transport like journey-number [Fahrtnummer], category [externe Fahrtgattung], line [Linie], administration [Verwaltung], transport-type [Produktklasse] and direction texts [Richtungstexte] * departures [Abfahrten] and arrivals [Ankünfte] with information on cancellation [Haltausfall], additional [Zusatzhalt] and cancelled additional [zurückgenommener Zusatzhalt] * detailed information on schedule [Soll], forecast [Vorschau] and real times and scheduled and real platforms [Plattform / Gleis / Bussteig etc.] on a journey-event [Fahrtereignis] level * references to other transports representing replacement [Ersatz], relief [Entlastung], travels with [Vereinigung] including separation at [Trennung in] and continuation [Durchbindung] * cancelled stops [Haltausfall], additional stops [Zusatzhalt], cancelled additional stops [zurückgenommene Zusatzhalte] additional textual information [Freitexte] and possible restrictions on changing passengers [Fahrgastwechsel] and on demand stops [Bedarfshalt] * messages like disruptions [Störungen / Störungskommunikationen], attributes [Fahrtattribute / Sollmerkmale], ris cause codes [RIS Kundengrüner], ris quality deviations [RIS Qualitätsabweichungen] and general notes [Hinweistexte] * and much more  ### Journey-Searches  Powerful search functionallity for finding journeys by their journey-relation [fachliche Fahrt-Relation] or by attributes of a particular journey-event [Fahrtereignis], like  * date [Kalendertag der Fahrt] * journey number [Fahrtnummer] * administration [Verwaltung] * category [externe Gattung] * line [Linienname] * transport-types [Produktklassen]  ### Asynchronous change-notifications  The RIS-API event-system [RIS::Events](https://db-planet.deutschebahn.com/pages/reisendeninformation-ris-api/apps/content/events) can be used to get push-notifications in case information within RIS::Journeys changes. This enables use-cases like:  * refreshing ui in case information changes * doing something in your backend in case information changes * caching information and invalidate cache in case information changes  ## Getting Started  * visit our [documentation](https://ris-api.gitpages.tech.rz.db.de), learn how to [get started with openapi](https://developer-docs.deutschebahn.com/doku/apis/openapi.html) or how to [get started with asyncapi](https://developer-docs.deutschebahn.com/doku/apis/asyncapi.html) and check out our [coding-examples](https://developer-docs.deutschebahn.com/doku/apis) * bounty hunter, bug finder or just idea creator, we are thirsty to hear from you - get in touch with us by using [DB AnwenderEcho](https://anwenderecho.extranet.deutschebahn.com/ris-api/) or write an [email](mailto:ris-api@deutschebahn.com)
 *
 * The version of the OpenAPI document: 2.0.24
 * Contact: ris-fachbetrieb@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

export interface ConfigurationParameters {
	apiKey?:
		| string
		| Promise<string>
		| ((name: string) => string)
		| ((name: string) => Promise<string>);
	username?: string;
	password?: string;
	accessToken?:
		| string
		| Promise<string>
		| ((name?: string, scopes?: string[]) => string)
		| ((name?: string, scopes?: string[]) => Promise<string>);
	basePath?: string;
	baseOptions?: any;
	formDataCtor?: new () => any;
}

export class Configuration {
	/**
	 * parameter for apiKey security
	 * @param name security name
	 * @memberof Configuration
	 */
	apiKey?:
		| string
		| Promise<string>
		| ((name: string) => string)
		| ((name: string) => Promise<string>);
	/**
	 * parameter for basic security
	 *
	 * @type {string}
	 * @memberof Configuration
	 */
	username?: string;
	/**
	 * parameter for basic security
	 *
	 * @type {string}
	 * @memberof Configuration
	 */
	password?: string;
	/**
	 * parameter for oauth2 security
	 * @param name security name
	 * @param scopes oauth2 scope
	 * @memberof Configuration
	 */
	accessToken?:
		| string
		| Promise<string>
		| ((name?: string, scopes?: string[]) => string)
		| ((name?: string, scopes?: string[]) => Promise<string>);
	/**
	 * override base path
	 *
	 * @type {string}
	 * @memberof Configuration
	 */
	basePath?: string;
	/**
	 * base options for axios calls
	 *
	 * @type {any}
	 * @memberof Configuration
	 */
	baseOptions?: any;
	/**
	 * The FormData constructor that will be used to create multipart form data
	 * requests. You can inject this here so that execution environments that
	 * do not support the FormData class can still run the generated client.
	 *
	 * @type {new () => FormData}
	 */
	formDataCtor?: new () => any;

	constructor(param: ConfigurationParameters = {}) {
		this.apiKey = param.apiKey;
		this.username = param.username;
		this.password = param.password;
		this.accessToken = param.accessToken;
		this.basePath = param.basePath;
		this.baseOptions = param.baseOptions;
		this.formDataCtor = param.formDataCtor;
	}

	/**
	 * Check if the given MIME is a JSON MIME.
	 * JSON MIME examples:
	 *   application/json
	 *   application/json; charset=UTF8
	 *   APPLICATION/JSON
	 *   application/vnd.company+json
	 * @param mime - MIME (Multipurpose Internet Mail Extensions)
	 * @return True if the given MIME is JSON, false otherwise.
	 */
	public isJsonMime(mime: string): boolean {
		const jsonMime: RegExp =
			/^(application\/json|[^;\/ \t]+\/[^;\/ \t]+[+]json)[ \t]*(;.*)?$/i;
		return (
			mime !== null &&
			(jsonMime.test(mime) ||
				mime.toLowerCase() === 'application/json-patch+json')
		);
	}
}
