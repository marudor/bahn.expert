/* tslint:disable */
/* eslint-disable */
/**
 * RIS::Connections
 * ## Info  * powered by [DB Reisendeninformation](https://db-planet.deutschebahn.com/pages/reisendeninformation/apps/content/willkommen) * member of the [RIS-API](https://db.de/ris-api) family, the building kit for traveller information * for details check out [RIS::Connections](https://api-portal.hub.db.de/db/apis/product/ris-connections) in the DB API Portal  ## Capabilities  Provides a list of connections [Anschlüsse] for an arrival [Ankunft] of a journey [Fahrt], e.g. departures [Abfahrten] of other journeys at the stop place [Haltestelle] of the arrival within a given period.  * connection leaving from other stop places [Haltestellen] of the same group [Umstiegsbereich] (e.g. \'Frankfurt Hoch\' and \'Frankfurt Tief\' within the same station \'Frankfurt Hbf\') for example can be included * connections are classified whether they are based on predefined connections [Plananschlüsse] or based on time information * disposition status (e.g. waiting / not waiting) is included * connection evaluation [Anschlussbewertung] (e.g. safe, critical or impossible) is available for different types of travellers [Personae] * disruptions [Störungen] for connections and stop-place [Haltestelle]  The connection evaluation is based on  * the current information on forecast times and platforms of the arriving journey * the current information on forecast times and platforms for the connecting journeys * transfer times [Umstiegszeiten] within stop place (group) [Haltestelle (Umstiegsbereich)] based on real indoor routing information, differentiating barrier-free routes for travellers with reduced mobility [MER] * transfer times within stop place (group) [Haltestelle (Umstiegsbereich)] from official guidelines [Konzernrichtlinie] in case no indoor routing is available  Please note that the service also provides an information on whether the connection would have been reachable based on scheduled-times or not.  Connecting journeys are suppressed if  * all remaining stops of connecting journey can be reached in the same time or faster with remaining stops of arriving journey and * all remaining stops of connecting journey are preceding stops of the arriving journey  [Restlaufwegprüfung] * preceding stops of arriving journey are a subset of preceding stops of connecting journey [Vorlaufprüfung] * remaining stops of journeys are identical (fastest safe connection will remain) * journey occurs multiple times in list (this may happen due to departures of the same journey at different stop-places [Haltestellen] of a stop place group [Umstiegsbereich]; \'safest\' connection will remain)  Details on the logic can be found within the [RIS-API documentation space](https://ris.gitpages.tech.rz.db.de/risapi/documentation/04_Bausteine/030_RIS_Connections.html).  ## Limitations / Known Issues  * journeys are limited to 22h ahead  ## Getting Started  * visit our [documentation](https://ris-api.gitpages.tech.rz.db.de), learn how to [get started with openapi](https://developer-docs.deutschebahn.com/doku/apis/openapi.html) or how to [get started with asyncapi](https://developer-docs.deutschebahn.com/doku/apis/asyncapi.html) and check out our [coding-examples](https://developer-docs.deutschebahn.com/doku/apis) * bounty hunter, bug finder or just idea creator, we are thirsty to hear from you - get in touch with us by using [DB AnwenderEcho](https://anwenderecho.extranet.deutschebahn.com/ris-api/) or write an [email](mailto:ris-api@deutschebahn.com)  ## Changelog  <details>  ### 1.16.8  #### Changed  * fixed wrong length for `arrivalOrDepartureID`, `departureID` and `arrivalID` from `10` to `12`  </details>
 *
 * The version of the OpenAPI document: 1.16.8
 * Contact: ris-fachbetrieb@deutschebahn.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Information on the operator [Betreiber] and the administration [Verwaltung].
 * @export
 * @interface Administration
 */
export interface Administration {
    /**
     * Unique id of the administration [Verwaltung]. - 8 (S - S-Bahn Berlin) - 19 (EST - EUROSTAR) - 51 (PKP - PKP Intercity) - 53 (DPN - Nahreisezug) - 54 (CD - Ceske Drahy) - 55 (MAV - MAV) - 56 (ZSS - ZSSK) - 71 (REN - RENFE) - 74 (SJ - SJ) - 78 (HZ - HZPP) - 79 (SZ - Slovenske zeleznice) - 80 (DB - DB Fernverkehr AG) - 81 (ÖBB - Österreichische Bundesbahnen) - 82 (CFL - CFL) - 83 (TI - Trenitalia) - 84 (NS - Nederlandse Spoorwegen) - 85 (SBB - SBB) - 86 (DSB - Dänische Staatsbahnen) - 87 (SCF - SNCF) - 88 (SCB - SNCB) - 3018 (THA - THALYS) - 3189 (ARV - ARRIVA vlaky) - 3230 (VBG - vogtlandbahn - Die Länderbahn GmbH DLB) - 3236 (WB - WESTbahn) - 3246 (IC - RegioJet) - 3270 (TN - TRENORD) - 3288 (GW - GW Train Regio) - 3332 (KZC - KZC Doprava s.r.o.) - 3393 (TGV - SNCF Voyages Deutschland) - 3613 (StB - Steiermarkbahn und Bus GmbH) - 80001 (S - S-Bahn Berlin) - 550043 (GyS - GySEV) - 743051 (ST - Snälltåget) - 800151 (DB - DB Regio AG Nordost) - 800153 (DB - DB Regio AG Nordost) - 800154 (DB - DB Regio AG Nordost) - 800155 (DB - DB Regio AG Nordost) - 800156 (DB - DB Regio AG Nordost) - 800157 (DB - DB Regio AG Nordost) - 800158 (DB - DB Regio AG Nordost) - 800159 (DB - DB Regio AG Nordost) - 800160 (DB - DB Regio AG Nordost) - 800161 (DB - DB Regio AG Nordost) - 800163 (DB - DB Regio AG Nordost) - 800165 (DB - DB Regio AG Nordost) - 800166 (DB - DB Regio AG Nordost) - 800201 (DB - DB Regio AG Nord) - 800271 (DB - DB Regio AG Nord) - 800279 (DB - DB Regio AG Nord) - 800292 (DB - DB Regio AG Nord) - 800293 (DB - DB Regio AG Nord) - 800295 (DB - DB Regio AG Nord) - 800310 (DB - DB Regio AG NRW) - 800318 (DB - DB Arriva) - 800333 (DB - DB Regio AG NRW) - 800337 (DB - DB Regio AG NRW) - 800338 (DB - DB Regio AG NRW) - 800348 (DB - DB Regio AG NRW) - 800349 (DB - DB Regio AG NRW) - 800351 (DB - DB Regio AG NRW) - 800352 (DB - DB Regio AG NRW) - 800354 (DB - DB Regio AG NRW) - 800363 (DB - DB Regio AG NRW) - 800413 (DB - DB Regio AG Südost) - 800417 (DB - DB Regio AG Südost) - 800430 (EGB - DB RegioNetz Verkehrs GmbH Erzgebirgsbahn) - 800445 (DB - DB Regio AG Südost) - 800456 (DB - DB Regio AG Südost) - 800469 (DB - DB Regio AG Südost) - 800478 (DB - DB Regio AG Südost) - 800486 (DB - DB Regio AG Südost) - 800487 (DB - DB Regio AG Südost) - 800489 (DB - DB Regio AG Südost) - 800523 (KHB - DB RegioNetz Verkehrs GmbH Kurhessenbahn) - 800528 (S - DB Regio AG S-Bahn Rhein-Main) - 800535 (DB - DB Regio AG Mitte) - 800553 (DB - DB Regio AG Mitte) - 800571 (DB - DB Regio AG Mitte) - 800572 (DB - DB Regio AG Mitte) - 800574 (DB - DB Regio AG Mitte) - 800603 (WFB - DB RegioNetz Verkehrs GmbH Westfrankenbahn) - 800622 (DB - DB Regio AG Baden-Württemberg) - 800631 (DB - DB Regio AG Baden-Württemberg) - 800632 (DB - DB Regio AG Baden-Württemberg) - 800640 (SWX - DB Regio AG Mitte SÜWEX) - 800643 (S - DB Regio AG S-Bahn Stuttgart) - 800647 (DB - DB Regio AG Baden-Württemberg) - 800659 (DB - DB Regio AG Baden-Württemberg) - 800693 (DB - DB Regio AG Baden-Württemberg) - 800694 (DB - DB Regio AG Baden-Württemberg) - 800714 (DB - DB Regio AG Bayern) - 800720 (DB - DB Regio AG Bayern) - 800721 (DB - DB Regio AG Bayern) - 800725 (S - DB Regio AG S-Bahn München) - 800734 (DB - DB Regio AG Bayern) - 800742 (DB - DB Regio AG Bayern) - 800746 (DB - DB Regio AG Bayern) - 800755 (DB - DB Regio AG Bayern) - 800759 (DB - DB Regio AG Bayern) - 800765 (DB - DB Regio AG Bayern) - 800767 (DB - DB Regio AG Bayern) - 800772 (DB - DB Regio AG Bayern) - 800785 (DB - DB Regio AG Bayern) - 800790 (DB - DB Regio AG Bayern) - 801512 (DB - DB Regio AG Mitte) - 801513 (DB - DB Regio AG Mitte) - 801518 (DB - DB Regio AG Mitte) - 801526 (DB - DB Regio AG Mitte) - 801539 (DB - DB Regio AG Mitte) - 801566 (DB - DB Regio AG Mitte) - 801591 (DB - DB Regio AG Mitte) - 801599 (DB - DB Regio AG Mitte) - 810003 (mbs - Montafoner Bahn) - 810005 (ZB - Zillertalbahn) - 810007 (SLB - Salzburger Lokalbahnen) - 810008 (STH - Stern & Hafferl Verkehrs-GmbH) - 810009 (WiL - Wiener Linien) - 810011 (R - Schneebergbahn) - 810017 (NÖV - NÖ Verkehrsorganisations-ges.m.b.H.) - 810021 (NÖV - NÖ Verkehrsorganisations-ges.m.b.H.) - 810023 (NÖV - NÖ Verkehrsorganisations-ges.m.b.H.) - 810024 (P - Waldviertler Schmalspurbahn) - 810025 (SLB - Salzburger Lokalbahnen) - 810028 (GyS - GySEV) - 810031 (STR - Linz Linien AG (Straßenbahn Stadt Linz)) - 810043 (ÖPO - ÖBB-Postbus) - 840037 (Rnt - R-net) - 840052 (Brg - Breng) - 840054 (Vll - Valleilijn) - 840055 (BN - Blauwnet) - 840100 (NS - Nederlandse Spoorwegen) - 840500 (ARR - Arriva Nederland) - 850022 (AB - Appenzeller Bahnen) - 850023 (TPC - Transports Publics du Chablais) - 850029 (MBC - Transports de la région Morges-Bière-Cossonay) - 850031 (BDW - BDWM Transport) - 850032 (BLM - Lauterbrunnen-Mürren) - 850033 (BLS - BLS AG) - 850035 (BOB - Berner Oberland-Bahnen) - 850038 (ASM - Aare Seeland mobil) - 850042 (MVR - Montreux-Vevey-Riviera) - 850043 (CJ - Chemins de fer du Jura) - 850044 (TRN - Transports Publics Neuchâtelois SA) - 850046 (FB - Forchbahn) - 850047 (FLP - Lugano-Ponte Tresa) - 850048 (MGB - Matterhorn Gotthard Bahn (fo)) - 850049 (FAR - Ferrovie Autolinee Regionali Ticinesi) - 850051 (FW - Frauenfeld-Wil) - 850053 (TPF - Transports publics fribourgeois) - 850055 (LEB - Lausanne-Echallens-Bercher) - 850056 (ASM - Aare Seeland mobil) - 850061 (TMR - Transports de Martigny et Régions (mc)) - 850064 (MOB - Montreux-Oberland Bernois) - 850065 (THU - THURBO) - 850066 (NSt - Nyon-St-Cergue-Morez) - 850072 (RhB - Rhätische Bahn) - 850073 (TRN - Transports Publics Neuchâtelois SA) - 850074 (RA - Regionalps) - 850078 (SZU - Sihltal-Zürich-Uetliberg-Bahn) - 850081 (ASM - Aare Seeland mobil) - 850082 (SOB - Schweizerische Südostbahn (sob)) - 850086 (ZB - Zentralbahn) - 850088 (RBS - Regionalverkehr Bern-Solothurn) - 850093 (MGB - Matterhorn Gotthard Bahn (bvz)) - 850096 (WSB - Wynental-und Suhrental-Bahn) - 850097 (TRA - Transports Vallée de Joux-Yverdon-Ste-Croix) - 850193 (URh - Untersee und Rhein) - 850195 (SBS - Schweizerische Bodensee-Schiffahrtsgesellschaft) - 850360 (BSB - Bodensee-Schiffsbetriebe) - 850371 (BC - Société coopérative du Chemin de fer - Musée Blonay-Chamby) - 850801 (PAG - PostAuto Schweiz) - 850846 (RVS - Regionale Verkehrsbetriebe Schaffhausen) - 853186 (SZR - Schiff Eglisau-Tössegg) - 853271 (ANA - Association neuchâteloise des Amis du Tramway ANAT) - 857200 (SBB - SBB) - 857206 (SBB - SBB) - 857210 (SBB - SBB) - 857221 (THU - THURBO) - 857231 (SBB - SBB) - 859014 (VDB - Verein Dampfbahn Bern) - 859999 (SBB - SBB) - 860087 (ARR - Arriva Danmark) - 861002 (DSB - Dänische Staatsbahnen) - 8006000 (DB - DB Regio AG Baden-Württemberg) - 0S (S - S-Bahn Hamburg) - 51KD (KD - Koleje Dolnoslaskie) - 51PR (PR - Polregio) - 51PR-Q (PR - Polregio) - 51PR-R (PR - Polregio) - 51PR-S (PR - Polregio) - 8002A3 (DB - DB Regio AG Nord) - 8002B5 (DB - DB Regio AG Nord) - 8003A5 (DB - DB Regio AG NRW) - 8003G1 (DB - DB Regio AG NRW) - 8003G2 (DB - DB Regio AG NRW) - 8003H5 (DB - DB Regio AG NRW) - 8003L1 (DB - DB Regio AG NRW) - 8003L2 (DB - DB Regio AG NRW) - 8003RL (DB - DB Regio AG NRW) - 8003S (DB - DB Regio AG NRW) - 8004A9 (DB - DB Regio AG Südost) - 8004L1 (DB - DB Regio AG Südost) - 8004NT (DB - DB Regio AG Südost) - 8004OB (OBS - DB RegioNetz Verkehrs GmbH Oberweißbacher Berg+Schwarzatalbahn) - 8005A4 (DB - DB Regio AG Mitte) - 8005KG (DB - DB Regio AG Mitte) - 8005MW (DB - DB Regio AG Mitte) - 8005ND (DB - DB Regio AG Mitte) - 8005SV (DB - Rhein-Mosel-Bus Ahrweiler) - 8006A7 (WFB - DB RegioNetz Verkehrs GmbH Westfrankenbahn) - 8006C4 (DB - DB Regio AG Baden-Württemberg) - 8006C5 (DB - DB Regio AG Baden-Württemberg) - 8006C6 (DB - DB Regio AG Baden-Württemberg) - 8006D1 (DB - DB Regio AG Baden-Württemberg) - 8006D2 (DB - DB Regio AG Baden-Württemberg) - 8006D6 (DB - DB Regio AG Baden-Württemberg) - 8006D8 (DB - DB Regio AG Baden-Württemberg) - 8006SH (DB - DB Regio AG Baden-Württemberg) - 8007D4 (DB - DB Regio AG Bayern) - 8007D5 (DB - DB Regio AG Bayern) - 8007DU (DB - DB Regio AG Bayern) - 8007H1 (DB - DB Regio AG Bayern) - 8007H2 (DB - DB Regio AG Bayern) - 8013D (SOB - DB RegioNetz Verkehrs GmbH Südostbayernbahn) - 8013E (SOB - DB RegioNetz Verkehrs GmbH Südostbayernbahn) - 8015A1 (DB - DB Regio AG Mitte) - 8015A6 (DB - DB Regio AG Mitte) - 8015FR (DB - DB Regio AG Mitte) - 8015H9 (DB - DB Regio AG Mitte) - 80SEV (DB - DB Fernverkehr AG) - 80SSP (D - Sylt Shuttle Plus) - 80TRI (EC - DB/SBB/TI) - 81GE43 (DPN - Nahreisezug) - 857LEX (LEX - LEX) - 85DBSH (SBB - SBB) - A0 (AKN - AKN Eisenbahn GmbH) - A5 (VEN - Rhenus Veniro) - A6 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6FEX (DPN - Nahreisezug) - A6S1 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S11 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S12 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S31 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S32 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S34 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S4 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S41 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S42 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S5 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S51 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S52 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S6 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S7 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S71 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S8 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A6S81 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - A8N (ALX - alex - Die Länderbahn GmbH DLB) - A9 (ag - agilis) - aav006 (DPN - Nahreisezug) - aavARN (DPN - Nahreisezug) - aavARR (DPN - Nahreisezug) - aavASE (DPN - Nahreisezug) - aavDKB (DPN - Nahreisezug) - aavNET (DPN - Nahreisezug) - aavTEC (DPN - Nahreisezug) - AB (ABR - SWEG Bahn Stuttgart GmbH) - ABIRE (IRE - SWEG Bahn Stuttgart GmbH) - ABRB (RB - SWEG Bahn Stuttgart GmbH) - ABRE (RE - SWEG Bahn Stuttgart GmbH) - ak_AK (AK - Autokraft) - ak_DRN (DIB - Dithmarschenbus (DB Regio Bus Nord GmbH)) - ak_SVG (SVG - Sylter Verkehrsgesellschaft) - ak_SVL (DPN - Nahreisezug) - ak_SWN (DPN - Nahreisezug) - ak_VIN (DPN - Nahreisezug) - ak_VKP (DPN - Nahreisezug) - ak_VSF (DPN - Nahreisezug) - akAK_A (DPN - Nahreisezug) - akAKTI (DPN - Nahreisezug) - akDRNA (DPN - Nahreisezug) - akECKE (DPN - Nahreisezug) - akKVGK (DPN - Nahreisezug) - akROH (DPN - Nahreisezug) - akSFKK (DPN - Nahreisezug) - akTRAN (DPN - Nahreisezug) - akVINA (DPN - Nahreisezug) - akWDR (DPN - Nahreisezug) - AL (DWE - Dessau-Wörlitzer Eisenbahn) - ald012 (DPN - Nahreisezug) - ald020 (DPN - Nahreisezug) - ald021 (DPN - Nahreisezug) - ald022 (DPN - Nahreisezug) - ald023 (DPN - Nahreisezug) - ald024 (DPN - Nahreisezug) - ald025 (DPN - Nahreisezug) - ald030 (DPN - Nahreisezug) - ald044 (DPN - Nahreisezug) - ald046 (DPN - Nahreisezug) - ald065 (DPN - Nahreisezug) - ald067 (DPN - Nahreisezug) - ald069 (DPN - Nahreisezug) - ald072 (DPN - Nahreisezug) - ald073 (DPN - Nahreisezug) - ald075 (DPN - Nahreisezug) - ald077 (DPN - Nahreisezug) - ald083 (DPN - Nahreisezug) - ald084 (DPN - Nahreisezug) - ald087 (DPN - Nahreisezug) - ald091 (DPN - Nahreisezug) - ald093 (DPN - Nahreisezug) - ald094 (DPN - Nahreisezug) - ald095 (DPN - Nahreisezug) - ald096 (DPN - Nahreisezug) - ald099 (DPN - Nahreisezug) - AM (ABR - Abellio Rail Mitteldeutschland GmbH) - AMHBX (HBX - Abellio Rail Mitteldeutschland GmbH) - AMRB (RB - Abellio Rail Mitteldeutschland GmbH) - AMRE (RE - Abellio Rail Mitteldeutschland GmbH) - AMS (S - Abellio Rail Mitteldeutschland GmbH) - aoeBus (DPN - Nahreisezug) - apg__1 (DPN - Nahreisezug) - avv009 (DPN - Nahreisezug) - avvBus (DPN - Nahreisezug) - B1 (DB - DB Regio AG Nord) - B1EDZ (DPN - Nahreisezug) - B2 (DB - DB Regio AG NRW) - B3 (P - Brohltalbahn) - B4 (S - DB Regio AG S-Bahn Rhein-Main) - B5 (DB - DB Regio AG Mitte) - B6 (DB - DB Regio AG Baden-Württemberg) - B7 (DPN - Nahreisezug) - bacBus (DPN - Nahreisezug) - bambus (DPN - Nahreisezug) - bayaut (DPN - Nahreisezug) - BB (DB - DB Regio AG Nordost) - bcl001 (DPN - Nahreisezug) - BD (SDG - SDG Sächsische Dampfeisenbahngesellschaft mbH) - BE (BE - Bentheimer Eisenbahn) - bod000 (DPN - Nahreisezug) - bod001 (DPN - Nahreisezug) - bod002 (DPN - Nahreisezug) - bod003 (DPN - Nahreisezug) - bod004 (DPN - Nahreisezug) - bod005 (DPN - Nahreisezug) - bod006 (DPN - Nahreisezug) - bod008 (DPN - Nahreisezug) - bod012 (DPN - Nahreisezug) - bod013 (DPN - Nahreisezug) - bod014 (DPN - Nahreisezug) - bod015 (DPN - Nahreisezug) - bod018 (DPN - Nahreisezug) - bod019 (DPN - Nahreisezug) - bod020 (DPN - Nahreisezug) - bod031 (DPN - Nahreisezug) - BurBus (DPN - Nahreisezug) - BW (DB - DB Regio AG Nordost) - byr001 (DPN - Nahreisezug) - C6 (KTB - Kandertalbahn) - C8 (LEO - Chiemgauer Lokalbahn) - CD (CB - City-Bahn Chemnitz) - cha016 (DPN - Nahreisezug) - cobBus (DPN - Nahreisezug) - css002 (P - Chiemseebahn) - csscss (DPN - Nahreisezug) - cw001 (DPN - Nahreisezug) - cw010 (DPN - Nahreisezug) - CX (MRB - Mitteldeutsche Regiobahn) - CXRB (RB - Mitteldeutsche Regiobahn) - CXRE (RE - Mitteldeutsche Regiobahn) - D3 (RTB - Rurtalbahn) - daf005 (DPN - Nahreisezug) - dgfBus (DPN - Nahreisezug) - drbBUS (DPN - Nahreisezug) - E0 (EVB - EVB ELBE-WESER GmbH) - E3 (P - Kasbachtalbahn) - EB (RB - Erfurter Bahn GmbH) - ED (FEG - Freiberger Eisenbahngesellschaft) - estbus (DPN - Nahreisezug) - etgBus (DPN - Nahreisezug) - EX (RE - Erfurter Bahn GmbH) - F1 (DPN - Nahreisezug) - F7 (RB - Bodensee-Oberschwaben-Bahn) - fds002 (DPN - Nahreisezug) - fdsBus (DPN - Nahreisezug) - FisBus (DPN - Nahreisezug) - FLX10 (FLX - FlixTrain) - FLX11 (FLX - FlixTrain) - FLX15 (FLX - FlixTrain) - FLX20 (FLX - FlixTrain) - FLX30 (FLX - FlixTrain) - FLX35 (FLX - FlixTrain) - frg001 (DPN - Nahreisezug) - fuebus (DPN - Nahreisezug) - fwzBus (DPN - Nahreisezug) - GA (GA - Go-Ahead Baden-Württemberg GmbH) - GAIRE (IRE - Go-Ahead Baden-Württemberg GmbH) - GAMEX (MEX - Go-Ahead Baden-Württemberg GmbH) - GARB (RB - Go-Ahead Baden-Württemberg GmbH) - GARE (RE - Go-Ahead Baden-Württemberg GmbH) - ge2GEV (DPN - Nahreisezug) - ge3GEV (DPN - Nahreisezug) - geiBus (DPN - Nahreisezug) - gf2001 (DPN - Nahreisezug) - gfn011 (DPN - Nahreisezug) - gfn012 (DPN - Nahreisezug) - gfn015 (DPN - Nahreisezug) - gfn020 (DPN - Nahreisezug) - ghuBus (DPN - Nahreisezug) - grhBus (DPN - Nahreisezug) - GY (GA - Go-Ahead Bayern GmbH) - GYRB (RB - Go-Ahead Bayern GmbH) - GYRE (RE - Go-Ahead Bayern GmbH) - H4 (RT - RegioTram) - H6 (HzL - Hohenzollerische Landesbahn (SWEG)) - H7 (HzL - Hohenzollerische Landesbahn (SWEG)) - hggBus (DPN - Nahreisezug) - HL (HSB - Harzer Schmalspurbahn) - hnv030 (DPN - Nahreisezug) - hnv031 (DPN - Nahreisezug) - hnv034 (DPN - Nahreisezug) - hnv050 (DPN - Nahreisezug) - hof004 (DPN - Nahreisezug) - hvv001 (DPN - Nahreisezug) - hvvDAH (DPN - Nahreisezug) - hvvHAD (DPN - Nahreisezug) - hvvHHA (DPN - Nahreisezug) - hvvHOX (DPN - Nahreisezug) - hvvKVI (DPN - Nahreisezug) - hvvLIZ (DPN - Nahreisezug) - hvvRAO (DPN - Nahreisezug) - hvvRMV (DPN - Nahreisezug) - hvvVHH (DPN - Nahreisezug) - hvvVLP (DPN - Nahreisezug) - invBus (DPN - Nahreisezug) - K4 (HLB - HLB Hessenbahn GmbH) - K4RB (HLB - HLB Hessenbahn GmbH) - K4RE (HLB - HLB Hessenbahn GmbH) - K6 (AVG - Albtal-Verkehrs-Gesellschaft mbH) - KD (KD - Köln-Düsseldorfer Deutsche Rheinschifffahrt GmbH) - kis001 (DPN - Nahreisezug) - kolbus (DPN - Nahreisezug) - kraBus (DPN - Nahreisezug) - krgBus (DPN - Nahreisezug) - kulBus (DPN - Nahreisezug) - kvg001 (DPN - Nahreisezug) - kvv002 (DPN - Nahreisezug) - kvv003 (DPN - Nahreisezug) - kvv004 (DPN - Nahreisezug) - kvv006 (DPN - Nahreisezug) - kvv010 (DPN - Nahreisezug) - kvv011 (DPN - Nahreisezug) - kvv012 (DPN - Nahreisezug) - kvv015 (DPN - Nahreisezug) - kvv017 (DPN - Nahreisezug) - kvv021 (DPN - Nahreisezug) - kvv023 (DPN - Nahreisezug) - kvv024 (DPN - Nahreisezug) - kvv025 (DPN - Nahreisezug) - kvv027 (DPN - Nahreisezug) - kvv028 (DPN - Nahreisezug) - kvv030 (DPN - Nahreisezug) - kvv041 (DPN - Nahreisezug) - kvv22E (DPN - Nahreisezug) - kvvFEX (DPN - Nahreisezug) - L7 (SBB - SBB GmbH) - L8 (BRB - Bayerische Regiobahn) - lamBus (DPN - Nahreisezug) - lanGEV (DPN - Nahreisezug) - LD (TL - trilex  - Die Länderbahn GmbH DLB) - LDTLX (TLX - trilex-express - Die Länderbahn GmbH DLB) - lklGEV (DPN - Nahreisezug) - M1 (P - Museumsbahn) - M2 (S - REGIOBAHN) - M2RE (R - REGIOBAHN) - M4 (VSE - Verein Sächsischer Eisenbahnfreunde) - M8 (BRB - Bayerische Regiobahn) - M9 (MSB - Mainschleifenbahn) - marmar (DPN - Nahreisezug) - marovf (DPN - Nahreisezug) - marrbk (DPN - Nahreisezug) - mvgb10 (DPN - Nahreisezug) - mvgb14 (DPN - Nahreisezug) - mvgb15 (DPN - Nahreisezug) - mvgb16 (DPN - Nahreisezug) - mvv099 (DPN - Nahreisezug) - mvvEBU (DPN - Nahreisezug) - mvvRBU (DPN - Nahreisezug) - mvvRFB (DPN - Nahreisezug) - MW (MBB - Mecklenburgische Bäderbahn Molli) - mzbBUS (DPN - Nahreisezug) - N0 (neg - Norddeutsche Eisenbahn Gesellschaft) - N1 (NWB - NordWestBahn) - N2 (NWB - NordWestBahn) - N4 (RB - cantus Verkehrsgesellschaft) - N4RE (RE - cantus Verkehrsgesellschaft) - N6 (SWE - Südwestdeutsche Landesverkehrs-GmbH) - N8 (P - BayernBahn GmbH) - nas001 (DPN - Nahreisezug) - nas003 (DPN - Nahreisezug) - nasBLK (DPN - Nahreisezug) - nasBOE (DPN - Nahreisezug) - nasDVG (DPN - Nahreisezug) - nasFWL (DPN - Nahreisezug) - nasHAB (DPN - Nahreisezug) - nasHAT (DPN - Nahreisezug) - nasHVB (DPN - Nahreisezug) - nasHVG (DPN - Nahreisezug) - nasKSB (DPN - Nahreisezug) - nasLVB (DPN - Nahreisezug) - nasLVT (DPN - Nahreisezug) - nasMBB (DPN - Nahreisezug) - nasMBT (DPN - Nahreisezug) - nasMQ (DPN - Nahreisezug) - nasNJL (DPN - Nahreisezug) - nasNTB (DPN - Nahreisezug) - nasOBS (DPN - Nahreisezug) - nasOVH (DPN - Nahreisezug) - nasRBM (DPN - Nahreisezug) - nasRL (DPN - Nahreisezug) - nasSAW (DPN - Nahreisezug) - nasSDL (DPN - Nahreisezug) - nasTHU (DPN - Nahreisezug) - nasVET (DPN - Nahreisezug) - nasVGS (DPN - Nahreisezug) - nasZel (DPN - Nahreisezug) - NB (RB - NEB Niederbarnimer Eisenbahn) - NBRB12 (RB - NEB Niederbarnimer Eisenbahn) - NBRB25 (RB - NEB Niederbarnimer Eisenbahn) - NBRB26 (RB - NEB Niederbarnimer Eisenbahn) - NBRB27 (RB - NEB Niederbarnimer Eisenbahn) - NBRB35 (RB - NEB Niederbarnimer Eisenbahn) - NBRB36 (RB - NEB Niederbarnimer Eisenbahn) - NBRB54 (RB - NEB Niederbarnimer Eisenbahn) - NBRB60 (RB - NEB Niederbarnimer Eisenbahn) - NBRB61 (RB - NEB Niederbarnimer Eisenbahn) - NBRB62 (RB - NEB Niederbarnimer Eisenbahn) - NBRB63 (RB - NEB Niederbarnimer Eisenbahn) - nvpBUS (DPN - Nahreisezug) - NWBus (NWB - NordWestBahn) - NX (NX - National Express) - NXRB (RB - National Express) - NXRE (RE - National Express) - NY (MSM - MSM Partyzug) - NYUEX (UEX - Urlaubs-Express) - NZ (RE - DB Fernverkehr AG) - O0 (NBE - Nordbahn Eisenbahngesellschaft) - O7 (ÖBA - Öchsle-Bahn-Betriebsgesellschaft mbH) - O9 (OPB - oberpfalzbahn - Die Länderbahn GmbH DLB) - O9X (OPX - oberpfalz-express - Die Länderbahn GmbH DLB) - OD (SOE - Sächsisch-Oberlausitzer Eisenbahngesellschaft) - omp001 (DPN - Nahreisezug) - omp003 (DPN - Nahreisezug) - omp007 (DPN - Nahreisezug) - omp014 (DPN - Nahreisezug) - omp022 (DPN - Nahreisezug) - omp024 (DPN - Nahreisezug) - omp033 (DPN - Nahreisezug) - omp035 (DPN - Nahreisezug) - omp043 (DPN - Nahreisezug) - omp047 (DPN - Nahreisezug) - omp048 (DPN - Nahreisezug) - omp050 (DPN - Nahreisezug) - omp051 (DPN - Nahreisezug) - omp052 (DPN - Nahreisezug) - omp053 (DPN - Nahreisezug) - omp054 (DPN - Nahreisezug) - omp055 (DPN - Nahreisezug) - omp056 (DPN - Nahreisezug) - omp057 (DPN - Nahreisezug) - omp058 (DPN - Nahreisezug) - omp059 (DPN - Nahreisezug) - omp062 (DPN - Nahreisezug) - omp063 (DPN - Nahreisezug) - omp065 (DPN - Nahreisezug) - omp066 (DPN - Nahreisezug) - omp067 (DPN - Nahreisezug) - omp069 (DPN - Nahreisezug) - omp070 (DPN - Nahreisezug) - omp071 (DPN - Nahreisezug) - omp072 (DPN - Nahreisezug) - omp073 (DPN - Nahreisezug) - omp074 (DPN - Nahreisezug) - omp075 (DPN - Nahreisezug) - omp077 (DPN - Nahreisezug) - omp079 (DPN - Nahreisezug) - omp085 (DPN - Nahreisezug) - omp086 (DPN - Nahreisezug) - omp088 (DPN - Nahreisezug) - omp092 (DPN - Nahreisezug) - omp093 (DPN - Nahreisezug) - omp094 (DPN - Nahreisezug) - omp095 (DPN - Nahreisezug) - omp096 (DPN - Nahreisezug) - omp098 (DPN - Nahreisezug) - omp099 (DPN - Nahreisezug) - omsBus (DPN - Nahreisezug) - ova002 (DPN - Nahreisezug) - ova035 (DPN - Nahreisezug) - ovaOVA (DPN - Nahreisezug) - ovfOVF (DPN - Nahreisezug) - OWBus (OE - Ostdeutsche Eisenbahn GmbH) - owl020 (DPN - Nahreisezug) - owl021 (DPN - Nahreisezug) - owl022 (DPN - Nahreisezug) - owl023 (DPN - Nahreisezug) - owl024 (DPN - Nahreisezug) - owl025 (DPN - Nahreisezug) - owl026 (DPN - Nahreisezug) - owl027 (DPN - Nahreisezug) - owl028 (DPN - Nahreisezug) - owl029 (DPN - Nahreisezug) - owl031 (STB - moBiel GmbH) - owl032 (DPN - Nahreisezug) - owl038 (DPN - Nahreisezug) - owl039 (DPN - Nahreisezug) - owl040 (DPN - Nahreisezug) - owl041 (DPN - Nahreisezug) - owl042 (DPN - Nahreisezug) - owl043 (DPN - Nahreisezug) - owl044 (DPN - Nahreisezug) - owl045 (DPN - Nahreisezug) - owl049 (DPN - Nahreisezug) - owl050 (DPN - Nahreisezug) - owl051 (DPN - Nahreisezug) - owl052 (DPN - Nahreisezug) - owl053 (DPN - Nahreisezug) - owl054 (DPN - Nahreisezug) - owl059 (DPN - Nahreisezug) - OWRB (RB - Ostdeutsche Eisenbahn GmbH) - OWRB13 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB14 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB15 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB19 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB33 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB46 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB51 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB64 (RB - Ostdeutsche Eisenbahn GmbH) - OWRB65 (RB - Ostdeutsche Eisenbahn GmbH) - OWRE (RE - Ostdeutsche Eisenbahn GmbH) - OWRE2 (RE - Ostdeutsche Eisenbahn GmbH) - OWRE4 (RE - Ostdeutsche Eisenbahn GmbH) - pafBus (DPN - Nahreisezug) - PB (RB - Hanseatische Eisenbahn GmbH) - pbaATT (DPN - Nahreisezug) - pbaitr (DPN - Nahreisezug) - pbaKB (ÖPO - ÖBB-Postbus) - pbaVVT (DPN - Nahreisezug) - pbaW3 (DPN - Nahreisezug) - pbaWR (ÖPO - ÖBB-Postbus) - prg091 (DPN - Nahreisezug) - R0 (ENO - enno) - R1 (ME - metronom) - R2 (ERB - eurobahn) - R2RB (RB - eurobahn) - R2RE (RE - eurobahn) - R4 (VIA - VIAS Rail GmbH) - R4NRN (VIA - VIAS Rail GmbH) - R4RB35 (VIA - VIAS Rail GmbH) - R4RH (VIA - VIAS GmbH) - R4S7 (VIA - VIAS Rail GmbH) - R4WEST (VIA - VIAS Rail GmbH) - R7 (HzL - Hohenzollerische Landesbahn (SWEG)) - rabRAB (RAB - Regionalverkehr Alb-Bodensee) - rbgAST (SBG - Südbadenbus) - rbgBBO (DPN - Nahreisezug) - rbgBER (DPN - Nahreisezug) - rbgBRN (BRN - Busverkehr Rhein-Neckar) - rbgBVH (DPN - Nahreisezug) - rbgFAB (DPN - Nahreisezug) - rbgFMO (FMO - Friedrich Müller Omnibusunternehmen GmbH) - rbgHMO (DPN - Nahreisezug) - rbgKNU (DPN - Nahreisezug) - rbgOVZ (DPN - Nahreisezug) - rbgRBG (DPN - Nahreisezug) - rbgRBS (RBS - Regiobus Stuttgart) - rbgRVS (RVS - Südwestbus) - rbgRVs (RVS - Südwestbus) - rbgSBG (SBG - Südbadenbus) - rbgWMR (DPN - Nahreisezug) - rboMB (DPN - Nahreisezug) - rbpORN (ORN - ORN Omnibusverkehr Rhein-Nahe GmbH (Rhein-Nahe-Bus)) - rbpRMA (DB - Rhein-Mosel-Bus Ahrweiler) - rbpRMB (DB - RMB Rhein-Mosel-Bus) - rbpRPB (RPB - Rheinpfalzbus) - rbpRU1 (DPN - Nahreisezug) - rbpRU2 (DPN - Nahreisezug) - rbpSAA (DPN - Nahreisezug) - rbpSWM (DB - DB Regio Bus Mitte) - rbr002 (DPN - Nahreisezug) - rbr003 (DPN - Nahreisezug) - rbr004 (DPN - Nahreisezug) - rbrBOS (DPN - Nahreisezug) - rbrOST (DPN - Nahreisezug) - rbrSBE (DPN - Nahreisezug) - rbrSEV (DPN - Nahreisezug) - rbrSNB (DPN - Nahreisezug) - RC (AZS - AUTOZUG Sylt) - RD (VBG - vogtlandbahn - Die Länderbahn GmbH DLB) - rmbwug (DPN - Nahreisezug) - rmpREB (DPN - Nahreisezug) - rmpRSG (DPN - Nahreisezug) - rmpUBB (DPN - Nahreisezug) - rmtEVA (DPN - Nahreisezug) - rmtEWB (DPN - Nahreisezug) - rmtFiS (DPN - Nahreisezug) - rmtGVB (DPN - Nahreisezug) - rmtIOV (DPN - Nahreisezug) - rmtJES (DPN - Nahreisezug) - rmtJNV (DPN - Nahreisezug) - rmtKOM (DPN - Nahreisezug) - rmtLWW (DPN - Nahreisezug) - rmtMBB (DPN - Nahreisezug) - rmtMKI (DPN - Nahreisezug) - rmtNDH (DPN - Nahreisezug) - rmtOVG (DPN - Nahreisezug) - rmtPVG (DPN - Nahreisezug) - rmtRBM (DPN - Nahreisezug) - rmtSal (DPN - Nahreisezug) - rmtSNG (DPN - Nahreisezug) - rmtSWG (DPN - Nahreisezug) - rmtTWS (DPN - Nahreisezug) - rmtVHO (DPN - Nahreisezug) - rmtVLG (DPN - Nahreisezug) - rmtVLO (DPN - Nahreisezug) - rmtVUS (DPN - Nahreisezug) - rmtVUW (DPN - Nahreisezug) - rmtVWG (DPN - Nahreisezug) - rmtVWO (DPN - Nahreisezug) - rmtWER (DPN - Nahreisezug) - rmtWGT (DPN - Nahreisezug) - rmv001 (DPN - Nahreisezug) - rmv007 (DPN - Nahreisezug) - rmv019 (DPN - Nahreisezug) - rmv020 (DPN - Nahreisezug) - rmv031 (DPN - Nahreisezug) - rmv045 (DPN - Nahreisezug) - rmv053 (DPN - Nahreisezug) - rmv061 (DPN - Nahreisezug) - rmv087 (DPN - Nahreisezug) - rmv099 (DPN - Nahreisezug) - rmv106 (DPN - Nahreisezug) - rmv117 (DPN - Nahreisezug) - rmv156 (DPN - Nahreisezug) - rmv158 (DPN - Nahreisezug) - rmv162 (DPN - Nahreisezug) - rmv163 (DPN - Nahreisezug) - rmv165 (DPN - Nahreisezug) - rmv168 (DPN - Nahreisezug) - rmv196 (DPN - Nahreisezug) - rmv211 (DPN - Nahreisezug) - rmv218 (DPN - Nahreisezug) - rmv222 (DPN - Nahreisezug) - rmv223 (DPN - Nahreisezug) - rmv224 (DPN - Nahreisezug) - rmv234 (DPN - Nahreisezug) - rmv238 (DPN - Nahreisezug) - rmv242 (DPN - Nahreisezug) - rmv243 (DPN - Nahreisezug) - rmv251 (DPN - Nahreisezug) - rmv254 (DPN - Nahreisezug) - rmv255 (DPN - Nahreisezug) - rmv257 (DPN - Nahreisezug) - rmv258 (DPN - Nahreisezug) - rmv260 (DPN - Nahreisezug) - rmv264 (DPN - Nahreisezug) - rmv265 (DPN - Nahreisezug) - rmv269 (DPN - Nahreisezug) - rmv272 (DPN - Nahreisezug) - rmv275 (DPN - Nahreisezug) - rmv277 (DPN - Nahreisezug) - rmv278 (DPN - Nahreisezug) - rmv282 (DPN - Nahreisezug) - rmv283 (DPN - Nahreisezug) - rmv284 (DPN - Nahreisezug) - rmv289 (DPN - Nahreisezug) - rmv290 (DPN - Nahreisezug) - rmv293 (DPN - Nahreisezug) - rmv294 (DPN - Nahreisezug) - rmv295 (DPN - Nahreisezug) - rmv297 (DPN - Nahreisezug) - rmv301 (DPN - Nahreisezug) - rmv304 (DPN - Nahreisezug) - rmv305 (DPN - Nahreisezug) - rmv306 (DPN - Nahreisezug) - rmv307 (DPN - Nahreisezug) - rmv308 (DPN - Nahreisezug) - rmv309 (DPN - Nahreisezug) - rmv316 (DPN - Nahreisezug) - rmv317 (DPN - Nahreisezug) - rmv319 (DPN - Nahreisezug) - rmv322 (DPN - Nahreisezug) - rmv323 (DPN - Nahreisezug) - rmv333 (DPN - Nahreisezug) - rmv392 (DPN - Nahreisezug) - rmv394 (DPN - Nahreisezug) - rmv395 (DPN - Nahreisezug) - rmv396 (DPN - Nahreisezug) - rmv397 (DPN - Nahreisezug) - rmv398 (DPN - Nahreisezug) - rmv399 (DPN - Nahreisezug) - rmv400 (DPN - Nahreisezug) - rmv401 (DPN - Nahreisezug) - rmv403 (DPN - Nahreisezug) - rmv404 (DPN - Nahreisezug) - rmv405 (DPN - Nahreisezug) - rmv406 (DPN - Nahreisezug) - rmv408 (DPN - Nahreisezug) - rmv412 (DPN - Nahreisezug) - rmv413 (DPN - Nahreisezug) - rmvALV (DPN - Nahreisezug) - rmvARG (DPN - Nahreisezug) - rmvBBW (DPN - Nahreisezug) - rmvBEC (DPN - Nahreisezug) - rmvCBU (DPN - Nahreisezug) - rmvDBR (DPN - Nahreisezug) - rmvERL (DPN - Nahreisezug) - rmvESE (DPN - Nahreisezug) - rmvFBB (DPN - Nahreisezug) - rmvFGR (DPN - Nahreisezug) - rmvFRI (DPN - Nahreisezug) - rmvFro (DPN - Nahreisezug) - rmvFSB (DPN - Nahreisezug) - rmvFUL (DPN - Nahreisezug) - rmvGBG (DPN - Nahreisezug) - rmvGIB (DPN - Nahreisezug) - rmvHEB (DPN - Nahreisezug) - rmvHGS (DPN - Nahreisezug) - rmvHLB (DPN - Nahreisezug) - rmvHTR (DPN - Nahreisezug) - rmvJUN (DPN - Nahreisezug) - rmvKAE (DPN - Nahreisezug) - rmvKOF (DPN - Nahreisezug) - rmvKRT (DPN - Nahreisezug) - rmvLGG (DPN - Nahreisezug) - rmvMUL (DPN - Nahreisezug) - rmvNVG (DPN - Nahreisezug) - rmvPoh (DPN - Nahreisezug) - rmvRAC (DPN - Nahreisezug) - rmvREV (DPN - Nahreisezug) - rmvRIN (DPN - Nahreisezug) - rmvRTO (DPN - Nahreisezug) - rmvRTV (DPN - Nahreisezug) - rmvSBB (DPN - Nahreisezug) - rmvSBO (DPN - Nahreisezug) - rmvSFB (DPN - Nahreisezug) - rmvSIL (DPN - Nahreisezug) - rmvSLM (DPN - Nahreisezug) - rmvSWF (DPN - Nahreisezug) - rmvSWK (DPN - Nahreisezug) - rmvSWN (DPN - Nahreisezug) - rmvSWR (DPN - Nahreisezug) - rmvTRD (DPN - Nahreisezug) - rmvVBB (DPN - Nahreisezug) - rmvVES (DPN - Nahreisezug) - rmvVIL (DPN - Nahreisezug) - rmvVLD (DPN - Nahreisezug) - rmvVUW (DPN - Nahreisezug) - rmvWB (DPN - Nahreisezug) - rmvWIN (DPN - Nahreisezug) - rmvWIR (DPN - Nahreisezug) - rmvWIS (DPN - Nahreisezug) - rmvWZV (DPN - Nahreisezug) - rohBus (DPN - Nahreisezug) - RS (RE - Regionalverkehre Start Deutschland GmbH) - RSNM (RB - Regionalverkehre Start Deutschland GmbH (Start Niedersachsen-Mitte)) - RSTN (STN - Regionalverkehre Start Deutschland GmbH (Start Taunus)) - RSUE (RE - Regionalverkehre Start Deutschland GmbH (Start Unterelbe)) - rvgRVG (DPN - Nahreisezug) - rvoRVO (RVO - Regionalverkehr Oberbayern) - rvvRVV (DPN - Nahreisezug) - RW (PRE - Pressnitztalbahn) - S0 (DPN - Nahreisezug) - S1 (DPN - Nahreisezug) - S3 (SWB - Stadtwerke Bonn) - S6 (SWE - SWEG Südwestdeutsche Landesverkehrs-GmbH) - S7 (DPN - Nahreisezug) - S9 (ag - agilis) - SAB (SAB - Schwäbische Alb-Bahn) - SAD003 (SAD - Vinschgaubahn) - sadBUS (DPN - Nahreisezug) - SB (RB - Süd-Thüringen-Bahn GmbH) - sbpMU (DPN - Nahreisezug) - sbpRW (DPN - Nahreisezug) - sbpSK (DPN - Nahreisezug) - SBSBUS (DPN - Nahreisezug) - sbsbus (DPN - Nahreisezug) - SBSIRE (IRE - SWEG Bahn Stuttgart GmbH) - SBSMEX (MEX - SWEG Bahn Stuttgart GmbH) - SBSRB (RB - SWEG Bahn Stuttgart GmbH) - SBSRE (RE - SWEG Bahn Stuttgart GmbH) - SBX (RE - Süd-Thüringen-Bahn GmbH) - SD (DB - DB Regio AG Südost) - smrBus (DPN - Nahreisezug) - smrRfb (DPN - Nahreisezug) - snp001 (DPN - Nahreisezug) - snp002 (DPN - Nahreisezug) - spaBus (DPN - Nahreisezug) - srlBus (DPN - Nahreisezug) - sswssw (DPN - Nahreisezug) - sva006 (DPN - Nahreisezug) - svaBUS (DPN - Nahreisezug) - svaSTR (DPN - Nahreisezug) - svr001 (DPN - Nahreisezug) - SW (DPN - Nahreisezug) - swg099 (SWE - SWEG Südwestdeutsche Landesverkehrs-GmbH) - swgSWB (DPN - Nahreisezug) - swlbus (DPN - Nahreisezug) - swm001 (DPN - Nahreisezug) - swm002 (DPN - Nahreisezug) - swm003 (DPN - Nahreisezug) - swpVBP (DPN - Nahreisezug) - swt_31 (DPN - Nahreisezug) - swt_32 (DPN - Nahreisezug) - swt_33 (DPN - Nahreisezug) - swt_35 (DPN - Nahreisezug) - swt_36 (DPN - Nahreisezug) - swt_37 (DPN - Nahreisezug) - swt_38 (DPN - Nahreisezug) - swt_39 (DPN - Nahreisezug) - swt001 (DPN - Nahreisezug) - swt007 (DPN - Nahreisezug) - swt009 (DPN - Nahreisezug) - swt014 (DPN - Nahreisezug) - swt021 (DPN - Nahreisezug) - swt022 (DPN - Nahreisezug) - swt023 (DPN - Nahreisezug) - swt024 (DPN - Nahreisezug) - swt025 (DPN - Nahreisezug) - swt026 (DPN - Nahreisezug) - swt028 (DPN - Nahreisezug) - swt030 (DPN - Nahreisezug) - swt031 (DPN - Nahreisezug) - swt032 (DPN - Nahreisezug) - swt033 (DPN - Nahreisezug) - swtb00 (DPN - Nahreisezug) - swtb01 (DPN - Nahreisezug) - swtb03 (DPN - Nahreisezug) - swtb12 (DPN - Nahreisezug) - swtb16 (DPN - Nahreisezug) - swtb19 (DPN - Nahreisezug) - swtb20 (DPN - Nahreisezug) - swtb21 (DPN - Nahreisezug) - swtb22 (DPN - Nahreisezug) - swtb24 (DPN - Nahreisezug) - swtb25 (DPN - Nahreisezug) - swtb27 (DPN - Nahreisezug) - swtb29 (DPN - Nahreisezug) - T8 (BRB - Bayerische Regiobahn) - TDHS (S - S-Bahn Hannover (Transdev)) - TDRR (RRB - RheinRuhrBahn (Transdev)) - tgo099 (SWE - SWEG Südwestdeutsche Landesverkehrs-GmbH) - TR (RB - MittelrheinBahn (Trans Regio)) - TRI (TRI - TRI Train Rental GmbH) - tub001 (DPN - Nahreisezug) - tub003 (DPN - Nahreisezug) - tub004 (DPN - Nahreisezug) - tub007 (DPN - Nahreisezug) - tub008 (DPN - Nahreisezug) - tub009 (DPN - Nahreisezug) - tub010 (DPN - Nahreisezug) - tub015 (DPN - Nahreisezug) - tub022 (DPN - Nahreisezug) - tub030 (DPN - Nahreisezug) - tub031 (DPN - Nahreisezug) - tub033 (DPN - Nahreisezug) - tub034 (DPN - Nahreisezug) - tub035 (DPN - Nahreisezug) - tub036 (DPN - Nahreisezug) - tub038 (DPN - Nahreisezug) - tub041 (DPN - Nahreisezug) - tub042 (DPN - Nahreisezug) - tub044 (DPN - Nahreisezug) - tub048 (DPN - Nahreisezug) - tub049 (DPN - Nahreisezug) - tub051 (DPN - Nahreisezug) - tub053 (DPN - Nahreisezug) - tub054 (DPN - Nahreisezug) - tub061 (DPN - Nahreisezug) - tub068 (DPN - Nahreisezug) - tub069 (DPN - Nahreisezug) - tub071 (DPN - Nahreisezug) - tub072 (DPN - Nahreisezug) - tub079 (DPN - Nahreisezug) - tub090 (DPN - Nahreisezug) - tub093 (DPN - Nahreisezug) - tub094 (DPN - Nahreisezug) - tub095 (DPN - Nahreisezug) - tut001 (DPN - Nahreisezug) - UW (UBB - Usedomer Bäderbahn) - V6 (vlx - vlexx) - V6RB (RB - vlexx) - V6RE (RE - vlexx) - V7 (SVG - SVG Schienenverkehrsgesellschaft Stuttgart) - V9 (P - Wanderbahn im Regental) - vabsta (DPN - Nahreisezug) - vag010 (DPN - Nahreisezug) - vag011 (DPN - Nahreisezug) - vag013 (DPN - Nahreisezug) - vag014 (DPN - Nahreisezug) - vag060 (DPN - Nahreisezug) - vanbus (DPN - Nahreisezug) - vanstr (DPN - Nahreisezug) - vanuba (DPN - Nahreisezug) - vbb070 (DPN - Nahreisezug) - vbb071 (DPN - Nahreisezug) - vbb072 (DPN - Nahreisezug) - vbbBBG (DPN - Nahreisezug) - vbbBRB (DPN - Nahreisezug) - vbbBRT (DPN - Nahreisezug) - vbbBVB (DPN - Nahreisezug) - vbbBVF (DPN - Nahreisezug) - vbbBVT (DPN - Nahreisezug) - vbbBVU (DPN - Nahreisezug) - vbbCNB (DPN - Nahreisezug) - vbbCNT (DPN - Nahreisezug) - vbbFFB (DPN - Nahreisezug) - vbbFFT (DPN - Nahreisezug) - vbbGLA (DPN - Nahreisezug) - vbbHVG (DPN - Nahreisezug) - vbbMOB (DPN - Nahreisezug) - vbbORP (DPN - Nahreisezug) - vbbOSL (DPN - Nahreisezug) - vbbOVG (DPN - Nahreisezug) - vbbREI (DPN - Nahreisezug) - vbbRPM (DPN - Nahreisezug) - vbbRVS (DPN - Nahreisezug) - vbbSCH (DPN - Nahreisezug) - vbbSRS (DPN - Nahreisezug) - vbbSTE (DPN - Nahreisezug) - vbbSTF (DPN - Nahreisezug) - vbbSTG (DPN - Nahreisezug) - vbbUVG (DPN - Nahreisezug) - vbbVEE (DPN - Nahreisezug) - vbbVIB (DPN - Nahreisezug) - vbbVIF (DPN - Nahreisezug) - vbbVIT (DPN - Nahreisezug) - vbbVTF (DPN - Nahreisezug) - vgb00 (DPN - Nahreisezug) - vgm013 (DPN - Nahreisezug) - vgm020 (DPN - Nahreisezug) - vgm022 (DPN - Nahreisezug) - vgm023 (DPN - Nahreisezug) - vgm024 (DPN - Nahreisezug) - vgm025 (DPN - Nahreisezug) - vgm026 (DPN - Nahreisezug) - vgm028 (DPN - Nahreisezug) - vgm029 (DPN - Nahreisezug) - vgm030 (DPN - Nahreisezug) - vgm031 (DPN - Nahreisezug) - vgm032 (DPN - Nahreisezug) - vgm033 (DPN - Nahreisezug) - vgm034 (DPN - Nahreisezug) - vgm035 (DPN - Nahreisezug) - vgm036 (DPN - Nahreisezug) - vgm037 (DPN - Nahreisezug) - vgm038 (DPN - Nahreisezug) - vgm039 (DPN - Nahreisezug) - vgm040 (DPN - Nahreisezug) - vgm041 (DPN - Nahreisezug) - vgm042 (DPN - Nahreisezug) - vgm044 (DPN - Nahreisezug) - vgm045 (DPN - Nahreisezug) - vgm046 (DPN - Nahreisezug) - vgm047 (DPN - Nahreisezug) - vgm050 (DPN - Nahreisezug) - vgm051 (DPN - Nahreisezug) - vgm053 (DPN - Nahreisezug) - vgm060 (DPN - Nahreisezug) - vgm079 (DPN - Nahreisezug) - vgm092 (DPN - Nahreisezug) - vgm093 (WB - Westfalenbus) - vgm094 (DPN - Nahreisezug) - vgmb93 (WB - Westfalenbus) - vgn_16 (DPN - Nahreisezug) - vgn043 (DPN - Nahreisezug) - vgn061 (DPN - Nahreisezug) - vgn063 (DPN - Nahreisezug) - vgn065 (DPN - Nahreisezug) - vgn068 (DPN - Nahreisezug) - vgn083 (DPN - Nahreisezug) - vgsARG (DPN - Nahreisezug) - vgsBar (DPN - Nahreisezug) - vgsBTV (DPN - Nahreisezug) - vgsKIR (DPN - Nahreisezug) - vgsKVS (DPN - Nahreisezug) - vgsLay (DPN - Nahreisezug) - vgsMLB (DPN - Nahreisezug) - vgsNVG (DPN - Nahreisezug) - vgsSAM (DPN - Nahreisezug) - vgsSBB (DPN - Nahreisezug) - vgsSBS (S - Saarbahn) - vgsVVB (DPN - Nahreisezug) - vgsZar (DPN - Nahreisezug) - vhb000 (DPN - Nahreisezug) - vhb002 (DPN - Nahreisezug) - vhb003 (DPN - Nahreisezug) - vmo004 (DPN - Nahreisezug) - vmo008 (DPN - Nahreisezug) - vmo010 (DPN - Nahreisezug) - vmo012 (DPN - Nahreisezug) - vmo050 (DPN - Nahreisezug) - vmo099 (DPN - Nahreisezug) - vms001 (DPN - Nahreisezug) - vms002 (DPN - Nahreisezug) - vms010 (DPN - Nahreisezug) - vms011 (DPN - Nahreisezug) - vms012 (DPN - Nahreisezug) - vms014 (DPN - Nahreisezug) - vms020 (DPN - Nahreisezug) - vms022 (DPN - Nahreisezug) - vms023 (DPN - Nahreisezug) - vms024 (DPN - Nahreisezug) - vms025 (DPN - Nahreisezug) - vms031 (DPN - Nahreisezug) - vms032 (DPN - Nahreisezug) - vms040 (DPN - Nahreisezug) - vms041 (DPN - Nahreisezug) - vms042 (DPN - Nahreisezug) - vms043 (DPN - Nahreisezug) - vms044 (DPN - Nahreisezug) - vms046 (DPN - Nahreisezug) - vms047 (DPN - Nahreisezug) - vms051 (DPN - Nahreisezug) - vms056 (DPN - Nahreisezug) - vms060 (DPN - Nahreisezug) - vms061 (DPN - Nahreisezug) - vms062 (DPN - Nahreisezug) - vms063 (DPN - Nahreisezug) - vms064 (DPN - Nahreisezug) - vms070 (DPN - Nahreisezug) - vms076 (DPN - Nahreisezug) - vms077 (DPN - Nahreisezug) - vms080 (DPN - Nahreisezug) - vms081 (DPN - Nahreisezug) - vms099 (DPN - Nahreisezug) - voe_12 (DPN - Nahreisezug) - voe_SB (DPN - Nahreisezug) - voe002 (DPN - Nahreisezug) - voe011 (DPN - Nahreisezug) - voe012 (DPN - Nahreisezug) - voe013 (DPN - Nahreisezug) - voe015 (DPN - Nahreisezug) - voe021 (DPN - Nahreisezug) - voe022 (DPN - Nahreisezug) - voe023 (DPN - Nahreisezug) - voe024 (DPN - Nahreisezug) - voe027 (DPN - Nahreisezug) - voe028 (DPN - Nahreisezug) - voe029 (DPN - Nahreisezug) - voe081 (DPN - Nahreisezug) - voe091 (DPN - Nahreisezug) - voeALT (DPN - Nahreisezug) - voeBU3 (DPN - Nahreisezug) - voeBU4 (DPN - Nahreisezug) - voeFAE (DPN - Nahreisezug) - voeSTR (DPN - Nahreisezug) - voeSWB (DPN - Nahreisezug) - vogBus (DPN - Nahreisezug) - von026 (DPN - Nahreisezug) - von027 (DPN - Nahreisezug) - von030 (DPN - Nahreisezug) - von031 (DPN - Nahreisezug) - von032 (DPN - Nahreisezug) - von042 (DPN - Nahreisezug) - von044 (DPN - Nahreisezug) - von052 (DPN - Nahreisezug) - von062 (DPN - Nahreisezug) - von064 (DPN - Nahreisezug) - von065 (DPN - Nahreisezug) - von069 (DPN - Nahreisezug) - vpeAST (DPN - Nahreisezug) - vpeBus (DPN - Nahreisezug) - vph063 (DPN - Nahreisezug) - vph071 (DPN - Nahreisezug) - vph072 (DPN - Nahreisezug) - vph073 (DPN - Nahreisezug) - vph074 (DPN - Nahreisezug) - vph075 (DPN - Nahreisezug) - vph076 (DPN - Nahreisezug) - vph077 (DPN - Nahreisezug) - vph078 (DPN - Nahreisezug) - vph079 (DPN - Nahreisezug) - vph080 (DPN - Nahreisezug) - vph081 (DPN - Nahreisezug) - vph082 (DPN - Nahreisezug) - vpo099 (DPN - Nahreisezug) - vrm002 (DPN - Nahreisezug) - vrm005 (DPN - Nahreisezug) - vrm006 (DPN - Nahreisezug) - vrm007 (DPN - Nahreisezug) - vrm008 (DPN - Nahreisezug) - vrm009 (DPN - Nahreisezug) - vrm011 (DPN - Nahreisezug) - vrm014 (DPN - Nahreisezug) - vrm015 (DPN - Nahreisezug) - vrm016 (DPN - Nahreisezug) - vrm017 (DPN - Nahreisezug) - vrm019 (DPN - Nahreisezug) - vrm020 (DPN - Nahreisezug) - vrm025 (DPN - Nahreisezug) - vrm031 (DPN - Nahreisezug) - vrm032 (DPN - Nahreisezug) - vrm036 (DPN - Nahreisezug) - vrm061 (DPN - Nahreisezug) - vrm066 (DPN - Nahreisezug) - vrm067 (DPN - Nahreisezug) - vrm068 (DPN - Nahreisezug) - vrm069 (DPN - Nahreisezug) - vrm070 (DPN - Nahreisezug) - vrm072 (DPN - Nahreisezug) - vrm073 (DPN - Nahreisezug) - vrm074 (DPN - Nahreisezug) - vrm077 (DPN - Nahreisezug) - vrm078 (DPN - Nahreisezug) - vrm083 (DPN - Nahreisezug) - vrm084 (DPN - Nahreisezug) - vrm085 (DPN - Nahreisezug) - vrn008 (STR - Rhein-Neckar-Verkehr GmbH) - vrn011 (STR - Rhein-Neckar-Verkehr GmbH) - vrn016 (DPN - Nahreisezug) - vrn017 (DPN - Nahreisezug) - vrn018 (DPN - Nahreisezug) - vrn019 (DPN - Nahreisezug) - vrn020 (DPN - Nahreisezug) - vrn022 (MNV - MNV Mittelhaardt Nahverkehrsgesellschaft) - vrn023 (DPN - Nahreisezug) - vrn025 (DPN - Nahreisezug) - vrn026 (DPN - Nahreisezug) - vrn027 (DPN - Nahreisezug) - vrn028 (H&P - Hetzler & Pfadt) - vrn029 (DPN - Nahreisezug) - vrn030 (DPN - Nahreisezug) - vrn032 (PAL - PalatinaBus) - vrn033 (DPN - Nahreisezug) - vrn040 (DPN - Nahreisezug) - vrn041 (DPN - Nahreisezug) - vrn043 (DPN - Nahreisezug) - vrn047 (DPN - Nahreisezug) - vrn049 (DPN - Nahreisezug) - vrn050 (QNV - QNV Queichtal Nahverkehr) - vrn051 (DPN - Nahreisezug) - vrn053 (DPN - Nahreisezug) - vrn057 (DPN - Nahreisezug) - vrn058 (DPN - Nahreisezug) - vrn059 (DPN - Nahreisezug) - vrn062 (DPN - Nahreisezug) - vrn068 (DPN - Nahreisezug) - vrn073 (DPN - Nahreisezug) - vrn074 (DPN - Nahreisezug) - vrn076 (DPN - Nahreisezug) - vrn078 (DPN - Nahreisezug) - vrn079 (DPN - Nahreisezug) - vrn080 (DPN - Nahreisezug) - vrn081 (DPN - Nahreisezug) - vrn082 (DPN - Nahreisezug) - vrn083 (DPN - Nahreisezug) - vrn095 (DPN - Nahreisezug) - vrnOEG (RNV - Rhein-Neckar-Verkehr GmbH (Oberrheinische Eisenbahn)) - vrnRHB (RNV - Rhein-Neckar-Verkehr GmbH (Rhein-Haardtbahn)) - vrr001 (DPN - Nahreisezug) - vrr002 (DPN - Nahreisezug) - vrr010 (DPN - Nahreisezug) - vrr011 (DPN - Nahreisezug) - vrr012 (DPN - Nahreisezug) - vrr013 (DPN - Nahreisezug) - vrr015 (DPN - Nahreisezug) - vrr016 (DPN - Nahreisezug) - vrr018 (DPN - Nahreisezug) - vrr020 (DPN - Nahreisezug) - vrr021 (DPN - Nahreisezug) - vrr023 (DPN - Nahreisezug) - vrr025 (DPN - Nahreisezug) - vrr029 (DPN - Nahreisezug) - vrr030 (DPN - Nahreisezug) - vrr031 (DPN - Nahreisezug) - vrr032 (DPN - Nahreisezug) - vrr033 (DPN - Nahreisezug) - vrr034 (DPN - Nahreisezug) - vrr035 (DPN - Nahreisezug) - vrr036 (DPN - Nahreisezug) - vrr037 (DPN - Nahreisezug) - vrr038 (DPN - Nahreisezug) - vrr039 (DPN - Nahreisezug) - vrr040 (DPN - Nahreisezug) - vrr045 (DPN - Nahreisezug) - vrr050 (DPN - Nahreisezug) - vrr060 (DPN - Nahreisezug) - vrr064 (DPN - Nahreisezug) - vrr065 (DPN - Nahreisezug) - vrr066 (DPN - Nahreisezug) - vrr070 (DPN - Nahreisezug) - vrr071 (DPN - Nahreisezug) - vrr072 (DPN - Nahreisezug) - vrr073 (DPN - Nahreisezug) - vrr075 (DPN - Nahreisezug) - vrr076 (DPN - Nahreisezug) - vrr077 (DPN - Nahreisezug) - vrr080 (DPN - Nahreisezug) - vrr088 (BVR - Busverkehr Rheinland) - vrs001 (DPN - Nahreisezug) - vrs003 (DPN - Nahreisezug) - vrs006 (DPN - Nahreisezug) - vrs008 (DPN - Nahreisezug) - vrs011 (DPN - Nahreisezug) - vrs012 (DPN - Nahreisezug) - vrs013 (DPN - Nahreisezug) - vrs014 (DPN - Nahreisezug) - vrs016 (DPN - Nahreisezug) - vrs017 (DPN - Nahreisezug) - vrs021 (DPN - Nahreisezug) - vrs022 (DPN - Nahreisezug) - vrs023 (DPN - Nahreisezug) - vrs024 (DPN - Nahreisezug) - vrs025 (DPN - Nahreisezug) - vrs028 (DPN - Nahreisezug) - vrs029 (DPN - Nahreisezug) - vrs060 (DPN - Nahreisezug) - vrs063 (DPN - Nahreisezug) - vsh001 (DPN - Nahreisezug) - vsh010 (DPN - Nahreisezug) - vsh020 (DPN - Nahreisezug) - vuvab (VU - Verkehrsgesellschaft mbH Untermain) - vvs012 (WEG - Württembergische Eisenbahn-Gesellschaft mbH) - vvs020 (DPN - Nahreisezug) - vvs021 (DPN - Nahreisezug) - vvs030 (DPN - Nahreisezug) - vvs031 (DPN - Nahreisezug) - vvs033 (DPN - Nahreisezug) - vvs034 (DPN - Nahreisezug) - vvs035 (DPN - Nahreisezug) - vvs041 (DPN - Nahreisezug) - vvs050 (DPN - Nahreisezug) - vvs051 (DPN - Nahreisezug) - vvs052 (DPN - Nahreisezug) - vvs055 (DPN - Nahreisezug) - vvs077 (DPN - Nahreisezug) - vvs078 (DPN - Nahreisezug) - vwmBuS (DPN - Nahreisezug) - vwmNAH (DPN - Nahreisezug) - vwmStr (DPN - Nahreisezug) - vwmVLP (DPN - Nahreisezug) - vws003 (DPN - Nahreisezug) - vws005 (DPN - Nahreisezug) - vws007 (DPN - Nahreisezug) - W0 (WDR - Wyker Dampfschiffs-Reederei Föhr-Amrum GmbH) - W2 (Dab - Daadetalbahn) - W3 (WFB - WestfalenBahn) - W6 (WTB - Wutachtalbahn) - W9 (WBA - waldbahn - Die Länderbahn GmbH DLB) - wabBus (DPN - Nahreisezug) - web_AN (DPN - Nahreisezug) - web_HB (DPN - Nahreisezug) - web_OF (DPN - Nahreisezug) - web_OS (DPN - Nahreisezug) - web002 (DPN - Nahreisezug) - web005 (DPN - Nahreisezug) - web006 (DPN - Nahreisezug) - web018 (DPN - Nahreisezug) - web019 (DPN - Nahreisezug) - webALL (DPN - Nahreisezug) - webAND (DPN - Nahreisezug) - webARE (DPN - Nahreisezug) - webAST (DPN - Nahreisezug) - webBBU (DPN - Nahreisezug) - webBEC (DPN - Nahreisezug) - webBPU (DPN - Nahreisezug) - webBRU (DPN - Nahreisezug) - webBTR (STR - Bremer Straßenbahn AG) - webBVB (DPN - Nahreisezug) - webBVS (DPN - Nahreisezug) - webDEL (DPN - Nahreisezug) - webDHE (DPN - Nahreisezug) - webEDZ (DPN - Nahreisezug) - webEMS (DPN - Nahreisezug) - webEVB (DPN - Nahreisezug) - webFAS (DPN - Nahreisezug) - webFIS (DPN - Nahreisezug) - webFLX (DPN - Nahreisezug) - webGEB (DPN - Nahreisezug) - webGER (DPN - Nahreisezug) - webGIE (DPN - Nahreisezug) - webGOE (DPN - Nahreisezug) - webGOS (DPN - Nahreisezug) - webHAR (DPN - Nahreisezug) - webHDK (DPN - Nahreisezug) - webHKR (DPN - Nahreisezug) - webHM (DPN - Nahreisezug) - webHUT (DPN - Nahreisezug) - webHVG (DPN - Nahreisezug) - webJAC (DPN - Nahreisezug) - webjan (DPN - Nahreisezug) - webKAR (DPN - Nahreisezug) - webKBA (DPN - Nahreisezug) - webKRR (DPN - Nahreisezug) - webKVG (DPN - Nahreisezug) - webLSE (DPN - Nahreisezug) - webMEY (DPN - Nahreisezug) - webNIE (DPN - Nahreisezug) - webNOH (DPN - Nahreisezug) - webNOR (DPN - Nahreisezug) - webONS (DPN - Nahreisezug) - webOS1 (DPN - Nahreisezug) - webOSV (DPN - Nahreisezug) - webRA1 (DPN - Nahreisezug) - webRBG (DPN - Nahreisezug) - webRVH (DPN - Nahreisezug) - webSAL (DPN - Nahreisezug) - webSTO (DPN - Nahreisezug) - webSVG (DPN - Nahreisezug) - webSWE (DPN - Nahreisezug) - webSWH (DPN - Nahreisezug) - webSZG (DPN - Nahreisezug) - webTMW (DPN - Nahreisezug) - webUEB (DPN - Nahreisezug) - webUET (STB - üstra Hannoversche Verkehrsbetriebe AG) - webUFF (DPN - Nahreisezug) - webVBB (DPN - Nahreisezug) - webVBN (DPN - Nahreisezug) - webVBW (DPN - Nahreisezug) - webVGE (DPN - Nahreisezug) - webVGH (DPN - Nahreisezug) - webVGP (DPN - Nahreisezug) - webVGV (DPN - Nahreisezug) - webVGW (DPN - Nahreisezug) - webVL1 (DPN - Nahreisezug) - webVLG (DPN - Nahreisezug) - webVO8 (DPN - Nahreisezug) - webVOH (DPN - Nahreisezug) - webVOL (DPN - Nahreisezug) - webVOS (DPN - Nahreisezug) - webVSN (DPN - Nahreisezug) - webVWG (DPN - Nahreisezug) - webWHV (DPN - Nahreisezug) - webWIN (DPN - Nahreisezug) - webWIS (DPN - Nahreisezug) - webWOB (DPN - Nahreisezug) - webWSF (DPN - Nahreisezug) - webXOS (WEB - Weser-Ems-Bus) - webYGO (RBB - Regionalbus Braunschweig GmbH) - webYUE (RBB - Regionalbus Braunschweig GmbH) - webYUZ (DPN - Nahreisezug) - wenBUS (DPN - Nahreisezug) - WL (RB - Kreisbahn Mansfelder Land) - wstwst (DPN - Nahreisezug) - wvvBUS (DPN - Nahreisezug) - wvvSTR (DPN - Nahreisezug) - wzlBus (DPN - Nahreisezug) - X1 (erx - erixx) - X2 (erx - erixx) - Y0 (SCH - Adler-Schiffe) - Y8 (BRB - Bayerische Regiobahn) - Z8 (BZB - Bayerische Zugspitzbahn) - Z9 (P - Rhön-Zügle) - zsbteg (DPN - Nahreisezug) - zvv008 (DPN - Nahreisezug) - zvv018 (DPN - Nahreisezug) - zvv019 (DPN - Nahreisezug) - zvv041 (DPN - Nahreisezug) note: list is not exhausting and more undocumented values may be returned
     * @type {string}
     * @memberof Administration
     */
    'administrationID': string;
    /**
     * Unique code of the operator [Betreiber].
     * @type {string}
     * @memberof Administration
     */
    'operatorCode': string;
    /**
     * Name of the operator [Betreiber].
     * @type {string}
     * @memberof Administration
     */
    'operatorName': string;
}
/**
 * Codeshare [Code-Teilungen mit Flügen verschiedener Fluggesellschaften] information for a particular journey event.
 * @export
 * @interface CodeShare
 */
export interface CodeShare {
    /**
     * Code of cooperating airline [IATA-Code der Fluggesellschaft].
     * @type {string}
     * @memberof CodeShare
     */
    'airlineCode': string;
    /**
     * Flightnumber of cooperating airline journey [Flugnummer des Fluges der kooperierenden Fluggesellschaft].
     * @type {number}
     * @memberof CodeShare
     */
    'flightnumber': number;
}
/**
 * Connection [Anschluss] information for transport arriving at particular stop-place [Haltestelle].
 * @export
 * @interface ConnectionArrival
 */
export interface ConnectionArrival {
    /**
     * ID of journey [FahrtID].
     * @type {string}
     * @memberof ConnectionArrival
     */
    'journeyID': string;
    /**
     * Unique id for arrival [AnkunftsID].
     * @type {string}
     * @memberof ConnectionArrival
     */
    'arrivalID': string;
    /**
     * Indicates whether arrival has been canceled [Haltausfall].
     * @type {boolean}
     * @memberof ConnectionArrival
     */
    'arrivalCanceled': boolean;
    /**
     * Scheduled arrival time [Ankunftszeit Soll] of stop as fully qualified date (for instance \'2019-08-19T12:56:14+02:00\' or \'2019-08-19T10:56:14Z\').
     * @type {string}
     * @memberof ConnectionArrival
     */
    'arrivalTimeSchedule'?: string;
    /**
     *
     * @type {TimeType}
     * @memberof ConnectionArrival
     */
    'arrivalTimeType': TimeType;
    /**
     * Best known arrival time information of stop as fully qualified date (for instance \'2019-08-19T12:56:14+02:00\' or \'2019-08-19T10:56:14Z\').
     * @type {string}
     * @memberof ConnectionArrival
     */
    'arrivalTime': string;
    /**
     * Scheduled arrival platform [Gleis, Bahnsteig, Plattform - Plan].
     * @type {string}
     * @memberof ConnectionArrival
     */
    'arrivalPlatformSchedule': string;
    /**
     * Estimated arrival platform [Gleis, Bahnsteig, Plattform - Vorschau].
     * @type {string}
     * @memberof ConnectionArrival
     */
    'arrivalPlatform': string;
    /**
     * List of available connections [Anschlüsse] with connection status [Anschlussbewertung].
     * @type {Array<StopDepartureConnect>}
     * @memberof ConnectionArrival
     */
    'connections'?: Array<StopDepartureConnect>;
    /**
     * List of disruptions [Störungsinformationen] for particular stop-place (or members of the requested stop-place group) the connection list applies to.
     * @type {Array<DisruptionCommunicationEmbeddedLegacy>}
     * @memberof ConnectionArrival
     */
    'disruptions'?: Array<DisruptionCommunicationEmbeddedLegacy>;
}


/**
 * Connection evaluation [Anschlussbewertung] for different personae.
 * @export
 * @interface ConnectionEvaluationLegacy
 */
export interface ConnectionEvaluationLegacy {
    /**
     *
     * @type {PersonaType}
     * @memberof ConnectionEvaluationLegacy
     */
    'persona': PersonaType;
    /**
     * Distance in meters.
     * @type {number}
     * @memberof ConnectionEvaluationLegacy
     */
    'distance'?: number;
    /**
     * Duration of connect in ISO8601 (for instance \'P3Y6M4DT12H30M17S\').
     * @type {string}
     * @memberof ConnectionEvaluationLegacy
     */
    'duration': string;
    /**
     *
     * @type {ConnectionStatus}
     * @memberof ConnectionEvaluationLegacy
     */
    'status': ConnectionStatus;
}


/**
 * Platform hint for connection. - SAME_PLATFORM (Connection takes place on same platform [gleiches Gleis]) - SAME_PHYSICAL_PLATFORM (Connection takes place on same physical platform [gleicher Bahnsteig]) - DIFFERING_PLATFORM (Connection takes place on differing platform)
 * @export
 * @enum {string}
 */

export const ConnectionPlatformHint = {
    SamePlatform: 'SAME_PLATFORM',
    SamePhysicalPlatform: 'SAME_PHYSICAL_PLATFORM',
    DifferingPlatform: 'DIFFERING_PLATFORM'
} as const;

export type ConnectionPlatformHint = typeof ConnectionPlatformHint[keyof typeof ConnectionPlatformHint];


/**
 * Source of connection information. - CALCULATED_SCHEDULE (Connection is based on scheduled information) - CALCULATED_PREVIEW (Connection is based on preview / real information) - DISPOSITION (Connection is based on disposition decission)
 * @export
 * @enum {string}
 */

export const ConnectionSource = {
    CalculatedSchedule: 'CALCULATED_SCHEDULE',
    CalculatedPreview: 'CALCULATED_PREVIEW',
    Disposition: 'DISPOSITION'
} as const;

export type ConnectionSource = typeof ConnectionSource[keyof typeof ConnectionSource];


/**
 * Connecting status for different personas. - SAFE (Connection is considered as safe, enough time left) - CRITICAL (Connection is considered as critical, only little time left) - IMPOSSIBLE (Connection is consiered as impossible, not enough time to reach) - UNKNOWN (Connection status is unknown)
 * @export
 * @enum {string}
 */

export const ConnectionStatus = {
    Safe: 'SAFE',
    Critical: 'CRITICAL',
    Impossible: 'IMPOSSIBLE',
    Unknown: 'UNKNOWN'
} as const;

export type ConnectionStatus = typeof ConnectionStatus[keyof typeof ConnectionStatus];


/**
 * Contractual knowledge for \'Vertragswissen\', will be removed later.
 * @export
 * @interface ContractualKnowledge
 */
export interface ContractualKnowledge {
    /**
     *
     * @type {StopPlaceEmbedded}
     * @memberof ContractualKnowledge
     */
    'originSchedule': StopPlaceEmbedded;
    /**
     * Scheduled time [Soll] of journey destination [Zielhalt] as fully qualified date (for instance \'2019-08-19T12:56:14+02:00\' or \'2019-08-19T10:56:14Z\').
     * @type {string}
     * @memberof ContractualKnowledge
     */
    'destinationTimeSchedule': string;
    /**
     *
     * @type {TimeType}
     * @memberof ContractualKnowledge
     */
    'destinationTimeType': TimeType;
    /**
     * Best known time information of journey destination [Zielhalt] as fully qualified date (for instance \'2019-08-19T12:56:14+02:00\' or \'2019-08-19T10:56:14Z\').
     * @type {string}
     * @memberof ContractualKnowledge
     */
    'destinationTime': string;
}


/**
 * Optional direction information [Richtungstext] for a particular transport that may differ from the destination [Zielhalt] on some parts of the journey. Take care that a text and / or a particular stop-place [Haltestelle] may be provided.
 * @export
 * @interface DirectionInfo
 */
export interface DirectionInfo {
    /**
     * Direction text [Richtungstext]. Must not necessarly be the name of a real stop-place [Haltestelle] (for instance \'Richtung Automobilmesse\'). For instance before the stop \'fare\' the transport has direction \'fare\', after \'fare\' has been reached maybe \'central station\' or \'airport\'.
     * @type {string}
     * @memberof DirectionInfo
     */
    'text'?: string;
    /**
     * Optional list of stop-places [Haltestellen] the direction text refers to. May be more than one stop-place for cases like for instance \'Richtung Messe & Hauptbahnhof\'.
     * @type {Array<StopPlaceEmbedded>}
     * @memberof DirectionInfo
     */
    'stopPlaces'?: Array<StopPlaceEmbedded>;
}
/**
 * Status of disposition [Dispositionsentscheidung des Disponenten] with optional alternative transports [Anschlussalternativen].
 * @export
 * @interface DispositionStatus
 */
export interface DispositionStatus {
    /**
     *
     * @type {DispositionType}
     * @memberof DispositionStatus
     */
    'type': DispositionType;
    /**
     * Suggested alternative transports given by the managing clerk [Disponent], may be empty and may not be part of the original connection options (time window, filters etc.).
     * @type {Array<TransportPublicDestination>}
     * @memberof DispositionStatus
     */
    'alternatives'?: Array<TransportPublicDestination>;
}


/**
 * Status for disposition of connection. - WAITING (Disposition decission is transport must wait) - NOT_WAITING (Disposition decission is transport must not wait)
 * @export
 * @enum {string}
 */

export const DispositionType = {
    Waiting: 'WAITING',
    NotWaiting: 'NOT_WAITING'
} as const;

export type DispositionType = typeof DispositionType[keyof typeof DispositionType];


/**
 * Disruption communication information [Stoerungskommunikation] descriptions.
 * @export
 * @interface DisruptionCommunicationDescription
 */
export interface DisruptionCommunicationDescription {
    /**
     * Long text of disruption communication.
     * @type {string}
     * @memberof DisruptionCommunicationDescription
     */
    'text': string;
    /**
     * Optional short text of disruption communication.
     * @type {string}
     * @memberof DisruptionCommunicationDescription
     */
    'textShort'?: string;
}
/**
 * Embedded disruption communication information [Stoerungskommunikation].
 * @export
 * @interface DisruptionCommunicationEmbeddedLegacy
 */
export interface DisruptionCommunicationEmbeddedLegacy {
    /**
     * ID of disruption [StoerungsID].
     * @type {string}
     * @memberof DisruptionCommunicationEmbeddedLegacy
     */
    'disruptionID': string;
    /**
     * ID of disruption communication [StoerungskommunikationsID].
     * @type {string}
     * @memberof DisruptionCommunicationEmbeddedLegacy
     */
    'disruptionCommunicationID'?: string;
    /**
     * Display priority [Anzeigereihenfolge] for disruption. Order is by display priority asc. May be empty.
     * @type {number}
     * @memberof DisruptionCommunicationEmbeddedLegacy
     */
    'displayPriority'?: number;
    /**
     * Textual short description of disruption by language identifier.
     * @type {{ [key: string]: DisruptionCommunicationDescription; }}
     * @memberof DisruptionCommunicationEmbeddedLegacy
     */
    'descriptions': { [key: string]: DisruptionCommunicationDescription; };
}
/**
 * Detailed error information on field level.
 * @export
 * @interface ErrorDetail
 */
export interface ErrorDetail {
    /**
     * Unique code that identifies error.
     * @type {string}
     * @memberof ErrorDetail
     */
    'errorCode'?: string;
    /**
     * Common description of error.
     * @type {string}
     * @memberof ErrorDetail
     */
    'title': string;
    /**
     * Name of field / element that raised the error.
     * @type {string}
     * @memberof ErrorDetail
     */
    'field': string;
    /**
     * Detailed information for error.
     * @type {string}
     * @memberof ErrorDetail
     */
    'detail': string;
}
/**
 * API error object according to RFC7807.
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Unique code that identifies error.
     * @type {string}
     * @memberof ErrorResponse
     */
    'errorCode'?: string;
    /**
     * Common description of error.
     * @type {string}
     * @memberof ErrorResponse
     */
    'title': string;
    /**
     * Detailed information for error.
     * @type {string}
     * @memberof ErrorResponse
     */
    'detail': string;
    /**
     * Http status for error origin.
     * @type {string}
     * @memberof ErrorResponse
     */
    'status'?: string;
    /**
     * Unique identifier for instance that raised the error.
     * @type {string}
     * @memberof ErrorResponse
     */
    'instanceId'?: string;
    /**
     * List of detailed errors in case multiple errors have lead to the surrounding error.
     * @type {Array<ErrorDetail>}
     * @memberof ErrorResponse
     */
    'errors'?: Array<ErrorDetail>;
}
/**
 * Defines whether journey [Fahrt] is regular or some kind of special. - REGULAR (Regular scheduled journey) - REPLACEMENT (Journey that replaces another journey) - RELIEF (Journey that reliefs another journey) - EXTRA (Journey that is somehow extra
 * @export
 * @enum {string}
 */

export const JourneyType = {
    Regular: 'REGULAR',
    Replacement: 'REPLACEMENT',
    Relief: 'RELIEF',
    Extra: 'EXTRA'
} as const;

export type JourneyType = typeof JourneyType[keyof typeof JourneyType];


/**
 * Journey-attribute [Fahrtmerkmale / Sollmerkmale] message.
 * @export
 * @interface MessageAttributeLegacy
 */
export interface MessageAttributeLegacy {
    /**
     * Display priority [Anzeigereihenfolge aka \'Priorität*] for message. Order is ascending.
     * @type {number}
     * @memberof MessageAttributeLegacy
     */
    'displayPriority'?: number;
    /**
     * Detailed display priority [detaillierte Anzeigereihenfolge aka \'Feinsortierung\'] for message. Order is ascending.
     * @type {number}
     * @memberof MessageAttributeLegacy
     */
    'displayPriorityDetail'?: number;
    /**
     * Journey-attribute [Fahrtmerkmale / Sollmerkmale]. - FR (Fahrradmitnahme reservierungspflichtig) - RP (Reservierungspflicht) - RR (1. Kl. Reservierungspflicht) - RT (Teilreservierungspflicht) - OC (rollstuhltaugliches WC) - 3D (Schlafwagen 2. Klasse T3 mit Dusche und WC) - S1 (Schlafwagen 1. Klasse Single mit Dusche und WC) - S2 (Schlafwagen 1. Klasse Double mit Dusche und WC) - NG (Tarifliche Vereinigung (DB-Nahverkehrsfahrkarten gelten mit Ausnahme von Sonderangeboten) - NJ (Tarifliche Vereinigung (Alle Nahverkehrsfahrkarten werden anerkannt) - N+ (Tarifliche Vereinigung (Nahverkehrskooperation DB FV: fiktiver Zug) - CK (Komfort Check-in möglich) - HS (Zugang fuer Rollstuhlfahrer) - OA (Rollstuhlstellplatz - Voranmeldung unter +43 5 1717) - OG (bedingt rollstuhltaugliches WC) - RO (Rollstuhlstellplatz) - FB (Fahrradmitnahme begrenzt moeglich) - FF (Fahrradmitnahme reservierungpflichtig -nur grenzueberschreitend moeglich) - FK (Fahrradmitnahme begrenzt moeglich) - FO (Fahrradreservierung unter 030 2970 oder in Reisezentren + DB Agenturen) - FR (Fahrradmitnahme reservierungspflichtig) - G  (Fahrradmitnahme begrenzt moeglich) - NF (keine Fahrradbefoerderung moeglich) - DC (keine behindertengerechte Toilette) - EH (Fahrzeuggebundene Einstiegshilfe: Anmeldung 01806-512512 *) - EF (Fahrzeuggebundene Einstiegshilfe) - RG (Behindertengerechtes Fahrzeug) - SM (Info www.bahn.de/sh-barrierefrei) - SI (Barrierefreier Zustieg an geeigneten Stationen moeglich) - AB (Bus mit Fahrradanhaenger) - FJ (Keine Mitnahme von Fahrradgruppen moeglich) - FS (Bei Fahrradmitnahme Sperrzeiten beachten) - FT (Radexpress und Ausflugszug) - KF (Kostenlose Fahrradbefoerderung) - RF (Fahrradbus: Fuer Reisende mit Fahrrad) - TF (Bus mit Fahrradtraeger)
     * @type {string}
     * @memberof MessageAttributeLegacy
     */
    'code': string;
    /**
     * Text for attribute.
     * @type {string}
     * @memberof MessageAttributeLegacy
     */
    'text': string;
    /**
     * Short freetext of message, may be empty.
     * @type {string}
     * @memberof MessageAttributeLegacy
     */
    'textShort'?: string;
}
/**
 * Message for customers.
 * @export
 * @interface MessageLegacy
 */
export interface MessageLegacy {
    /**
     * Unique code of message may be empty in case of HIM based messages.
     * @type {string}
     * @memberof MessageLegacy
     */
    'code'?: string;
    /**
     *
     * @type {MessageType}
     * @memberof MessageLegacy
     */
    'type': MessageType;
    /**
     * Display priority [Anzeigereihenfolge] for message. Order is by display priority asc. May be empty.
     * @type {number}
     * @memberof MessageLegacy
     */
    'displayPriority'?: number;
    /**
     * Optional category of message, like for instance \'Bauarbeiten\' or \'Informationen\'
     * @type {string}
     * @memberof MessageLegacy
     */
    'category'?: string;
    /**
     * Freetext of message.
     * @type {string}
     * @memberof MessageLegacy
     */
    'text': string;
    /**
     * Short freetext of message, may be empty.
     * @type {string}
     * @memberof MessageLegacy
     */
    'textShort'?: string;
}


/**
 * Classification of message. - CUSTOMER_TEXT (unstructured free text [unstrukturierter Kundenfreitext], may be based on HIM messages (no disruptions!) (for instance \'Bitte beachten Sie die Maskenpflicht\') - QUALITY_VARIATION (structured quality variations [struckturierte Qualitätsabweichung] (for instance \'Geänderte Wagenreihung\' or \'Fahrradmitnahme nicht möglich\') - CUSTOMER_REASON (structured customer reasons [struckturierte Kundenbegründungen] (for instance \'Umgestürzter Baum auf Strecke\' or \'Verspätung aufgrund vorausfahrendem Zug\')
 * @export
 * @enum {string}
 */

export const MessageType = {
    CustomerText: 'CUSTOMER_TEXT',
    QualityVariation: 'QUALITY_VARIATION',
    CustomerReason: 'CUSTOMER_REASON'
} as const;

export type MessageType = typeof MessageType[keyof typeof MessageType];


/**
 * Specifies different personae. - HANDICAPPED (Handicaped [MER] slow traveller, not able to use stairs and escalators) - OCCASIONAL_TRAVELLER (Occasional traveller [Gelegenheits-Reisender / Standard-Reisender] having mean walking speed. This is the default traveller.) - FREQUENT_TRAVELLER (Frequent traveller [Pendler] having higher speed than occasional traveller.)
 * @export
 * @enum {string}
 */

export const PersonaType = {
    Handicapped: 'HANDICAPPED',
    OccasionalTraveller: 'OCCASIONAL_TRAVELLER',
    FrequentTraveller: 'FREQUENT_TRAVELLER'
} as const;

export type PersonaType = typeof PersonaType[keyof typeof PersonaType];


/**
 * Replacement transport [Ersatzverkehr] information, in case transport is a rail replacement transport [Schienenersatzverkehr (SEV)] or emergency bus service [Busnotverkehr]. Indicates that this transport is a replacement transport.
 * @export
 * @interface ReplacementTransport
 */
export interface ReplacementTransport {
    /**
     * Real type of replacement transport that may differ from sales perspective (for instance a \'REGIONAL_TRAIN\' is usuallay replaced by a \'BUS\'). Possible values are: - HIGH_SPEED_TRAIN (High speed train [Hochgeschwindigkeitszug] like ICE or TGV etc.) - INTERCITY_TRAIN (Inter city train [Intercityzug]) - INTER_REGIONAL_TRAIN (Inter regional train [Interregiozug]) - REGIONAL_TRAIN (Regional train [Regionalzug]) - CITY_TRAIN (City train [S-Bahn]) - SUBWAY (Subway [U-Bahn]) - TRAM (Tram [Strassenbahn]) - BUS (Bus [Bus]) - FERRY (Ferry [Faehre]) - SHUTTLE (Shuttle [Ruftaxi]) - FLIGHT (Flight [Flug]) - UNKNOWN (Unknown)
     * @type {string}
     * @memberof ReplacementTransport
     */
    'realType': string;
}
/**
 * Sort keys for time based sorting. - TIME (Sorting based on best known time information ie real before preview before schedule) - TIME_SCHEDULE (Sorting based on schedule time)
 * @export
 * @enum {string}
 */

export const SortKeyTime = {
    Time: 'TIME',
    TimeSchedule: 'TIME_SCHEDULE'
} as const;

export type SortKeyTime = typeof SortKeyTime[keyof typeof SortKeyTime];


/**
 * Stop at a particular stop-place [Haltestelle] for arrival / departure boards.
 * @export
 * @interface StopAtStopPlace
 */
export interface StopAtStopPlace {
    /**
     * Eva number of stop-place [Haltestelle].
     * @type {string}
     * @memberof StopAtStopPlace
     */
    'evaNumber': string;
    /**
     * Name for stop-place [Haltestelle] in fixed language \'DE\'.
     * @type {string}
     * @memberof StopAtStopPlace
     */
    'name': string;
    /**
     * Indicates whether the stop ie departure / arrival has been canceled [Haltausfall].
     * @type {boolean}
     * @memberof StopAtStopPlace
     */
    'canceled': boolean;
}
/**
 * Stop at a particular stop-place [Haltestelle] for arrival / departure boards with display priority [Anzeigeprioritaet].
 * @export
 * @interface StopAtStopPlacePrio
 */
export interface StopAtStopPlacePrio {
    /**
     * Eva number of stop-place [Haltestelle].
     * @type {string}
     * @memberof StopAtStopPlacePrio
     */
    'evaNumber': string;
    /**
     * Name for stop-place [Haltestelle] in fixed language \'DE\'.
     * @type {string}
     * @memberof StopAtStopPlacePrio
     */
    'name': string;
    /**
     * Indicates whether the stop ie departure / arrival has been canceled [Haltausfall].
     * @type {boolean}
     * @memberof StopAtStopPlacePrio
     */
    'canceled': boolean;
    /**
     * Indicates whether this stop is additional [Zusatzhalt], meaning not be part of the regular schedule.
     * @type {boolean}
     * @memberof StopAtStopPlacePrio
     */
    'additional': boolean;
    /**
     * Display priority for station within via list. Priority is ascending (1 = hightest priority, ...).
     * @type {number}
     * @memberof StopAtStopPlacePrio
     */
    'displayPriority': number;
}
/**
 * Departure information within departure boards [Abfahrtstafeln] with connect info [Anschlussinformation].
 * @export
 * @interface StopDepartureConnect
 */
export interface StopDepartureConnect {
    /**
     *
     * @type {StopPlaceEmbedded}
     * @memberof StopDepartureConnect
     */
    'station': StopPlaceEmbedded;
    /**
     * ID of journey [FahrtID].
     * @type {string}
     * @memberof StopDepartureConnect
     */
    'journeyID': string;
    /**
     * Scheduled time [Abfahrtszeit Soll] of stop as fully qualified date (for instance \'2019-08-19T12:56:14+02:00\' or \'2019-08-19T10:56:14Z\').
     * @type {string}
     * @memberof StopDepartureConnect
     */
    'timeSchedule': string;
    /**
     *
     * @type {TimeType}
     * @memberof StopDepartureConnect
     */
    'timeType': TimeType;
    /**
     * Best known time information of stop as fully qualified date (for instance \'2019-08-19T12:56:14+02:00\' or \'2019-08-19T10:56:14Z\').
     * @type {string}
     * @memberof StopDepartureConnect
     */
    'time': string;
    /**
     * Indicates whether stop is an on demand stop [Bedarfshalt].
     * @type {boolean}
     * @memberof StopDepartureConnect
     */
    'onDemand': boolean;
    /**
     * Scheduled platform [Gleis, Bahnsteig, Plattform] the transport departs at.
     * @type {string}
     * @memberof StopDepartureConnect
     */
    'platformSchedule'?: string;
    /**
     * Actual platform [Gleis, Bahnsteig, Plattform] the transport departs at.
     * @type {string}
     * @memberof StopDepartureConnect
     */
    'platform': string;
    /**
     *
     * @type {Administration}
     * @memberof StopDepartureConnect
     */
    'administration': Administration;
    /**
     * List of available messages to display for this departure.
     * @type {Array<MessageLegacy>}
     * @memberof StopDepartureConnect
     */
    'messages'?: Array<MessageLegacy>;
    /**
     * List of disruptions [Stoerungsinformationen] for particular stop.
     * @type {Array<DisruptionCommunicationEmbeddedLegacy>}
     * @memberof StopDepartureConnect
     */
    'disruptions'?: Array<DisruptionCommunicationEmbeddedLegacy>;
    /**
     * List of journey-attributes [Fahrtmerkmale / Sollmerkmale] for particular stop..
     * @type {Array<MessageAttributeLegacy>}
     * @memberof StopDepartureConnect
     */
    'attributes'?: Array<MessageAttributeLegacy>;
    /**
     * ID of departure [AbfahrtID].
     * @type {string}
     * @memberof StopDepartureConnect
     */
    'departureID': string;
    /**
     *
     * @type {TransportPublicDestinationVia}
     * @memberof StopDepartureConnect
     */
    'transport': TransportPublicDestinationVia;
    /**
     *
     * @type {JourneyType}
     * @memberof StopDepartureConnect
     */
    'journeyType': JourneyType;
    /**
     * Indicates whether this departure is additional [Zusatzhalt], meaning not be part of the regular schedule.
     * @type {boolean}
     * @memberof StopDepartureConnect
     */
    'additional': boolean;
    /**
     * Indicates whether the departure has been canceled [Haltausfall].
     * @type {boolean}
     * @memberof StopDepartureConnect
     */
    'canceled': boolean;
    /**
     * List of transports this journey reliefs for [Entlastungszug].
     * @type {Array<TransportPublicDestination>}
     * @memberof StopDepartureConnect
     */
    'reliefFor'?: Array<TransportPublicDestination>;
    /**
     * List of transports this journey is reliefed by [Entlastungszug].
     * @type {Array<TransportPublicDestination>}
     * @memberof StopDepartureConnect
     */
    'reliefBy'?: Array<TransportPublicDestination>;
    /**
     * List of transports this journey replaces [Ersatzzug].
     * @type {Array<TransportPublicDestination>}
     * @memberof StopDepartureConnect
     */
    'replacementFor'?: Array<TransportPublicDestination>;
    /**
     * List of transports this journey is replaced by [Ersatzzug].
     * @type {Array<TransportPublicDestination>}
     * @memberof StopDepartureConnect
     */
    'replacedBy'?: Array<TransportPublicDestination>;
    /**
     *
     * @type {TransportPublicDestination}
     * @memberof StopDepartureConnect
     */
    'continuationBy'?: TransportPublicDestination;
    /**
     * List of journeys this journey travels with [Vereinigung].
     * @type {Array<TransportPublicDestinationPortionWorking>}
     * @memberof StopDepartureConnect
     */
    'travelsWith'?: Array<TransportPublicDestinationPortionWorking>;
    /**
     * List of codeshares [Code-Teilungen mit Flügen verschiedener Fluggesellschaften] for this particular journey at this arrival / departure.
     * @type {Array<CodeShare>}
     * @memberof StopDepartureConnect
     */
    'codeshares'?: Array<CodeShare>;
    /**
     * Indicates whether there is at least one disruption in the future of this journey.
     * @type {boolean}
     * @memberof StopDepartureConnect
     */
    'futureDisruptions': boolean;
    /**
     *
     * @type {ConnectionSource}
     * @memberof StopDepartureConnect
     */
    'connectionSource': ConnectionSource;
    /**
     *
     * @type {DispositionStatus}
     * @memberof StopDepartureConnect
     */
    'dispositionStatus'?: DispositionStatus;
    /**
     *
     * @type {ConnectionPlatformHint}
     * @memberof StopDepartureConnect
     */
    'platformHint': ConnectionPlatformHint;
    /**
     * Connection status [Anschlussbewertung] for different personae based on best known time information.
     * @type {Array<ConnectionEvaluationLegacy>}
     * @memberof StopDepartureConnect
     */
    'connectionStatusByPersona': Array<ConnectionEvaluationLegacy>;
    /**
     * Connection status [Anschlussbewertung] for different personae based on scheduled times. Useful if you want to know whether the connection was possible based on scheduled information. Take care that additional departures or additional trains have never been possible based on scheduled information.
     * @type {Array<ConnectionEvaluationLegacy>}
     * @memberof StopDepartureConnect
     */
    'connectionStatusByPersonaScheduled': Array<ConnectionEvaluationLegacy>;
    /**
     *
     * @type {ContractualKnowledge}
     * @memberof StopDepartureConnect
     */
    'contractualKnowledge'?: ContractualKnowledge;
}


/**
 * Comprehensive stop-place [Haltestelle] information.
 * @export
 * @interface StopPlaceEmbedded
 */
export interface StopPlaceEmbedded {
    /**
     * Eva number of stop-place [Haltestelle].
     * @type {string}
     * @memberof StopPlaceEmbedded
     */
    'evaNumber': string;
    /**
     * Name for stop-place [Haltestelle] in fixed language \'DE\'.
     * @type {string}
     * @memberof StopPlaceEmbedded
     */
    'name': string;
}
/**
 * Specifies on which information \'time\' is based. - SCHEDULE (Time source is schedule [Plan / Soll]) - PREVIEW (Time source is preview / forecast [Vorschau / Disposition / Prognose]) - REAL (Time source is real [Echt = passiert (kann nur in die Vergangenheit gesetzt werden)
 * @export
 * @enum {string}
 */

export const TimeType = {
    Schedule: 'SCHEDULE',
    Preview: 'PREVIEW',
    Real: 'REAL'
} as const;

export type TimeType = typeof TimeType[keyof typeof TimeType];


/**
 * Public transport [Oeffentlicher Transport] with (scheduled) destination [Ziel] and differing destination in case the final stop of the journey changed [Haltausfall, Laufwegverlängerung, ...].
 * @export
 * @interface TransportPublicDestination
 */
export interface TransportPublicDestination {
    /**
     *
     * @type {TransportType}
     * @memberof TransportPublicDestination
     */
    'type': TransportType;
    /**
     * Code of the transport [Fahrtgattung].
     * @type {string}
     * @memberof TransportPublicDestination
     */
    'category': string;
    /**
     * Number of the transport [Fahrtnummer].
     * @type {number}
     * @memberof TransportPublicDestination
     */
    'number': number;
    /**
     * Line of the transport [Linie].
     * @type {string}
     * @memberof TransportPublicDestination
     */
    'line'?: string;
    /**
     * Marketing - or product name of the transport, for instance \'Sprinter\' or \'Schwarzwaldexpress\' etc. [Marketing Name / Produkt Name].
     * @type {string}
     * @memberof TransportPublicDestination
     */
    'label'?: string;
    /**
     *
     * @type {ReplacementTransport}
     * @memberof TransportPublicDestination
     */
    'replacementTransport'?: ReplacementTransport;
    /**
     *
     * @type {DirectionInfo}
     * @memberof TransportPublicDestination
     */
    'direction'?: DirectionInfo;
    /**
     * ID of journey [FahrtID].
     * @type {string}
     * @memberof TransportPublicDestination
     */
    'journeyID': string;
    /**
     *
     * @type {StopAtStopPlace}
     * @memberof TransportPublicDestination
     */
    'destination': StopAtStopPlace;
    /**
     *
     * @type {StopAtStopPlace}
     * @memberof TransportPublicDestination
     */
    'differingDestination'?: StopAtStopPlace;
}


/**
 * Public transport [Oeffentlicher Transport] with (scheduled) destination [Ziel] and differing destination [abweichender Zielhalt] for coupled transports [vereinigte Züge].
 * @export
 * @interface TransportPublicDestinationPortionWorking
 */
export interface TransportPublicDestinationPortionWorking {
    /**
     *
     * @type {TransportType}
     * @memberof TransportPublicDestinationPortionWorking
     */
    'type': TransportType;
    /**
     * Code of the transport [Fahrtgattung].
     * @type {string}
     * @memberof TransportPublicDestinationPortionWorking
     */
    'category': string;
    /**
     * Number of the transport [Fahrtnummer].
     * @type {number}
     * @memberof TransportPublicDestinationPortionWorking
     */
    'number': number;
    /**
     * Line of the transport [Linie].
     * @type {string}
     * @memberof TransportPublicDestinationPortionWorking
     */
    'line'?: string;
    /**
     * Marketing - or product name of the transport, for instance \'Sprinter\' or \'Schwarzwaldexpress\' etc. [Marketing Name / Produkt Name].
     * @type {string}
     * @memberof TransportPublicDestinationPortionWorking
     */
    'label'?: string;
    /**
     *
     * @type {ReplacementTransport}
     * @memberof TransportPublicDestinationPortionWorking
     */
    'replacementTransport'?: ReplacementTransport;
    /**
     *
     * @type {DirectionInfo}
     * @memberof TransportPublicDestinationPortionWorking
     */
    'direction'?: DirectionInfo;
    /**
     * ID of journey [FahrtID].
     * @type {string}
     * @memberof TransportPublicDestinationPortionWorking
     */
    'journeyID': string;
    /**
     *
     * @type {StopAtStopPlace}
     * @memberof TransportPublicDestinationPortionWorking
     */
    'destination': StopAtStopPlace;
    /**
     *
     * @type {StopAtStopPlace}
     * @memberof TransportPublicDestinationPortionWorking
     */
    'differingDestination'?: StopAtStopPlace;
    /**
     *
     * @type {StopPlaceEmbedded}
     * @memberof TransportPublicDestinationPortionWorking
     */
    'separationAt'?: StopPlaceEmbedded;
}


/**
 * Public transport [Oeffentlicher Transport] with (scheduled) destination [Ziel], differing destination in case the final stop of the journey changed [Haltausfall, Laufwegverlängerung, ...], and via [Via-Halte].
 * @export
 * @interface TransportPublicDestinationVia
 */
export interface TransportPublicDestinationVia {
    /**
     *
     * @type {TransportType}
     * @memberof TransportPublicDestinationVia
     */
    'type': TransportType;
    /**
     * Code of the transport [Fahrtgattung].
     * @type {string}
     * @memberof TransportPublicDestinationVia
     */
    'category': string;
    /**
     * Number of the transport [Fahrtnummer].
     * @type {number}
     * @memberof TransportPublicDestinationVia
     */
    'number': number;
    /**
     * Line of the transport [Linie].
     * @type {string}
     * @memberof TransportPublicDestinationVia
     */
    'line'?: string;
    /**
     * Marketing - or product name of the transport, for instance \'Sprinter\' or \'Schwarzwaldexpress\' etc. [Marketing Name / Produkt Name].
     * @type {string}
     * @memberof TransportPublicDestinationVia
     */
    'label'?: string;
    /**
     *
     * @type {ReplacementTransport}
     * @memberof TransportPublicDestinationVia
     */
    'replacementTransport'?: ReplacementTransport;
    /**
     *
     * @type {DirectionInfo}
     * @memberof TransportPublicDestinationVia
     */
    'direction'?: DirectionInfo;
    /**
     * ID of journey [FahrtID].
     * @type {string}
     * @memberof TransportPublicDestinationVia
     */
    'journeyID': string;
    /**
     *
     * @type {StopAtStopPlace}
     * @memberof TransportPublicDestinationVia
     */
    'destination': StopAtStopPlace;
    /**
     *
     * @type {StopAtStopPlace}
     * @memberof TransportPublicDestinationVia
     */
    'differingDestination'?: StopAtStopPlace;
    /**
     * List of remaining stations the transport stops at [ViaHalt].
     * @type {Array<StopAtStopPlacePrio>}
     * @memberof TransportPublicDestinationVia
     */
    'via': Array<StopAtStopPlacePrio>;
}


/**
 * Type of transport. - HIGH_SPEED_TRAIN (High speed train [Hochgeschwindigkeitszug] like ICE or TGV etc.) - INTERCITY_TRAIN (Inter city train [Intercityzug]) - INTER_REGIONAL_TRAIN (Inter regional train [Interregiozug]) - REGIONAL_TRAIN (Regional train [Regionalzug]) - CITY_TRAIN (City train [S-Bahn]) - SUBWAY (Subway [U-Bahn]) - TRAM (Tram [Strassenbahn]) - BUS (Bus [Bus]) - FERRY (Ferry [Faehre]) - FLIGHT (Flight [Flugzeug]) - CAR (Car [Auto]) - TAXI (Taxi) - SHUTTLE (Shuttle [Ruftaxi]) - BIKE ((E-)Bike [Fahrrad]) - SCOOTER ((E-)Scooter [Roller]) - WALK (Walk ([Laufen]) - UNKNOWN (Unknown)
 * @export
 * @enum {string}
 */

export const TransportType = {
    HighSpeedTrain: 'HIGH_SPEED_TRAIN',
    IntercityTrain: 'INTERCITY_TRAIN',
    InterRegionalTrain: 'INTER_REGIONAL_TRAIN',
    RegionalTrain: 'REGIONAL_TRAIN',
    CityTrain: 'CITY_TRAIN',
    Subway: 'SUBWAY',
    Tram: 'TRAM',
    Bus: 'BUS',
    Ferry: 'FERRY',
    Flight: 'FLIGHT',
    Car: 'CAR',
    Taxi: 'TAXI',
    Shuttle: 'SHUTTLE',
    Bike: 'BIKE',
    Scooter: 'SCOOTER',
    Walk: 'WALK',
    Unknown: 'UNKNOWN'
} as const;

export type TransportType = typeof TransportType[keyof typeof TransportType];



/**
 * ConnectionsApi - axios parameter creator
 * @export
 */
export const ConnectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns connecting transports [Anschlussoptionen] for a transport arriving at a particular stop [Haltestelle] with individual connection information [Anschlussbewertung].
         * @param {string} journeyID id of journey [FahrtID]
         * @param {string} arrivalID id of arrival [AnkunftID]
         * @param {number} [timeSlot] time slot in minutes starting at arrivaltime of the requested arrivalID, in which the connections depart from the station (group) of the arrival, if omitted defaults to 30 minutes (max of 12h is allowed for time span)
         * @param {boolean} [includeStationGroup] should all stations of group the requested eva numbers belong to (for instance a request to \&#39;FFM Hoch\&#39; would also return \&#39;FFM tief\&#39;) be included
         * @param {boolean} [includeMessagesDisruptions] include messages [Meldungen / Freitexte] and disruptions [Stoerungen], if false no messages and disruption information will be returned
         * @param {boolean} [onlyPossibleConnections] indicates whether only possible connections should be returned, if false also impossible connections (connect time too short or connection in the past due to delays) are returned
         * @param {Array<TransportType>} [filterTransports] filter for transport types that should be returned, if ommitted all types of transport are returned
         * @param {number} [maxViaStops] limits amount of via stops per transport (limitation doesn\&#39;t apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned
         * @param {number} [maxTransports] limits amount of results, if ommitted no truncation is applied
         * @param {SortKeyTime} [sortBy] define sorting order, if omitted sorting is by TIME - TIME (Sorting based on best known time information ie real before preview before schedule) - TIME_SCHEDULE (Sorting based on schedule time)
         * @param {boolean} [includeContractualKnowledge] include additional information in order to apply so called \&#39;Vertragswissen\&#39; at consumer side, defaults to false and will be removed in later versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectionsArrival: async (journeyID: string, arrivalID: string, timeSlot?: number, includeStationGroup?: boolean, includeMessagesDisruptions?: boolean, onlyPossibleConnections?: boolean, filterTransports?: Array<TransportType>, maxViaStops?: number, maxTransports?: number, sortBy?: SortKeyTime, includeContractualKnowledge?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'journeyID' is not null or undefined
            assertParamExists('connectionsArrival', 'journeyID', journeyID)
            // verify required parameter 'arrivalID' is not null or undefined
            assertParamExists('connectionsArrival', 'arrivalID', arrivalID)
            const localVarPath = `/byarrival/{journeyID}/{arrivalID}`
                .replace(`{${"journeyID"}}`, encodeURIComponent(String(journeyID)))
                .replace(`{${"arrivalID"}}`, encodeURIComponent(String(arrivalID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (timeSlot !== undefined) {
                localVarQueryParameter['timeSlot'] = timeSlot;
            }

            if (includeStationGroup !== undefined) {
                localVarQueryParameter['includeStationGroup'] = includeStationGroup;
            }

            if (includeMessagesDisruptions !== undefined) {
                localVarQueryParameter['includeMessagesDisruptions'] = includeMessagesDisruptions;
            }

            if (onlyPossibleConnections !== undefined) {
                localVarQueryParameter['onlyPossibleConnections'] = onlyPossibleConnections;
            }

            if (filterTransports) {
                localVarQueryParameter['filterTransports'] = filterTransports;
            }

            if (maxViaStops !== undefined) {
                localVarQueryParameter['maxViaStops'] = maxViaStops;
            }

            if (maxTransports !== undefined) {
                localVarQueryParameter['maxTransports'] = maxTransports;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (includeContractualKnowledge !== undefined) {
                localVarQueryParameter['includeContractualKnowledge'] = includeContractualKnowledge;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConnectionsApi - functional programming interface
 * @export
 */
export const ConnectionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConnectionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns connecting transports [Anschlussoptionen] for a transport arriving at a particular stop [Haltestelle] with individual connection information [Anschlussbewertung].
         * @param {string} journeyID id of journey [FahrtID]
         * @param {string} arrivalID id of arrival [AnkunftID]
         * @param {number} [timeSlot] time slot in minutes starting at arrivaltime of the requested arrivalID, in which the connections depart from the station (group) of the arrival, if omitted defaults to 30 minutes (max of 12h is allowed for time span)
         * @param {boolean} [includeStationGroup] should all stations of group the requested eva numbers belong to (for instance a request to \&#39;FFM Hoch\&#39; would also return \&#39;FFM tief\&#39;) be included
         * @param {boolean} [includeMessagesDisruptions] include messages [Meldungen / Freitexte] and disruptions [Stoerungen], if false no messages and disruption information will be returned
         * @param {boolean} [onlyPossibleConnections] indicates whether only possible connections should be returned, if false also impossible connections (connect time too short or connection in the past due to delays) are returned
         * @param {Array<TransportType>} [filterTransports] filter for transport types that should be returned, if ommitted all types of transport are returned
         * @param {number} [maxViaStops] limits amount of via stops per transport (limitation doesn\&#39;t apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned
         * @param {number} [maxTransports] limits amount of results, if ommitted no truncation is applied
         * @param {SortKeyTime} [sortBy] define sorting order, if omitted sorting is by TIME - TIME (Sorting based on best known time information ie real before preview before schedule) - TIME_SCHEDULE (Sorting based on schedule time)
         * @param {boolean} [includeContractualKnowledge] include additional information in order to apply so called \&#39;Vertragswissen\&#39; at consumer side, defaults to false and will be removed in later versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectionsArrival(journeyID: string, arrivalID: string, timeSlot?: number, includeStationGroup?: boolean, includeMessagesDisruptions?: boolean, onlyPossibleConnections?: boolean, filterTransports?: Array<TransportType>, maxViaStops?: number, maxTransports?: number, sortBy?: SortKeyTime, includeContractualKnowledge?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectionArrival>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connectionsArrival(journeyID, arrivalID, timeSlot, includeStationGroup, includeMessagesDisruptions, onlyPossibleConnections, filterTransports, maxViaStops, maxTransports, sortBy, includeContractualKnowledge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConnectionsApi - factory interface
 * @export
 */
export const ConnectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConnectionsApiFp(configuration)
    return {
        /**
         * Returns connecting transports [Anschlussoptionen] for a transport arriving at a particular stop [Haltestelle] with individual connection information [Anschlussbewertung].
         * @param {ConnectionsApiConnectionsArrivalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectionsArrival(requestParameters: ConnectionsApiConnectionsArrivalRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectionArrival> {
            return localVarFp.connectionsArrival(requestParameters.journeyID, requestParameters.arrivalID, requestParameters.timeSlot, requestParameters.includeStationGroup, requestParameters.includeMessagesDisruptions, requestParameters.onlyPossibleConnections, requestParameters.filterTransports, requestParameters.maxViaStops, requestParameters.maxTransports, requestParameters.sortBy, requestParameters.includeContractualKnowledge, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for connectionsArrival operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiConnectionsArrivalRequest
 */
export interface ConnectionsApiConnectionsArrivalRequest {
    /**
     * id of journey [FahrtID]
     * @type {string}
     * @memberof ConnectionsApiConnectionsArrival
     */
    readonly journeyID: string

    /**
     * id of arrival [AnkunftID]
     * @type {string}
     * @memberof ConnectionsApiConnectionsArrival
     */
    readonly arrivalID: string

    /**
     * time slot in minutes starting at arrivaltime of the requested arrivalID, in which the connections depart from the station (group) of the arrival, if omitted defaults to 30 minutes (max of 12h is allowed for time span)
     * @type {number}
     * @memberof ConnectionsApiConnectionsArrival
     */
    readonly timeSlot?: number

    /**
     * should all stations of group the requested eva numbers belong to (for instance a request to \&#39;FFM Hoch\&#39; would also return \&#39;FFM tief\&#39;) be included
     * @type {boolean}
     * @memberof ConnectionsApiConnectionsArrival
     */
    readonly includeStationGroup?: boolean

    /**
     * include messages [Meldungen / Freitexte] and disruptions [Stoerungen], if false no messages and disruption information will be returned
     * @type {boolean}
     * @memberof ConnectionsApiConnectionsArrival
     */
    readonly includeMessagesDisruptions?: boolean

    /**
     * indicates whether only possible connections should be returned, if false also impossible connections (connect time too short or connection in the past due to delays) are returned
     * @type {boolean}
     * @memberof ConnectionsApiConnectionsArrival
     */
    readonly onlyPossibleConnections?: boolean

    /**
     * filter for transport types that should be returned, if ommitted all types of transport are returned
     * @type {Array<TransportType>}
     * @memberof ConnectionsApiConnectionsArrival
     */
    readonly filterTransports?: Array<TransportType>

    /**
     * limits amount of via stops per transport (limitation doesn\&#39;t apply to additional and canceled stops), if ommitted all via stops are returned, if zero no via stops are returned
     * @type {number}
     * @memberof ConnectionsApiConnectionsArrival
     */
    readonly maxViaStops?: number

    /**
     * limits amount of results, if ommitted no truncation is applied
     * @type {number}
     * @memberof ConnectionsApiConnectionsArrival
     */
    readonly maxTransports?: number

    /**
     * define sorting order, if omitted sorting is by TIME - TIME (Sorting based on best known time information ie real before preview before schedule) - TIME_SCHEDULE (Sorting based on schedule time)
     * @type {SortKeyTime}
     * @memberof ConnectionsApiConnectionsArrival
     */
    readonly sortBy?: SortKeyTime

    /**
     * include additional information in order to apply so called \&#39;Vertragswissen\&#39; at consumer side, defaults to false and will be removed in later versions
     * @type {boolean}
     * @memberof ConnectionsApiConnectionsArrival
     */
    readonly includeContractualKnowledge?: boolean
}

/**
 * ConnectionsApi - object-oriented interface
 * @export
 * @class ConnectionsApi
 * @extends {BaseAPI}
 */
export class ConnectionsApi extends BaseAPI {
    /**
     * Returns connecting transports [Anschlussoptionen] for a transport arriving at a particular stop [Haltestelle] with individual connection information [Anschlussbewertung].
     * @param {ConnectionsApiConnectionsArrivalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApi
     */
    public connectionsArrival(requestParameters: ConnectionsApiConnectionsArrivalRequest, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).connectionsArrival(requestParameters.journeyID, requestParameters.arrivalID, requestParameters.timeSlot, requestParameters.includeStationGroup, requestParameters.includeMessagesDisruptions, requestParameters.onlyPossibleConnections, requestParameters.filterTransports, requestParameters.maxViaStops, requestParameters.maxTransports, requestParameters.sortBy, requestParameters.includeContractualKnowledge, options).then((request) => request(this.axios, this.basePath));
    }
}
