/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as AboutImport } from './routes/about';
import { Route as SplatImport } from './routes/$';
import { Route as RoutingSplatImport } from './routes/routing/$';

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any);

const SplatRoute = SplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRoute,
} as any);

const RoutingSplatRoute = RoutingSplatImport.update({
  id: '/routing/$',
  path: '/routing/$',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$': {
      id: '/$';
      path: '/$';
      fullPath: '/$';
      preLoaderRoute: typeof SplatImport;
      parentRoute: typeof rootRoute;
    };
    '/about': {
      id: '/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AboutImport;
      parentRoute: typeof rootRoute;
    };
    '/routing/$': {
      id: '/routing/$';
      path: '/routing/$';
      fullPath: '/routing/$';
      preLoaderRoute: typeof RoutingSplatImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/$': typeof SplatRoute;
  '/about': typeof AboutRoute;
  '/routing/$': typeof RoutingSplatRoute;
}

export interface FileRoutesByTo {
  '/$': typeof SplatRoute;
  '/about': typeof AboutRoute;
  '/routing/$': typeof RoutingSplatRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/$': typeof SplatRoute;
  '/about': typeof AboutRoute;
  '/routing/$': typeof RoutingSplatRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/$' | '/about' | '/routing/$';
  fileRoutesByTo: FileRoutesByTo;
  to: '/$' | '/about' | '/routing/$';
  id: '__root__' | '/$' | '/about' | '/routing/$';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  SplatRoute: typeof SplatRoute;
  AboutRoute: typeof AboutRoute;
  RoutingSplatRoute: typeof RoutingSplatRoute;
}

const rootRouteChildren: RootRouteChildren = {
  SplatRoute: SplatRoute,
  AboutRoute: AboutRoute,
  RoutingSplatRoute: RoutingSplatRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/$",
        "/about",
        "/routing/$"
      ]
    },
    "/$": {
      "filePath": "$.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/routing/$": {
      "filePath": "routing/$.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
